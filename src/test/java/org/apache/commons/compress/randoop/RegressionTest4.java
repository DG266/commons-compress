package org.apache.commons.compress.randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        java.lang.String str1 = x7875_NewUnix0.toString();
        byte[] byteArray2 = x7875_NewUnix0.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = org.apache.commons.compress.compressors.xz.XZUtils.matches(byteArray2, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0x7875 Zip Extra Field: UID=1000 GID=1000" + "'", str1, "0x7875 Zip Extra Field: UID=1000 GID=1000");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarFile tarFile4 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.nio.file.attribute.FileTime fileTime9 = null;
        tarArchiveEntry7.setCreationTime(fileTime9);
        long long11 = tarArchiveEntry7.getSize();
        java.io.InputStream inputStream12 = tarFile4.getInputStream(tarArchiveEntry7);
        java.nio.file.Path path13 = null;
        expander0.expand(tarFile4, path13);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray15 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel16 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray15);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile17 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel16);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream18 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel16);
        char[] charArray19 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile20 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel16, charArray19);
        org.apache.commons.compress.archivers.tar.TarFile tarFile21 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel16);
        java.io.File file22 = null;
        expander0.expand(tarFile21, file22);
        java.io.InputStream inputStream24 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream25 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream24);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream25, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy28 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream30 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream25, pack200Strategy28, strMap29);
        int int31 = pack200CompressorInputStream30.read();
        java.io.InputStream inputStream32 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream32);
        zipArchiveInputStream33.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream36 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy37 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream38 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream36, pack200Strategy37);
        java.nio.channels.SeekableByteChannel seekableByteChannel39 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream40 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel39);
        java.util.Map<java.lang.String, java.lang.String> strMap41 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream42 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream40, strMap41);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream43 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream42);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer44 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap45 = packer44.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream46 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream43, (java.util.Map<java.lang.String, java.lang.String>) strMap45);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream47 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream30, pack200Strategy37, (java.util.Map<java.lang.String, java.lang.String>) strMap45);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer48 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap49 = packer48.properties();
        org.apache.commons.compress.compressors.FileNameUtil fileNameUtil51 = new org.apache.commons.compress.compressors.FileNameUtil((java.util.Map<java.lang.String, java.lang.String>) strMap49, ".lzma");
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream52 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream30, (java.util.Map<java.lang.String, java.lang.String>) strMap49);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream53 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream30);
        byte[] byteArray55 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) 7);
        int int56 = pack200CompressorInputStream30.read(byteArray55);
        java.io.File file57 = null;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer58 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream59 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream60 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream59);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream61 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream60);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream62 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream61);
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters63 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters63.setWithZlibHeader(false);
        deflateParameters63.setWithZlibHeader(true);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream68 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) brotliCompressorInputStream62, deflateParameters63);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream71 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) deflateCompressorInputStream68, "zip", false);
        closeableConsumer58.accept((java.io.Closeable) zipArchiveInputStream71);
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand((java.io.InputStream) pack200CompressorInputStream30, file57, closeableConsumer58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(seekableByteChannelArray15);
        org.junit.Assert.assertNotNull(seekableByteChannel16);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
        org.junit.Assert.assertNotNull(pack200Strategy28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 80 + "'", int31 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy37);
        org.junit.Assert.assertNotNull(packer44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(packer48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[7, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(closeableConsumer58);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        sevenZArchiveEntry0.setHasLastModifiedDate(false);
        boolean boolean5 = sevenZArchiveEntry0.getHasCrc();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry8 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path9 = tarArchiveEntry8.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path13 = tarArchiveEntry12.getPath();
        java.nio.file.attribute.FileTime fileTime14 = null;
        tarArchiveEntry12.setCreationTime(fileTime14);
        java.nio.file.attribute.FileTime fileTime16 = tarArchiveEntry12.getLastModifiedTime();
        tarArchiveEntry8.setLastAccessTime(fileTime16);
        boolean boolean18 = tarArchiveEntry8.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime19 = tarArchiveEntry8.getLastModifiedTime();
        sevenZArchiveEntry0.setCreationTime(fileTime19);
        sevenZArchiveEntry0.setDirectory(true);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry25 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date26 = cpioArchiveEntry25.getLastModifiedDate();
        cpioArchiveEntry25.setRemoteDeviceMaj((long) 'a');
        int int29 = cpioArchiveEntry25.getAlignmentBoundary();
        long long30 = cpioArchiveEntry25.getRemoteDeviceMaj();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry33 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path34 = tarArchiveEntry33.getPath();
        java.nio.file.attribute.FileTime fileTime35 = null;
        tarArchiveEntry33.setCreationTime(fileTime35);
        int int37 = tarArchiveEntry33.getUserId();
        java.util.Date date38 = tarArchiveEntry33.getModTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry41 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path42 = tarArchiveEntry41.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry45 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path46 = tarArchiveEntry45.getPath();
        java.nio.file.attribute.FileTime fileTime47 = null;
        tarArchiveEntry45.setCreationTime(fileTime47);
        java.nio.file.attribute.FileTime fileTime49 = tarArchiveEntry45.getLastModifiedTime();
        tarArchiveEntry41.setLastAccessTime(fileTime49);
        tarArchiveEntry33.setModTime(fileTime49);
        cpioArchiveEntry25.setTime(fileTime49);
        sevenZArchiveEntry0.setLastModifiedTime(fileTime49);
        sevenZArchiveEntry0.setCrc((int) (byte) 54);
        sevenZArchiveEntry0.setWindowsAttributes(508);
        boolean boolean58 = sevenZArchiveEntry0.getHasCreationDate();
        long long59 = sevenZArchiveEntry0.getCrcValue();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(path9);
        org.junit.Assert.assertNull(path13);
        org.junit.Assert.assertNotNull(fileTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(fileTime19);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 97L + "'", long30 == 97L);
        org.junit.Assert.assertNull(path34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Mon Jun 19 23:20:46 CEST 2023");
        org.junit.Assert.assertNull(path42);
        org.junit.Assert.assertNull(path46);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 54L + "'", long59 == 54L);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        boolean boolean3 = jarArchiveEntry1.isStreamContiguous();
        long long4 = jarArchiveEntry1.getDataOffset();
        boolean boolean5 = jarArchiveEntry1.isUnixSymlink();
        int int6 = jarArchiveEntry1.getVersionRequired();
        java.nio.file.attribute.FileTime fileTime7 = jarArchiveEntry1.getLastAccessTime();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry9 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField10 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry9.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField10);
        byte[] byteArray12 = jarArchiveEntry9.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField13 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry9.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField13);
        byte[] byteArray15 = resourceAlignmentExtraField13.getLocalFileDataData();
        jarArchiveEntry1.setCentralDirectoryExtra(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry17 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(fileTime7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0]");
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions5 = org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.DEFAULT;
        boolean boolean6 = sevenZFileOptions5.getUseDefaultNameForUnnamedEntries();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile7 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, "org.apache.commons.compress.archivers.ArchiveException: 0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:19:20.457Z] ", sevenZFileOptions5);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(sevenZFileOptions5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray1 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        byte[] byteArray2 = zip64ExtendedInformationExtraField0.getCentralDirectoryData();
        zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(false, false, false, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = zip64ExtendedInformationExtraField0.getRelativeHeaderOffset();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNull(zipEightByteInteger8);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder0 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder2 = builder0.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder4 = builder2.withLazyThreshold(6);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder6 = builder2.withMaxLiteralLength(263);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder8 = builder6.withLazyThreshold(2);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder10 = builder6.withLazyMatching(false);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder11 = builder10.tunedForSpeed();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        zipArchiveOutputStream1.flush();
        boolean boolean5 = zipArchiveOutputStream1.isSeekable();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream snappyCompressorOutputStream8 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, 312764420000L, 88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: windowSize must be a power of two");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.lang.String str2 = zipEightByteInteger1.toString();
        byte[] byteArray3 = zipEightByteInteger1.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray3, 156);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 156");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ZipEightByteInteger value: 0" + "'", str2, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        tarArchiveEntry1.setGroupId(4096);
        java.nio.file.Path path4 = tarArchiveEntry1.getPath();
        java.nio.file.attribute.FileTime fileTime5 = tarArchiveEntry1.getLastAccessTime();
        org.junit.Assert.assertNull(path4);
        org.junit.Assert.assertNull(fileTime5);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        java.lang.String str0 = org.apache.commons.compress.archivers.ar.ArArchiveEntry.HEADER;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "!<arch>\n" + "'", str0, "!<arch>\n");
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        int int1 = dumpArchiveEntry0.getNlink();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.lang.String str4 = zipArchiveOutputStream3.getEncoding();
        boolean boolean5 = zipArchiveOutputStream3.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date9 = cpioArchiveEntry8.getLastModifiedDate();
        cpioArchiveEntry8.setRemoteDeviceMaj((long) 'a');
        int int12 = cpioArchiveEntry8.getAlignmentBoundary();
        boolean boolean13 = zipArchiveOutputStream3.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry8);
        cpioArchiveEntry8.setDeviceMin((long) 26128);
        boolean boolean16 = cpioArchiveEntry8.isSocket();
        java.util.Date date17 = cpioArchiveEntry8.getLastModifiedDate();
        dumpArchiveEntry0.setAccessTime(date17);
        long long19 = dumpArchiveEntry0.getSize();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF8" + "'", str4, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream6 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize8 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder12 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder14 = builder12.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder16 = builder14.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters17 = builder16.build();
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters18 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize8, true, false, false, parameters17);
        int int19 = parameters17.getNiceBackReferenceLength();
        int int20 = parameters17.getMaxCandidates();
        org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream snappyCompressorOutputStream21 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream6, 18L, parameters17);
        snappyCompressorOutputStream21.write((int) (short) 8);
        snappyCompressorOutputStream21.finish();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort25 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray26 = zipShort25.getBytes();
        boolean boolean28 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray26, (int) 'a');
        org.apache.commons.compress.archivers.tar.TarFile tarFile29 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray26);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker31 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        byte[] byteArray32 = jarMarker31.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode34 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray35 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray32, false, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode34);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray36 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray26, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode34);
        // The following exception was thrown during execution in test generation
        try {
            snappyCompressorOutputStream21.write(byteArray26, 0, 256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + blockSize8 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize8.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(parameters17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 512 + "'", int20 == 512);
        org.junit.Assert.assertNotNull(zipShort25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jarMarker31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode34 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT + "'", extraFieldParsingMode34.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT));
        org.junit.Assert.assertNotNull(zipExtraFieldArray35);
        org.junit.Assert.assertNotNull(zipExtraFieldArray36);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder0 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder2 = builder0.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder4 = builder2.withLazyThreshold(6);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder6 = builder2.withMaxLiteralLength(263);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder8 = builder6.withLazyThreshold(2);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder10 = builder6.withLazyMatching(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        deflateCompressorOutputStream16.write(511);
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream blockLZ4CompressorOutputStream19 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream((java.io.OutputStream) deflateCompressorOutputStream16);
        blockLZ4CompressorOutputStream19.write(16384);
        blockLZ4CompressorOutputStream19.finish();
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean26 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray24, 49152);
        blockLZ4CompressorOutputStream19.write(byteArray24, 1, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            blockLZ4CompressorOutputStream19.close();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2);
        zipArchiveOutputStream2.setComment("0x000A Zip Extra Field: Modify:[2023-06-19T21:19:55.787Z]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        long long2 = zipArchiveOutputStream1.getBytesWritten();
        zipArchiveOutputStream1.setEncoding("deflate64");
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        zipArchiveOutputStream1.setMethod(263);
        zipArchiveOutputStream1.setUseLanguageEncodingFlag(true);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.write(2048);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder5 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions6 = builder5.build();
        boolean boolean7 = sevenZFileOptions6.getTryToRecoverBrokenArchives();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile8 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, "br", sevenZFileOptions6);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(sevenZFileOptions6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder0 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder2 = builder0.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder4 = builder2.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder6 = builder4.withMaxNumberOfCandidates(40960);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder7 = builder4.tunedForSpeed();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder9 = builder7.withMaxBackReferenceLength(1024);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.util.concurrent.ExecutorService executorService1 = null;
        java.nio.file.Path path2 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier3 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path2);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator4 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService1, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier3);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore5 = defaultBackingStoreSupplier3.get();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator7 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier3, 26625);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Compression level is expected between -1~9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore5);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS11 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger12 = x000A_NTFS11.getModifyTime();
        java.util.Date date13 = x000A_NTFS11.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger14 = x000A_NTFS11.getModifyTime();
        x000A_NTFS0.setModifyTime(zipEightByteInteger14);
        byte[] byteArray17 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean19 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray17, 3);
        boolean boolean21 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray17, (int) (byte) 53);
        boolean boolean23 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray17, (int) ' ');
        boolean boolean25 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray17, 0);
        // The following exception was thrown during execution in test generation
        try {
            x000A_NTFS0.parseFromLocalFileData(byteArray17, 1000, 29127);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1004");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger12);
        org.junit.Assert.assertNull(date13);
        org.junit.Assert.assertNotNull(zipEightByteInteger14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("deflate64");
        int int2 = cpioArchiveEntry1.getAlignmentBoundary();
        cpioArchiveEntry1.setName(".bz2");
        java.util.Date date5 = cpioArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField2);
        byte[] byteArray4 = jarArchiveEntry1.getCentralDirectoryExtra();
        int int5 = jarArchiveEntry1.getUnixMode();
        int int6 = jarArchiveEntry1.getPlatform();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile7 = new org.apache.commons.compress.archivers.zip.ZipFile(seekableByteChannel1, "cpio", "ZipLong value: -1", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ZipLong value: -1");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        org.apache.commons.compress.changes.ChangeSet changeSet5 = new org.apache.commons.compress.changes.ChangeSet();
        changeSet5.deleteDir("hi!");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry9 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField10 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry9.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField10);
        java.nio.file.attribute.FileTime fileTime12 = jarArchiveEntry9.getLastAccessTime();
        java.io.InputStream inputStream13 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream13);
        zipArchiveInputStream14.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry18 = jarArchiveInputStream17.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry19 = jarArchiveInputStream17.getNextEntry();
        changeSet5.add((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry9, (java.io.InputStream) jarArchiveInputStream17);
        boolean boolean21 = zipArchiveOutputStream2.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry9);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream22.close();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(fileTime12);
        org.junit.Assert.assertNull(archiveEntry18);
        org.junit.Assert.assertNull(archiveEntry19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarFile tarFile4 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.nio.file.attribute.FileTime fileTime9 = null;
        tarArchiveEntry7.setCreationTime(fileTime9);
        long long11 = tarArchiveEntry7.getSize();
        java.io.InputStream inputStream12 = tarFile4.getInputStream(tarArchiveEntry7);
        java.nio.file.Path path13 = null;
        expander0.expand(tarFile4, path13);
        org.apache.commons.compress.archivers.zip.ZipFile zipFile15 = null;
        java.io.File file16 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand(zipFile15, file16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory1 = new org.apache.commons.compress.compressors.CompressorStreamFactory(false);
        java.util.Set<java.lang.String> strSet2 = compressorStreamFactory1.getOutputStreamCompressorNames();
        // The following exception was thrown during execution in test generation
        try {
            compressorStreamFactory1.setDecompressConcatenated(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot override the setting defined by the constructor");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray4 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile5 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray4);
        org.apache.commons.compress.archivers.tar.TarFile tarFile6 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray7 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel8 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray7);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile9 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel8);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel8);
        char[] charArray11 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile12 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel8, charArray11);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile13 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray11);
        // The following exception was thrown during execution in test generation
        try {
            sevenZOutputFile13.close();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray7);
        org.junit.Assert.assertNotNull(seekableByteChannel8);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry0 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        java.util.Date date1 = arjArchiveEntry0.getLastModifiedDate();
        boolean boolean2 = arjArchiveEntry0.isDirectory();
        org.junit.Assert.assertNotNull(date1);
        org.junit.Assert.assertEquals(date1.toString(), "Fri Nov 30 00:00:00 CET 1979");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS11 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger12 = x000A_NTFS11.getModifyTime();
        java.util.Date date13 = x000A_NTFS11.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger14 = x000A_NTFS11.getModifyTime();
        x000A_NTFS0.setModifyTime(zipEightByteInteger14);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort16 = x000A_NTFS0.getLocalFileDataLength();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger12);
        org.junit.Assert.assertNull(date13);
        org.junit.Assert.assertNotNull(zipEightByteInteger14);
        org.junit.Assert.assertNotNull(zipShort16);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        int int5 = jarArchiveEntry1.getRawFlag();
        jarArchiveEntry1.setExternalAttributes((long) (byte) 51);
        long long8 = jarArchiveEntry1.getTime();
        jarArchiveEntry1.setVersionMadeBy(1);
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        bZip2CompressorOutputStream5.finish();
        bZip2CompressorOutputStream5.flush();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) bZip2CompressorOutputStream5, (short) (byte) 52, 2048);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT;
        archiveStreamFactory0.setEntryEncoding("data descriptor");
        java.nio.channels.SeekableByteChannel seekableByteChannel4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel4);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream5, strMap6);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream8 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream7);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream7, "snappy-framed");
        tarArchiveOutputStream10.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream14 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream10, "deflate64");
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream14);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream17 = archiveStreamFactory0.createArchiveOutputStream("jar", (java.io.OutputStream) jarArchiveOutputStream15, "error");
        java.util.Set<java.lang.String> strSet18 = archiveStreamFactory0.getOutputStreamArchiveNames();
        org.junit.Assert.assertNotNull(archiveStreamFactory0);
        org.junit.Assert.assertNotNull(archiveOutputStream17);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer5 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap6 = packer5.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream4, (java.util.Map<java.lang.String, java.lang.String>) strMap6);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField8 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField9 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean15 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray13, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior17 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray13, false, extraFieldParsingBehavior17);
        boolean boolean20 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray13, 32768);
        unrecognizedExtraField9.setLocalFileDataData(byteArray13);
        unrecognizedExtraField8.setCentralDirectoryData(byteArray13);
        pack200CompressorOutputStream7.write(byteArray13);
        pack200CompressorOutputStream7.write(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder26 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder28 = builder26.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder30 = builder28.withLazyThreshold(6);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder32 = builder28.withMaxLiteralLength(263);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder34 = builder32.withLazyThreshold(2);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters35 = builder34.build();
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream blockLZ4CompressorOutputStream36 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream7, parameters35);
        int int37 = parameters35.getMaxLiteralLength();
        org.junit.Assert.assertNotNull(packer5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(parameters35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 263 + "'", int37 == 263);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        char[] charArray10 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile11 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2, charArray10);
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create(sevenZOutputFile11, file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  , a, #, 4]");
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        boolean boolean1 = org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename("ZipLong value: -1");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        java.nio.file.attribute.FileTime fileTime3 = null;
        sevenZArchiveEntry0.setAccessTime(fileTime3);
        boolean boolean5 = sevenZArchiveEntry0.getHasWindowsAttributes();
        java.lang.Iterable<? extends org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration> wildcardIterable6 = sevenZArchiveEntry0.getContentMethods();
        sevenZArchiveEntry0.setAccessDate(172318L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardIterable6);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT;
        archiveStreamFactory0.setEntryEncoding("data descriptor");
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.archivers.ArchiveStreamProvider> strMap3 = archiveStreamFactory0.getArchiveOutputStreamProviders();
        java.io.InputStream inputStream5 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream5);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream7 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream6);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream8 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream6);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = tarArchiveInputStream8.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream10 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream8);
        int int11 = deflateCompressorInputStream10.available();
        int int12 = deflateCompressorInputStream10.available();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream13 = archiveStreamFactory0.createArchiveInputStream("ZipEightByteInteger value: 0", (java.io.InputStream) deflateCompressorInputStream10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipEightByteInteger value: 0 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(archiveStreamFactory0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(tarArchiveEntry9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        long long3 = cpioArchiveEntry2.getMode();
        cpioArchiveEntry2.setSize((long) (short) 2);
        cpioArchiveEntry2.setDeviceMaj((long) (-1));
        java.lang.String str8 = cpioArchiveEntry2.getName();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = cpioArchiveEntry2.getRemoteDevice();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32768L + "'", long3 == 32768L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        int int1 = org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt((byte) 10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 10 + "'", int1 == 10);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField0 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = null;
        unrecognizedExtraField0.setHeaderId(zipShort1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = unrecognizedExtraField0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = unrecognizedExtraField0.getLocalFileDataLength();
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipShort4);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = new org.apache.commons.compress.archivers.zip.JarMarker();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = jarMarker0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix2 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        byte[] byteArray3 = x7875_NewUnix2.getLocalFileDataData();
        java.nio.channels.SeekableByteChannel seekableByteChannel4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel4);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream5, strMap6);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream8 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream7);
        framedSnappyCompressorOutputStream8.finish();
        framedSnappyCompressorOutputStream8.finish();
        framedSnappyCompressorOutputStream8.finish();
        java.nio.channels.SeekableByteChannel seekableByteChannel12 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel12);
        java.lang.String str14 = zipArchiveOutputStream13.getEncoding();
        boolean boolean15 = zipArchiveOutputStream13.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry18 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date19 = cpioArchiveEntry18.getLastModifiedDate();
        cpioArchiveEntry18.setRemoteDeviceMaj((long) 'a');
        int int22 = cpioArchiveEntry18.getAlignmentBoundary();
        boolean boolean23 = zipArchiveOutputStream13.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry18);
        zipArchiveOutputStream13.setComment("pack.code.attribute.");
        java.io.InputStream inputStream26 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream27 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream26);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream29 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream27, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy30 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream32 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream27, pack200Strategy30, strMap31);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream34 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream13, pack200Strategy30, strMap33);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream35 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream8, pack200Strategy30);
        boolean boolean36 = x7875_NewUnix2.equals((java.lang.Object) framedSnappyCompressorOutputStream8);
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField38 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (short) 100);
        byte[] byteArray39 = resourceAlignmentExtraField38.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort40 = resourceAlignmentExtraField38.getCentralDirectoryLength();
        byte[] byteArray41 = resourceAlignmentExtraField38.getCentralDirectoryData();
        x7875_NewUnix2.parseFromCentralDirectoryData(byteArray41, (int) (byte) 49, (int) (byte) 100);
        boolean boolean46 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray41, (int) (byte) 54);
        // The following exception was thrown during execution in test generation
        try {
            jarMarker0.parseFromLocalFileData(byteArray41, 32, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: JarMarker doesn't expect any data");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 2, -24, 3, 2, -24, 3]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTF8" + "'", str14, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pack200Strategy30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 0]");
        org.junit.Assert.assertNotNull(zipShort40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100, 0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x000A_NTFS0.getHeaderId();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS3 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger4 = x000A_NTFS3.getModifyTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger5 = x000A_NTFS3.getModifyTime();
        x000A_NTFS0.setModifyTime(zipEightByteInteger5);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS7 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = x000A_NTFS7.getModifyTime();
        java.util.Date date9 = x000A_NTFS7.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger10 = x000A_NTFS7.getModifyTime();
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod11 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64;
        boolean boolean12 = zipEightByteInteger10.equals((java.lang.Object) sevenZMethod11);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS13 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger14 = x000A_NTFS13.getModifyTime();
        java.lang.String str15 = zipEightByteInteger14.toString();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField16 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong18 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray19 = zipLong18.getBytes();
        zip64ExtendedInformationExtraField16.setDiskStartNumber(zipLong18);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp21 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong22 = x5455_ExtendedTimestamp21.getAccessTime();
        byte[] byteArray23 = x5455_ExtendedTimestamp21.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry26 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path27 = tarArchiveEntry26.getPath();
        java.nio.file.attribute.FileTime fileTime28 = null;
        tarArchiveEntry26.setCreationTime(fileTime28);
        java.nio.file.attribute.FileTime fileTime30 = tarArchiveEntry26.getLastModifiedTime();
        x5455_ExtendedTimestamp21.setAccessFileTime(fileTime30);
        boolean boolean32 = x5455_ExtendedTimestamp21.isBit1_accessTimePresent();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong33 = x5455_ExtendedTimestamp21.getAccessTime();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry36 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long37 = arArchiveEntry36.getLastModified();
        long long38 = arArchiveEntry36.getLength();
        java.util.Date date39 = arArchiveEntry36.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong40 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date39);
        x5455_ExtendedTimestamp21.setModifyTime(zipLong40);
        zip64ExtendedInformationExtraField16.setDiskStartNumber(zipLong40);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField43 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger5, zipEightByteInteger10, zipEightByteInteger14, zipLong40);
        java.math.BigInteger bigInteger44 = zipEightByteInteger10.getValue();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger45 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger(bigInteger44);
        java.math.BigInteger bigInteger46 = zipEightByteInteger45.getValue();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipEightByteInteger4);
        org.junit.Assert.assertNotNull(zipEightByteInteger5);
        org.junit.Assert.assertNotNull(zipEightByteInteger8);
        org.junit.Assert.assertNull(date9);
        org.junit.Assert.assertNotNull(zipEightByteInteger10);
        org.junit.Assert.assertTrue("'" + sevenZMethod11 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64 + "'", sevenZMethod11.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ZipEightByteInteger value: 0" + "'", str15, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNull(zipLong22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0]");
        org.junit.Assert.assertNull(path27);
        org.junit.Assert.assertNotNull(fileTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(zipLong33);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1687209649L + "'", long37 == 1687209649L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 12L + "'", long38 == 12L);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Mon Jun 19 23:20:49 CEST 2023");
        org.junit.Assert.assertNotNull(zipLong40);
        org.junit.Assert.assertNotNull(bigInteger44);
        org.junit.Assert.assertNotNull(bigInteger46);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        long long6 = tarArchiveEntry2.getSize();
        boolean boolean7 = tarArchiveEntry2.isCheckSumOK();
        tarArchiveEntry2.setLinkName("ZipShort value: 25461");
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(0L);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding13 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("lz4-block");
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveEntry2.parseTarHeader(byteArray11, zipEncoding13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 33, 0]");
        org.junit.Assert.assertNotNull(zipEncoding13);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 488);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream5);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream9 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream5, 67324752, "snappy-raw");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream10 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream((java.io.InputStream) tarArchiveInputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        int int10 = tarArchiveOutputStream6.getCount();
        tarArchiveOutputStream6.finish();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream12 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6);
        tarArchiveOutputStream6.setLongFileMode((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        int int7 = pack200CompressorInputStream6.read();
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream8);
        zipArchiveInputStream9.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream9);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy13 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream12, pack200Strategy13);
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream16, strMap17);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream19 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream18);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer20 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap21 = packer20.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream19, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, pack200Strategy13, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer24 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap25 = packer24.properties();
        org.apache.commons.compress.compressors.FileNameUtil fileNameUtil27 = new org.apache.commons.compress.compressors.FileNameUtil((java.util.Map<java.lang.String, java.lang.String>) strMap25, ".lzma");
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream28 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, (java.util.Map<java.lang.String, java.lang.String>) strMap25);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream29 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) pack200CompressorInputStream6);
        // The following exception was thrown during execution in test generation
        try {
            brotliCompressorInputStream29.reset();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: mark/reset not supported");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 80 + "'", int7 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy13);
        org.junit.Assert.assertNotNull(packer20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(packer24);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "gz");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry8 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path9 = tarArchiveEntry8.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path13 = tarArchiveEntry12.getPath();
        java.nio.file.attribute.FileTime fileTime14 = null;
        tarArchiveEntry12.setCreationTime(fileTime14);
        java.nio.file.attribute.FileTime fileTime16 = tarArchiveEntry12.getLastModifiedTime();
        tarArchiveEntry8.setLastAccessTime(fileTime16);
        boolean boolean18 = tarArchiveEntry8.isGNULongNameEntry();
        long long19 = tarArchiveEntry8.getLongUserId();
        boolean boolean20 = jarArchiveInputStream5.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry8);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList21 = tarArchiveEntry8.getOrderedSparseHeaders();
        org.junit.Assert.assertNull(path9);
        org.junit.Assert.assertNull(path13);
        org.junit.Assert.assertNotNull(fileTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList21);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        byte byte2 = tarArchiveEntry1.getLinkFlag();
        tarArchiveEntry1.setModTime((long) (byte) 76);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry[] tarArchiveEntryArray5 = tarArchiveEntry1.getDirectoryEntries();
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 48 + "'", byte2 == (byte) 48);
        org.junit.Assert.assertNotNull(tarArchiveEntryArray5);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray7 = zipShort6.getBytes();
        boolean boolean9 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray7, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray7, true);
        gzipCompressorOutputStream5.write(byteArray7);
        closeableConsumer0.accept((java.io.Closeable) gzipCompressorOutputStream5);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry15 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData16 = jarArchiveEntry15.getUnparseableExtraFieldData();
        jarArchiveEntry15.setCompressedSize((long) 64);
        int int19 = jarArchiveEntry15.getRawFlag();
        jarArchiveEntry15.setExternalAttributes((long) (byte) 51);
        byte[] byteArray23 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean25 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray23, 3);
        boolean boolean27 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray23, 3);
        jarArchiveEntry15.setExtra(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            gzipCompressorOutputStream5.write(byteArray23, 512, 120);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
        org.junit.Assert.assertNull(unparseableExtraFieldData16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) (byte) 1, "apkm.gz", 51L);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        boolean boolean2 = asiExtraField0.isDirectory();
        boolean boolean3 = asiExtraField0.isDirectory();
        int int4 = asiExtraField0.getGroupId();
        boolean boolean5 = asiExtraField0.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = asiExtraField0.getHeaderId();
        java.lang.Object obj7 = asiExtraField0.clone();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        long long7 = tarArchiveEntry2.getRealSize();
        boolean boolean8 = tarArchiveEntry2.isBlockDevice();
        java.lang.String str9 = tarArchiveEntry2.getGroupName();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = tarArchiveEntry2.getExtraPaxHeaders();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp11 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = x5455_ExtendedTimestamp11.getAccessTime();
        byte[] byteArray13 = x5455_ExtendedTimestamp11.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path17 = tarArchiveEntry16.getPath();
        java.nio.file.attribute.FileTime fileTime18 = null;
        tarArchiveEntry16.setCreationTime(fileTime18);
        java.nio.file.attribute.FileTime fileTime20 = tarArchiveEntry16.getLastModifiedTime();
        x5455_ExtendedTimestamp11.setAccessFileTime(fileTime20);
        tarArchiveEntry2.setCreationTime(fileTime20);
        tarArchiveEntry2.setModTime((long) (short) 10);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(zipLong12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0]");
        org.junit.Assert.assertNull(path17);
        org.junit.Assert.assertNotNull(fileTime20);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.lang.Object obj1 = x5455_ExtendedTimestamp0.clone();
        byte byte2 = x5455_ExtendedTimestamp0.getFlags();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong4 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray5 = zipLong4.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong7 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray5, 0);
        java.lang.String str8 = zipLong7.toString();
        x5455_ExtendedTimestamp0.setAccessTime(zipLong7);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1, -1]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ZipLong value: 4294967295" + "'", str8, "ZipLong value: 4294967295");
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        int int0 = org.apache.commons.compress.archivers.tar.TarConstants.DEFAULT_BLKSIZE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 10240 + "'", int0 == 10240);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, 60012, 32768, "apkm", true);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray8 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel9 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray8);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel9);
        char[] charArray17 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile18 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel9, charArray17);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile19 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray17);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray20 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel21 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray20);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile22 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel21);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream23 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel21);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray24 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel25 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray24);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream26 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel25);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile27 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel25);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray28 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel29 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray28);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile30 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel29);
        org.apache.commons.compress.archivers.tar.TarFile tarFile31 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel29);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray32 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel33 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray32);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile34 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel33);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream35 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel33);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray36 = new java.nio.channels.SeekableByteChannel[] { seekableByteChannel21, seekableByteChannel25, seekableByteChannel29, seekableByteChannel33 };
        java.nio.channels.SeekableByteChannel seekableByteChannel37 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray36);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile38 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel37);
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod39 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2;
        sevenZOutputFile38.setContentCompression(sevenZMethod39);
        sevenZOutputFile19.setContentCompression(sevenZMethod39);
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(seekableByteChannelArray8);
        org.junit.Assert.assertNotNull(seekableByteChannel9);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, a,  , a, #, 4]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray20);
        org.junit.Assert.assertNotNull(seekableByteChannel21);
        org.junit.Assert.assertNotNull(seekableByteChannelArray24);
        org.junit.Assert.assertNotNull(seekableByteChannel25);
        org.junit.Assert.assertNotNull(seekableByteChannelArray28);
        org.junit.Assert.assertNotNull(seekableByteChannel29);
        org.junit.Assert.assertNotNull(seekableByteChannelArray32);
        org.junit.Assert.assertNotNull(seekableByteChannel33);
        org.junit.Assert.assertNotNull(seekableByteChannelArray36);
        org.junit.Assert.assertNotNull(seekableByteChannel37);
        org.junit.Assert.assertTrue("'" + sevenZMethod39 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2 + "'", sevenZMethod39.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2));
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong4 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date3);
        int int5 = zipLong4.getIntValue();
        byte[] byteArray7 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) '#');
        // The following exception was thrown during execution in test generation
        try {
            zipLong4.putLong(byteArray7, 75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 75");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(zipLong4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2162688 + "'", int5 == 2162688);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[35, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong2);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp5 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong6 = x5455_ExtendedTimestamp5.getAccessTime();
        byte[] byteArray7 = x5455_ExtendedTimestamp5.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry10 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path11 = tarArchiveEntry10.getPath();
        java.nio.file.attribute.FileTime fileTime12 = null;
        tarArchiveEntry10.setCreationTime(fileTime12);
        java.nio.file.attribute.FileTime fileTime14 = tarArchiveEntry10.getLastModifiedTime();
        x5455_ExtendedTimestamp5.setAccessFileTime(fileTime14);
        boolean boolean16 = x5455_ExtendedTimestamp5.isBit1_accessTimePresent();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong17 = x5455_ExtendedTimestamp5.getAccessTime();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry20 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long21 = arArchiveEntry20.getLastModified();
        long long22 = arArchiveEntry20.getLength();
        java.util.Date date23 = arArchiveEntry20.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong24 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date23);
        x5455_ExtendedTimestamp5.setModifyTime(zipLong24);
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong24);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger27 = null;
        zip64ExtendedInformationExtraField0.setSize(zipEightByteInteger27);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp29 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong30 = x5455_ExtendedTimestamp29.getAccessTime();
        byte[] byteArray31 = x5455_ExtendedTimestamp29.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry34 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path35 = tarArchiveEntry34.getPath();
        java.nio.file.attribute.FileTime fileTime36 = null;
        tarArchiveEntry34.setCreationTime(fileTime36);
        java.nio.file.attribute.FileTime fileTime38 = tarArchiveEntry34.getLastModifiedTime();
        x5455_ExtendedTimestamp29.setAccessFileTime(fileTime38);
        boolean boolean40 = x5455_ExtendedTimestamp29.isBit1_accessTimePresent();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong41 = x5455_ExtendedTimestamp29.getAccessTime();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry44 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long45 = arArchiveEntry44.getLastModified();
        long long46 = arArchiveEntry44.getLength();
        java.util.Date date47 = arArchiveEntry44.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong48 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date47);
        x5455_ExtendedTimestamp29.setModifyTime(zipLong48);
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong48);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNull(zipLong6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0]");
        org.junit.Assert.assertNull(path11);
        org.junit.Assert.assertNotNull(fileTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(zipLong17);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1687209650L + "'", long21 == 1687209650L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 12L + "'", long22 == 12L);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Mon Jun 19 23:20:50 CEST 2023");
        org.junit.Assert.assertNotNull(zipLong24);
        org.junit.Assert.assertNull(zipLong30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0]");
        org.junit.Assert.assertNull(path35);
        org.junit.Assert.assertNotNull(fileTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(zipLong41);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1687209650L + "'", long45 == 1687209650L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 12L + "'", long46 == 12L);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Mon Jun 19 23:20:50 CEST 2023");
        org.junit.Assert.assertNotNull(zipLong48);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData5 = jarArchiveEntry1.getUnparseableExtraFieldData();
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit6 = new org.apache.commons.compress.archivers.zip.GeneralPurposeBit();
        jarArchiveEntry1.setGeneralPurposeBit(generalPurposeBit6);
        int int8 = jarArchiveEntry1.getMethod();
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertNull(unparseableExtraFieldData5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        java.nio.file.Path path0 = null;
        java.nio.file.LinkOption[] linkOptionArray2 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry(path0, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:19:20.457Z] ", linkOptionArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(linkOptionArray2);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator3 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier2.get();
        java.util.concurrent.ExecutorService executorService5 = null;
        java.nio.file.Path path6 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier7 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path6);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator8 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService5, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier7);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore9 = defaultBackingStoreSupplier7.get();
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore10 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore11 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor12 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore11);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream13 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore10, streamCompressor12);
        long long14 = streamCompressor12.getTotalBytesWritten();
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream15 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore9, streamCompressor12);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream16 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore4, streamCompressor12);
        java.nio.channels.SeekableByteChannel seekableByteChannel17 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream18 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream20 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream18, strMap19);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream21 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream20);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream23 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream20, "snappy-framed");
        tarArchiveOutputStream23.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream23, "deflate64");
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream29 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream27, "apkm");
        long long30 = jarArchiveOutputStream27.getBytesWritten();
        scatterZipOutputStream16.writeTo((org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream) jarArchiveOutputStream27);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS32 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger33 = x000A_NTFS32.getModifyTime();
        java.lang.String str34 = zipEightByteInteger33.toString();
        byte[] byteArray35 = zipEightByteInteger33.getBytes();
        byte[] byteArray36 = zipEightByteInteger33.getBytes();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField38 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW;
        int int39 = unparseableExtraField38.getKey();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray40 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray36, false, unparseableExtraField38);
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveOutputStream27.writePreamble(byteArray36, (int) (byte) 83, 26128);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore9);
        org.junit.Assert.assertNotNull(streamCompressor12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(zipEightByteInteger33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ZipEightByteInteger value: 0" + "'", str34, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(unparseableExtraField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray40);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode12 = org.apache.commons.compress.archivers.zip.Zip64Mode.Always;
        zipArchiveOutputStream1.setUseZip64(zip64Mode12);
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream blockLZ4CompressorOutputStream14 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.xz.XZCompressorOutputStream xZCompressorOutputStream16 = new org.apache.commons.compress.compressors.xz.XZCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, 420);
            org.junit.Assert.fail("Expected exception of type org.tukaani.xz.UnsupportedOptionsException; message: Unsupported preset: 420");
        } catch (org.tukaani.xz.UnsupportedOptionsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + zip64Mode12 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.Always + "'", zip64Mode12.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.Always));
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        byte byte2 = tarArchiveEntry1.getLinkFlag();
        int int3 = tarArchiveEntry1.getDevMinor();
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList4 = tarArchiveEntry1.getSparseHeaders();
        long long5 = tarArchiveEntry1.getLongGroupId();
        boolean boolean6 = tarArchiveEntry1.isPaxHeader();
        java.nio.file.attribute.FileTime fileTime7 = tarArchiveEntry1.getLastModifiedTime();
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 48 + "'", byte2 == (byte) 48);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(tarArchiveStructSparseList4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(fileTime7);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path10 = tarArchiveEntry9.getPath();
        java.nio.file.attribute.FileTime fileTime11 = null;
        tarArchiveEntry9.setCreationTime(fileTime11);
        java.nio.file.attribute.FileTime fileTime13 = tarArchiveEntry9.getLastModifiedTime();
        tarArchiveEntry9.setNames(" \000", "UTF8");
        boolean boolean17 = tarArchiveInputStream3.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry9);
        org.apache.commons.compress.compressors.snappy.FramedSnappyDialect framedSnappyDialect19 = org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE;
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream20 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream((java.io.InputStream) tarArchiveInputStream3, (int) (byte) 1, framedSnappyDialect19);
        int int21 = framedSnappyCompressorInputStream20.getCount();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream framedLZ4CompressorInputStream22 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream((java.io.InputStream) framedSnappyCompressorInputStream20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertNull(path10);
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + framedSnappyDialect19 + "' != '" + org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE + "'", framedSnappyDialect19.equals(org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = tarArchiveInputStream3.available();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(tarArchiveEntry4);
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setGroupId(0);
        int int3 = dumpArchiveEntry0.getGroupId();
        dumpArchiveEntry0.setGroupId(0);
        boolean boolean6 = dumpArchiveEntry0.isFile();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        int int2 = zipArchiveOutputStream1.getCount();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry5 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long6 = arArchiveEntry5.getLastModified();
        long long7 = arArchiveEntry5.getLength();
        boolean boolean8 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) arArchiveEntry5);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1687209650L + "'", long6 == 1687209650L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 12L + "'", long7 == 12L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry6 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 26128 kb. If the file is not corrupt, consider increasing the memory limit.", (long) 'a', (int) '#', 1000, (int) (short) 4, (long) 40960);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile3 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        long long10 = tarArchiveEntry6.getSize();
        java.io.InputStream inputStream11 = tarFile3.getInputStream(tarArchiveEntry6);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(inputStream11);
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream lZMACompressorInputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream((java.io.InputStream) pack200CompressorInputStream12, 26625);
        long long15 = lZMACompressorInputStream14.getCompressedCount();
        long long17 = lZMACompressorInputStream14.skip((long) 25461);
        lZMACompressorInputStream14.close();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = lZMACompressorInputStream14.skip(312764420000L);
            org.junit.Assert.fail("Expected exception of type org.tukaani.xz.XZIOException; message: Stream closed");
        } catch (org.tukaani.xz.XZIOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 18L + "'", long15 == 18L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize0 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder4 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder6 = builder4.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder8 = builder6.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters9 = builder8.build();
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters10 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize0, true, false, false, parameters9);
        int int11 = parameters9.getNiceBackReferenceLength();
        int int12 = parameters9.getMaxCandidates();
        int int13 = parameters9.getLazyMatchingThreshold();
        int int14 = parameters9.getLazyMatchingThreshold();
        org.junit.Assert.assertTrue("'" + blockSize0 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize0.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(parameters9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 512 + "'", int12 == 512);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.compressors.snappy.FramedSnappyDialect framedSnappyDialect2 = org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE;
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream3 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream(inputStream0, framedSnappyDialect2);
        int int4 = framedSnappyCompressorInputStream3.available();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS5 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger6 = x000A_NTFS5.getModifyTime();
        java.util.Date date7 = x000A_NTFS5.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = x000A_NTFS5.getModifyTime();
        byte[] byteArray9 = x000A_NTFS5.getCentralDirectoryData();
        int int12 = framedSnappyCompressorInputStream3.read(byteArray9, 3, 0);
        boolean boolean14 = org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byteArray9, 80);
        org.junit.Assert.assertTrue("'" + framedSnappyDialect2 + "' != '" + org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE + "'", framedSnappyDialect2.equals(org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(zipEightByteInteger6);
        org.junit.Assert.assertNull(date7);
        org.junit.Assert.assertNotNull(zipEightByteInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("false", (byte) 76, false);
        tarArchiveEntry3.setUserName("7z");
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature0 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD;
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry2 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData3 = jarArchiveEntry2.getUnparseableExtraFieldData();
        jarArchiveEntry2.setCompressedSize((long) 64);
        int int6 = jarArchiveEntry2.getRawFlag();
        jarArchiveEntry2.setExternalAttributes((long) (byte) 51);
        java.lang.Object obj9 = jarArchiveEntry2.clone();
        jarArchiveEntry2.setSize((long) 345);
        jarArchiveEntry2.setVersionRequired((int) (short) 2);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException14 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature0, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry2);
        boolean boolean15 = jarArchiveEntry2.isUnixSymlink();
        org.junit.Assert.assertNotNull(feature0);
        org.junit.Assert.assertNull(unparseableExtraFieldData3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "bzip2");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "bzip2");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "bzip2");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        int int0 = org.apache.commons.compress.archivers.tar.TarConstants.SPARSE_NUMBYTES_LEN;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 12 + "'", int0 == 12);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField0 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean6 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray4, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior8 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray4, false, extraFieldParsingBehavior8);
        boolean boolean11 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray4, 32768);
        unrecognizedExtraField0.setLocalFileDataData(byteArray4);
        java.nio.channels.SeekableByteChannel seekableByteChannel13 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel13);
        java.lang.String str15 = zipArchiveOutputStream14.getEncoding();
        boolean boolean16 = zipArchiveOutputStream14.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry19 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date20 = cpioArchiveEntry19.getLastModifiedDate();
        cpioArchiveEntry19.setRemoteDeviceMaj((long) 'a');
        int int23 = cpioArchiveEntry19.getAlignmentBoundary();
        boolean boolean24 = zipArchiveOutputStream14.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry19);
        cpioArchiveEntry19.setDeviceMin((long) 26128);
        boolean boolean27 = cpioArchiveEntry19.isSocket();
        cpioArchiveEntry19.setUID(29L);
        int int30 = cpioArchiveEntry19.getHeaderPadCount();
        cpioArchiveEntry19.setDeviceMin(1687209501L);
        java.io.InputStream inputStream33 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream34 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream33);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry36 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField37 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry36.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField37);
        byte[] byteArray39 = jarArchiveEntry36.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField40 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry36.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField40);
        byte[] byteArray42 = resourceAlignmentExtraField40.getLocalFileDataData();
        int int45 = zipArchiveInputStream34.read(byteArray42, 1000, 493);
        boolean boolean46 = cpioArchiveEntry19.equals((java.lang.Object) byteArray42);
        boolean boolean48 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byteArray42, 9);
        // The following exception was thrown during execution in test generation
        try {
            unrecognizedExtraField0.parseFromCentralDirectoryData(byteArray42, 36864, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 36864 > 36863");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTF8" + "'", str15, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        int int7 = tarArchiveOutputStream6.getCount();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = x000A_NTFS0.getHeaderId();
        byte[] byteArray12 = x000A_NTFS0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger13 = x000A_NTFS0.getAccessTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort14 = x000A_NTFS0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger15 = x000A_NTFS0.getModifyTime();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS16 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger17 = x000A_NTFS16.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel18 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel18);
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream21 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream19, strMap20);
        byte[] byteArray22 = new byte[] {};
        pack200CompressorOutputStream21.write(byteArray22);
        x000A_NTFS16.parseFromCentralDirectoryData(byteArray22, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger27 = x000A_NTFS16.getAccessTime();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS28 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger29 = x000A_NTFS28.getModifyTime();
        java.util.Date date30 = x000A_NTFS28.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger31 = x000A_NTFS28.getModifyTime();
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod32 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64;
        boolean boolean33 = zipEightByteInteger31.equals((java.lang.Object) sevenZMethod32);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry35 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData36 = jarArchiveEntry35.getUnparseableExtraFieldData();
        boolean boolean37 = jarArchiveEntry35.isStreamContiguous();
        long long38 = jarArchiveEntry35.getDataOffset();
        boolean boolean39 = jarArchiveEntry35.isUnixSymlink();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS40 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger41 = x000A_NTFS40.getModifyTime();
        java.util.Date date42 = x000A_NTFS40.getCreateJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry45 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path46 = tarArchiveEntry45.getPath();
        java.nio.file.attribute.FileTime fileTime47 = null;
        tarArchiveEntry45.setCreationTime(fileTime47);
        int int49 = tarArchiveEntry45.getUserId();
        java.util.Date date50 = tarArchiveEntry45.getModTime();
        x000A_NTFS40.setCreateJavaTime(date50);
        java.util.Date date52 = x000A_NTFS40.getCreateJavaTime();
        jarArchiveEntry35.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) x000A_NTFS40);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger54 = x000A_NTFS40.getModifyTime();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry57 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date58 = cpioArchiveEntry57.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong59 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date58);
        byte[] byteArray60 = zipLong59.getBytes();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField61 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger27, zipEightByteInteger31, zipEightByteInteger54, zipLong59);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS62 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger63 = x000A_NTFS62.getModifyTime();
        java.lang.String str64 = zipEightByteInteger63.toString();
        byte[] byteArray65 = zipEightByteInteger63.getBytes();
        byte[] byteArray66 = zipEightByteInteger63.getBytes();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField67 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger31, zipEightByteInteger63);
        x000A_NTFS0.setAccessTime(zipEightByteInteger31);
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipShort11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipEightByteInteger13);
        org.junit.Assert.assertNotNull(zipShort14);
        org.junit.Assert.assertNotNull(zipEightByteInteger15);
        org.junit.Assert.assertNotNull(zipEightByteInteger17);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger27);
        org.junit.Assert.assertNotNull(zipEightByteInteger29);
        org.junit.Assert.assertNull(date30);
        org.junit.Assert.assertNotNull(zipEightByteInteger31);
        org.junit.Assert.assertTrue("'" + sevenZMethod32 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64 + "'", sevenZMethod32.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(unparseableExtraFieldData36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger41);
        org.junit.Assert.assertNull(date42);
        org.junit.Assert.assertNull(path46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(date50);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Mon Jun 19 23:20:51 CEST 2023");
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Mon Jun 19 23:20:51 CEST 2023");
        org.junit.Assert.assertNotNull(zipEightByteInteger54);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(zipLong59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[0, 0, 33, 0]");
        org.junit.Assert.assertNotNull(zipEightByteInteger63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ZipEightByteInteger value: 0" + "'", str64, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream6 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize8 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder12 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder14 = builder12.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder16 = builder14.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters17 = builder16.build();
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters18 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize8, true, false, false, parameters17);
        int int19 = parameters17.getNiceBackReferenceLength();
        int int20 = parameters17.getMaxCandidates();
        org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream snappyCompressorOutputStream21 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream6, 18L, parameters17);
        snappyCompressorOutputStream21.write((int) (short) 8);
        snappyCompressorOutputStream21.finish();
        snappyCompressorOutputStream21.finish();
        org.junit.Assert.assertTrue("'" + blockSize8 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize8.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(parameters17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 512 + "'", int20 == 512);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer0 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap1 = packer0.properties();
        org.apache.commons.compress.compressors.FileNameUtil fileNameUtil3 = new org.apache.commons.compress.compressors.FileNameUtil((java.util.Map<java.lang.String, java.lang.String>) strMap1, ".lzma");
        java.lang.String str5 = fileNameUtil3.getUncompressedFilename("ustar\000");
        java.lang.String str7 = fileNameUtil3.getUncompressedFilename("0x000A Zip Extra Field: Modify:[2023-06-19T21:19:55.787Z]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNotNull(packer0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ustar\000" + "'", str5, "ustar\000");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0x000A Zip Extra Field: Modify:[2023-06-19T21:19:55.787Z]  Access:[null]  Create:[null] " + "'", str7, "0x000A Zip Extra Field: Modify:[2023-06-19T21:19:55.787Z]  Access:[null]  Create:[null] ");
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        int int5 = jarArchiveEntry1.getRawFlag();
        jarArchiveEntry1.setExternalAttributes((long) (byte) 51);
        java.lang.Object obj8 = jarArchiveEntry1.clone();
        jarArchiveEntry1.setSize((long) 345);
        jarArchiveEntry1.setUnixMode((int) (byte) 120);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker13 = new org.apache.commons.compress.archivers.zip.JarMarker();
        byte[] byteArray14 = jarMarker13.getLocalFileDataData();
        byte[] byteArray15 = jarMarker13.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort16 = jarMarker13.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField17 = jarArchiveEntry1.getExtraField(zipShort16);
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "bzip2");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "bzip2");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "bzip2");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(zipShort16);
        org.junit.Assert.assertNull(zipExtraField17);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong2);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG;
        long long6 = zipLong5.getValue();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong5);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray8 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel9 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray8);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel9);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel9);
        boolean boolean12 = x5455_ExtendedTimestamp0.equals((java.lang.Object) seekableByteChannel9);
        boolean boolean13 = x5455_ExtendedTimestamp0.isBit1_accessTimePresent();
        byte[] byteArray15 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) 7);
        boolean boolean17 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray15, 256);
        boolean boolean19 = org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byteArray15, 255);
        // The following exception was thrown during execution in test generation
        try {
            x5455_ExtendedTimestamp0.parseFromCentralDirectoryData(byteArray15, 0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(zipLong5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 33639248L + "'", long6 == 33639248L);
        org.junit.Assert.assertNotNull(seekableByteChannelArray8);
        org.junit.Assert.assertNotNull(seekableByteChannel9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[7, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getGroupId();
        tarArchiveEntry2.setModTime((long) 6);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray6 = zipShort5.getBytes();
        boolean boolean8 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray6, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray6, true);
        gzipCompressorOutputStream4.write(byteArray6);
        gzipCompressorOutputStream4.write((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            gzipCompressorOutputStream4.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger2 = x000A_NTFS0.getModifyTime();
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry3 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        int int4 = dumpArchiveEntry3.getNlink();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.nio.file.attribute.FileTime fileTime9 = null;
        tarArchiveEntry7.setCreationTime(fileTime9);
        java.nio.file.attribute.FileTime fileTime11 = tarArchiveEntry7.getLastModifiedTime();
        tarArchiveEntry7.setMode((int) (short) 2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path17 = tarArchiveEntry16.getPath();
        java.nio.file.attribute.FileTime fileTime18 = null;
        tarArchiveEntry16.setCreationTime(fileTime18);
        int int20 = tarArchiveEntry16.getUserId();
        java.util.Date date21 = tarArchiveEntry16.getModTime();
        tarArchiveEntry7.setModTime(date21);
        dumpArchiveEntry3.setLastModifiedDate(date21);
        x000A_NTFS0.setModifyJavaTime(date21);
        java.nio.file.attribute.FileTime fileTime25 = null;
        x000A_NTFS0.setAccessFileTime(fileTime25);
        java.util.Date date27 = x000A_NTFS0.getCreateJavaTime();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(zipEightByteInteger2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertNotNull(fileTime11);
        org.junit.Assert.assertNull(path17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Jun 19 23:20:52 CEST 2023");
        org.junit.Assert.assertNull(date27);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.attribute.FileTime fileTime3 = tarArchiveEntry2.getLastModifiedTime();
        boolean boolean4 = tarArchiveEntry2.isFile();
        java.nio.file.Path path5 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime6 = tarArchiveEntry2.getCreationTime();
        org.junit.Assert.assertNotNull(fileTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(path5);
        org.junit.Assert.assertNull(fileTime6);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        byte[] byteArray19 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0L);
        boolean boolean21 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray19, 128);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.writePreamble(byteArray19, 3, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        int int5 = jarArchiveEntry1.getRawFlag();
        jarArchiveEntry1.setExternalAttributes((long) (byte) 51);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource8 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry1.setCommentSource(commentSource8);
        jarArchiveEntry1.setTime((long) 16);
        jarArchiveEntry1.setDiskNumberStart((long) 16384);
        jarArchiveEntry1.setRawFlag(31);
        jarArchiveEntry1.setSize((long) (byte) 88);
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + commentSource8 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD + "'", commentSource8.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD));
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        sevenZArchiveEntry0.setHasLastModifiedDate(false);
        boolean boolean5 = sevenZArchiveEntry0.getHasCrc();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry8 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path9 = tarArchiveEntry8.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path13 = tarArchiveEntry12.getPath();
        java.nio.file.attribute.FileTime fileTime14 = null;
        tarArchiveEntry12.setCreationTime(fileTime14);
        java.nio.file.attribute.FileTime fileTime16 = tarArchiveEntry12.getLastModifiedTime();
        tarArchiveEntry8.setLastAccessTime(fileTime16);
        boolean boolean18 = tarArchiveEntry8.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime19 = tarArchiveEntry8.getLastModifiedTime();
        sevenZArchiveEntry0.setCreationTime(fileTime19);
        sevenZArchiveEntry0.setDirectory(true);
        sevenZArchiveEntry0.setName("org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 26128 kb. If the file is not corrupt, consider increasing the memory limit.");
        sevenZArchiveEntry0.setAccessDate((long) 9);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(path9);
        org.junit.Assert.assertNull(path13);
        org.junit.Assert.assertNotNull(fileTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(fileTime19);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm1 = x0017_StrongEncryptionHeader0.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm encryptionAlgorithm2 = x0017_StrongEncryptionHeader0.getEncryptionAlgorithm();
        byte[] byteArray4 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean6 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray4, 3);
        boolean boolean8 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray4, 3);
        boolean boolean10 = org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byteArray4, 511);
        x0017_StrongEncryptionHeader0.setLocalFileDataData(byteArray4);
        org.apache.commons.compress.archivers.tar.TarFile tarFile13 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray4, true);
        org.junit.Assert.assertNull(hashAlgorithm1);
        org.junit.Assert.assertNull(encryptionAlgorithm2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        zipArchiveOutputStream1.setMethod(0);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream14 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        byte[] byteArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.write(byteArray15, 26121, 128);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMaj((long) 'a');
        int int10 = cpioArchiveEntry6.getAlignmentBoundary();
        boolean boolean11 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        cpioArchiveEntry6.setDeviceMin((long) 26128);
        boolean boolean14 = cpioArchiveEntry6.isSocket();
        cpioArchiveEntry6.setUID(29L);
        java.lang.String str17 = cpioArchiveEntry6.getName();
        boolean boolean18 = cpioArchiveEntry6.isBlockDevice();
        long long19 = cpioArchiveEntry6.getInode();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        boolean boolean2 = asiExtraField0.isDirectory();
        asiExtraField0.setUserId(1024);
        int int5 = asiExtraField0.getUserId();
        int int6 = asiExtraField0.getGroupId();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1024 + "'", int5 == 1024);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        byte[] byteArray1 = jarMarker0.getCentralDirectoryData();
        boolean boolean3 = org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byteArray1, 0);
        // The following exception was thrown during execution in test generation
        try {
            long long5 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray1, 96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 96");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jarMarker0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField0 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField();
        unicodeCommentExtraField0.setNameCRC32((long) 12);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = unicodeCommentExtraField0.getCentralDirectoryLength();
        org.junit.Assert.assertNotNull(zipShort3);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        int int10 = tarArchiveOutputStream6.getCount();
        tarArchiveOutputStream6.setBigNumberMode(4096);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream6.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str1 = x000A_NTFS0.toString();
        java.lang.String str2 = x000A_NTFS0.toString();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger3 = x000A_NTFS0.getModifyTime();
        java.lang.String str4 = zipEightByteInteger3.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str1, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str2, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNotNull(zipEightByteInteger3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ZipEightByteInteger value: 0" + "'", str4, "ZipEightByteInteger value: 0");
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        tarArchiveEntry1.setGroupId(4096);
        java.nio.file.Path path4 = tarArchiveEntry1.getPath();
        boolean boolean5 = tarArchiveEntry1.isPaxGNU1XSparse();
        tarArchiveEntry1.setUserId((int) (short) 8);
        tarArchiveEntry1.setUserId(33639248L);
        org.junit.Assert.assertNull(path4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        java.io.InputStream inputStream0 = null;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy5 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream2, pack200Strategy5, strMap6);
        int int8 = pack200CompressorInputStream7.read();
        java.io.InputStream inputStream9 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream9);
        zipArchiveInputStream10.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream13 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream10);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy14 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream15 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream13, pack200Strategy14);
        java.nio.channels.SeekableByteChannel seekableByteChannel16 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream17 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel16);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream19 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream17, strMap18);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream20 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream19);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer21 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap22 = packer21.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream20, (java.util.Map<java.lang.String, java.lang.String>) strMap22);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream24 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream7, pack200Strategy14, (java.util.Map<java.lang.String, java.lang.String>) strMap22);
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters25 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters25.setWithZlibHeader(false);
        int int28 = deflateParameters25.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream29 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) pack200CompressorInputStream7, deflateParameters25);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream30 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream(inputStream0, deflateParameters25);
        org.junit.Assert.assertNotNull(pack200Strategy5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 80 + "'", int8 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy14);
        org.junit.Assert.assertNotNull(packer21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("ustar\000");
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long2 = jarArchiveEntry1.getDataOffset();
        int int3 = jarArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource4 = jarArchiveEntry1.getNameSource();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + nameSource4 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.NAME + "'", nameSource4.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.NAME));
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        int int1 = org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt((byte) 103);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 103 + "'", int1 == 103);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField0 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray1 = unrecognizedExtraField0.getLocalFileDataData();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream3, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy6 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream8 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream3, pack200Strategy6, strMap7);
        long long9 = pack200CompressorInputStream8.getBytesRead();
        long long11 = pack200CompressorInputStream8.skip(1687209505L);
        int int12 = pack200CompressorInputStream8.available();
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean16 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray14, 3);
        boolean boolean18 = org.apache.commons.compress.compressors.xz.XZUtils.matches(byteArray14, (int) (short) 2);
        int int19 = pack200CompressorInputStream8.read(byteArray14);
        unrecognizedExtraField0.setCentralDirectoryData(byteArray14);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry22 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData23 = jarArchiveEntry22.getUnparseableExtraFieldData();
        jarArchiveEntry22.setCompressedSize((long) 64);
        int int26 = jarArchiveEntry22.getRawFlag();
        jarArchiveEntry22.setExternalAttributes((long) (byte) 51);
        byte[] byteArray30 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean32 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray30, 3);
        boolean boolean34 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray30, 3);
        jarArchiveEntry22.setExtra(byteArray30);
        unrecognizedExtraField0.setLocalFileDataData(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray30, 8, 80);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(byteArray1);
        org.junit.Assert.assertNotNull(pack200Strategy6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 29L + "'", long11 == 29L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(unparseableExtraFieldData23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = zip64ExtendedInformationExtraField0.getRelativeHeaderOffset();
        byte[] byteArray2 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        org.junit.Assert.assertNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.lang.String str2 = zipEightByteInteger1.toString();
        byte[] byteArray3 = zipEightByteInteger1.getBytes();
        java.lang.String str4 = zipEightByteInteger1.toString();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ZipEightByteInteger value: 0" + "'", str2, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ZipEightByteInteger value: 0" + "'", str4, "ZipEightByteInteger value: 0");
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6, "deflate64");
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize11 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters15 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize11, true, true, false);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters16 = null;
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters17 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize11, parameters16);
        java.lang.String str18 = parameters17.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream19 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream((java.io.OutputStream) tarArchiveOutputStream6, parameters17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + blockSize11 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize11.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "LZ4 Parameters with BlockSize M1, withContentChecksum true, withBlockChecksum false, withBlockDependency false" + "'", str18, "LZ4 Parameters with BlockSize M1, withContentChecksum true, withBlockChecksum false, withBlockDependency false");
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        org.apache.commons.compress.archivers.StreamingNotSupportedException streamingNotSupportedException2 = new org.apache.commons.compress.archivers.StreamingNotSupportedException("lzma");
        java.lang.String str3 = streamingNotSupportedException2.getFormat();
        java.lang.String str4 = streamingNotSupportedException2.getFormat();
        java.lang.String str5 = streamingNotSupportedException2.getFormat();
        org.apache.commons.compress.archivers.dump.DumpArchiveException dumpArchiveException6 = new org.apache.commons.compress.archivers.dump.DumpArchiveException("true", (java.lang.Throwable) streamingNotSupportedException2);
        java.lang.String str7 = streamingNotSupportedException2.getFormat();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "lzma" + "'", str3, "lzma");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "lzma" + "'", str4, "lzma");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "lzma" + "'", str5, "lzma");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "lzma" + "'", str7, "lzma");
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer5 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap6 = packer5.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream4, (java.util.Map<java.lang.String, java.lang.String>) strMap6);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField8 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField9 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean15 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray13, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior17 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray13, false, extraFieldParsingBehavior17);
        boolean boolean20 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray13, 32768);
        unrecognizedExtraField9.setLocalFileDataData(byteArray13);
        unrecognizedExtraField8.setCentralDirectoryData(byteArray13);
        pack200CompressorOutputStream7.write(byteArray13);
        pack200CompressorOutputStream7.write(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder26 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder28 = builder26.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder30 = builder28.withLazyThreshold(6);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder32 = builder28.withMaxLiteralLength(263);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder34 = builder32.withLazyThreshold(2);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters35 = builder34.build();
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream blockLZ4CompressorOutputStream36 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream7, parameters35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream38 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) blockLZ4CompressorOutputStream36, "0\000");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 0?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(packer5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(parameters35);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        long long5 = zipArchiveInputStream1.skip((long) 255);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream6 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream snappyCompressorInputStream7 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Premature end of stream reading size");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry0 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        int int1 = arjArchiveEntry0.getHostOs();
        int int2 = arjArchiveEntry0.getUnixMode();
        boolean boolean3 = arjArchiveEntry0.isHostOsUnix();
        java.nio.file.Path path4 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier5 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path4);
        boolean boolean6 = arjArchiveEntry0.equals((java.lang.Object) path4);
        long long7 = arjArchiveEntry0.getSize();
        long long8 = arjArchiveEntry0.getSize();
        java.lang.String str9 = arjArchiveEntry0.getName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setCrcValue(1687209545L);
        sevenZArchiveEntry0.setAccessDate(16L);
        sevenZArchiveEntry0.setHasLastModifiedDate(true);
        sevenZArchiveEntry0.setCrc(476);
        boolean boolean9 = sevenZArchiveEntry0.getHasAccessDate();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:19:20.457Z] ");
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile4 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, "org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 11 kb. If the file is not corrupt, consider increasing the memory limit.");
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData0 = new org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData();
        byte[] byteArray1 = unparseableExtraFieldData0.getLocalFileDataData();
        byte[] byteArray2 = unparseableExtraFieldData0.getLocalFileDataData();
        byte[] byteArray4 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean6 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray4, 3);
        boolean boolean8 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray4, (int) (byte) 53);
        org.apache.commons.compress.archivers.tar.TarFile tarFile10 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray4, false);
        // The following exception was thrown during execution in test generation
        try {
            unparseableExtraFieldData0.parseFromCentralDirectoryData(byteArray4, 65535, 8192);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(byteArray1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        deflateCompressorOutputStream16.flush();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream18 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) deflateCompressorOutputStream16);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream19 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) arArchiveOutputStream18);
        arArchiveOutputStream18.setLongFileMode(2147483647);
        // The following exception was thrown during execution in test generation
        try {
            arArchiveOutputStream18.close();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream6 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize8 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder12 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder14 = builder12.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder16 = builder14.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters17 = builder16.build();
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters18 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize8, true, false, false, parameters17);
        int int19 = parameters17.getNiceBackReferenceLength();
        int int20 = parameters17.getMaxCandidates();
        org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream snappyCompressorOutputStream21 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream6, 18L, parameters17);
        snappyCompressorOutputStream21.write((int) (short) 8);
        // The following exception was thrown during execution in test generation
        try {
            snappyCompressorOutputStream21.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + blockSize8 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize8.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(parameters17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 512 + "'", int20 == 512);
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry2 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField3 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry2.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField3);
        byte[] byteArray5 = jarArchiveEntry2.getCentralDirectoryExtra();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes((long) 9, byteArray5, 29, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 9=11 will not fit in octal number buffer of length -2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[30, -95, 2, 0, 0, 0]");
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.compressors.snappy.FramedSnappyDialect framedSnappyDialect2 = org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE;
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream3 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream(inputStream0, framedSnappyDialect2);
        int int4 = framedSnappyCompressorInputStream3.available();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) framedSnappyCompressorInputStream3, 6, "pack.segment.limit");
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream9 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry10 = tarArchiveInputStream7.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + framedSnappyDialect2 + "' != '" + org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE + "'", framedSnappyDialect2.equals(org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        java.util.Date date7 = tarArchiveEntry2.getModTime();
        int int8 = tarArchiveEntry2.getUserId();
        int int9 = tarArchiveEntry2.getMode();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp10 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = x5455_ExtendedTimestamp10.getLocalFileDataLength();
        java.nio.file.attribute.FileTime fileTime12 = null;
        x5455_ExtendedTimestamp10.setModifyFileTime(fileTime12);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry15 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData16 = jarArchiveEntry15.getUnparseableExtraFieldData();
        jarArchiveEntry15.setCompressedSize((long) 64);
        int int19 = jarArchiveEntry15.getRawFlag();
        jarArchiveEntry15.setExternalAttributes((long) (byte) 51);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource22 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry15.setCommentSource(commentSource22);
        jarArchiveEntry15.setTime((long) 16);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry28 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path29 = tarArchiveEntry28.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry32 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path33 = tarArchiveEntry32.getPath();
        java.nio.file.attribute.FileTime fileTime34 = null;
        tarArchiveEntry32.setCreationTime(fileTime34);
        java.nio.file.attribute.FileTime fileTime36 = tarArchiveEntry32.getLastModifiedTime();
        tarArchiveEntry28.setLastAccessTime(fileTime36);
        boolean boolean38 = tarArchiveEntry28.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime39 = tarArchiveEntry28.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry40 = jarArchiveEntry15.setLastAccessTime(fileTime39);
        java.nio.file.attribute.FileTime fileTime41 = jarArchiveEntry15.getLastAccessTime();
        x5455_ExtendedTimestamp10.setModifyFileTime(fileTime41);
        tarArchiveEntry2.setCreationTime(fileTime41);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Jun 19 23:20:53 CEST 2023");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 33188 + "'", int9 == 33188);
        org.junit.Assert.assertNotNull(zipShort11);
        org.junit.Assert.assertNull(unparseableExtraFieldData16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + commentSource22 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD + "'", commentSource22.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNull(path29);
        org.junit.Assert.assertNull(path33);
        org.junit.Assert.assertNotNull(fileTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(fileTime39);
        org.junit.Assert.assertNotNull(zipEntry40);
        org.junit.Assert.assertEquals(zipEntry40.toString(), "bzip2");
        org.junit.Assert.assertNotNull(fileTime41);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField2);
        byte[] byteArray4 = jarArchiveEntry1.getCentralDirectoryExtra();
        java.nio.file.attribute.FileTime fileTime5 = jarArchiveEntry1.getCreationTime();
        int int6 = jarArchiveEntry1.getRawFlag();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertNull(fileTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        java.io.File file0 = null;
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        char[] charArray5 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile6 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2, charArray5);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder7 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions8 = builder7.build();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder10 = builder7.withMaxMemoryLimitInKb(4096);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions11 = builder7.build();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions12 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile13 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(file0, charArray5, sevenZFileOptions12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(sevenZFileOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(sevenZFileOptions11);
        org.junit.Assert.assertNotNull(sevenZFileOptions12);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) '#');
        org.apache.commons.compress.archivers.tar.TarFile tarFile3 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray1, true);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveEntry> tarArchiveEntryList4 = tarFile3.getEntries();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[35, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(tarArchiveEntryList4);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream7 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream9 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream((java.io.InputStream) arArchiveInputStream7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current ar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(tarArchiveEntry4);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        zipArchiveOutputStream1.flush();
        java.lang.String str5 = zipArchiveOutputStream1.getEncoding();
        java.lang.String str6 = zipArchiveOutputStream1.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream1, (short) (byte) 2, 80);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream9.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTF8" + "'", str5, "UTF8");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        java.nio.file.Path path0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream1 = org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(path0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        int int5 = jarArchiveEntry1.getRawFlag();
        long long6 = jarArchiveEntry1.getDiskNumberStart();
        java.util.Date date7 = jarArchiveEntry1.getLastModifiedDate();
        java.lang.String str8 = jarArchiveEntry1.getComment();
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit0 = new org.apache.commons.compress.archivers.zip.GeneralPurposeBit();
        generalPurposeBit0.useEncryption(false);
        boolean boolean3 = generalPurposeBit0.usesEncryption();
        boolean boolean4 = generalPurposeBit0.usesStrongEncryption();
        generalPurposeBit0.useEncryption(true);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray8 = zipShort7.getBytes();
        boolean boolean10 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray8, (int) 'a');
        org.apache.commons.compress.archivers.tar.TarFile tarFile11 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray8);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker13 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        byte[] byteArray14 = jarMarker13.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode16 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray14, false, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode16);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray8, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode16);
        // The following exception was thrown during execution in test generation
        try {
            generalPurposeBit0.encode(byteArray8, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jarMarker13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode16 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT + "'", extraFieldParsingMode16.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException unsupportedCompressionAlgorithmException2 = new org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException("apks");
        org.apache.commons.compress.compressors.CompressorException compressorException3 = new org.apache.commons.compress.compressors.CompressorException("error", (java.lang.Throwable) unsupportedCompressionAlgorithmException2);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference backReference2 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference(0, (int) (short) 100);
        int int3 = backReference2.getOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature5 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException6 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature5);
        boolean boolean7 = jarArchiveEntry1.equals((java.lang.Object) unsupportedZipFeatureException6);
        java.lang.Throwable[] throwableArray8 = unsupportedZipFeatureException6.getSuppressed();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = unsupportedZipFeatureException6.getEntry();
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature10 = unsupportedZipFeatureException6.getFeature();
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertNotNull(feature5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNull(zipArchiveEntry9);
        org.junit.Assert.assertNotNull(feature10);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        java.nio.file.attribute.FileTime fileTime10 = tarArchiveEntry6.getLastModifiedTime();
        tarArchiveEntry2.setLastAccessTime(fileTime10);
        long long12 = tarArchiveEntry2.getDataOffset();
        tarArchiveEntry2.clearExtraPaxHeaders();
        long long14 = tarArchiveEntry2.getSize();
        int int15 = tarArchiveEntry2.getMode();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 33188 + "'", int15 == 33188);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm encryptionAlgorithm1 = org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.getAlgorithmByCode(32);
        org.junit.Assert.assertNull(encryptionAlgorithm1);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker1 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        byte[] byteArray2 = jarMarker1.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(1687209613L, byteArray2, 49152, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 1687209613=14444143215 will not fit in octal number buffer of length 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jarMarker1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField2);
        java.nio.file.attribute.FileTime fileTime4 = jarArchiveEntry1.getLastAccessTime();
        java.nio.file.attribute.FileTime fileTime5 = jarArchiveEntry1.getLastAccessTime();
        int int6 = jarArchiveEntry1.getMethod();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path10 = tarArchiveEntry9.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path14 = tarArchiveEntry13.getPath();
        java.nio.file.attribute.FileTime fileTime15 = null;
        tarArchiveEntry13.setCreationTime(fileTime15);
        java.nio.file.attribute.FileTime fileTime17 = tarArchiveEntry13.getLastModifiedTime();
        tarArchiveEntry9.setLastAccessTime(fileTime17);
        long long19 = tarArchiveEntry9.getDataOffset();
        tarArchiveEntry9.clearExtraPaxHeaders();
        boolean boolean21 = tarArchiveEntry9.isExtended();
        int int22 = tarArchiveEntry9.getMode();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry24 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData25 = jarArchiveEntry24.getUnparseableExtraFieldData();
        jarArchiveEntry24.setCompressedSize((long) 64);
        int int28 = jarArchiveEntry24.getRawFlag();
        jarArchiveEntry24.setExternalAttributes((long) (byte) 51);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource31 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry24.setCommentSource(commentSource31);
        jarArchiveEntry24.setTime((long) 16);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry37 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path38 = tarArchiveEntry37.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry41 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path42 = tarArchiveEntry41.getPath();
        java.nio.file.attribute.FileTime fileTime43 = null;
        tarArchiveEntry41.setCreationTime(fileTime43);
        java.nio.file.attribute.FileTime fileTime45 = tarArchiveEntry41.getLastModifiedTime();
        tarArchiveEntry37.setLastAccessTime(fileTime45);
        boolean boolean47 = tarArchiveEntry37.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime48 = tarArchiveEntry37.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry49 = jarArchiveEntry24.setLastAccessTime(fileTime48);
        java.nio.file.attribute.FileTime fileTime50 = jarArchiveEntry24.getLastAccessTime();
        tarArchiveEntry9.setStatusChangeTime(fileTime50);
        java.util.zip.ZipEntry zipEntry52 = jarArchiveEntry1.setLastAccessTime(fileTime50);
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertNull(fileTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(path10);
        org.junit.Assert.assertNull(path14);
        org.junit.Assert.assertNotNull(fileTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 33188 + "'", int22 == 33188);
        org.junit.Assert.assertNull(unparseableExtraFieldData25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + commentSource31 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD + "'", commentSource31.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNull(path38);
        org.junit.Assert.assertNull(path42);
        org.junit.Assert.assertNotNull(fileTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fileTime48);
        org.junit.Assert.assertNotNull(zipEntry49);
        org.junit.Assert.assertEquals(zipEntry49.toString(), "bzip2");
        org.junit.Assert.assertNotNull(fileTime50);
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "bzip2");
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField2);
        java.nio.file.attribute.FileTime fileTime4 = jarArchiveEntry1.getLastAccessTime();
        java.nio.file.attribute.FileTime fileTime5 = jarArchiveEntry1.getLastAccessTime();
        jarArchiveEntry1.setCrc(7L);
        jarArchiveEntry1.setExternalAttributes((long) (byte) 76);
        long long10 = jarArchiveEntry1.getDataOffset();
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertNull(fileTime5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray2 = zipLong1.getBytes();
        boolean boolean4 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray2, 32768);
        boolean boolean6 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray2, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode8 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray2, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode8);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock12 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray2, 488, (int) (short) 2);
        java.lang.String str13 = literalBlock12.toString();
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType blockType14 = literalBlock12.getType();
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType blockType15 = literalBlock12.getType();
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType blockType16 = literalBlock12.getType();
        int int17 = literalBlock12.getLength();
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType blockType18 = literalBlock12.getType();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode8 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode8.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LiteralBlock starting at 488 with length 2" + "'", str13, "LiteralBlock starting at 488 with length 2");
        org.junit.Assert.assertTrue("'" + blockType14 + "' != '" + org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.LITERAL + "'", blockType14.equals(org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.LITERAL));
        org.junit.Assert.assertTrue("'" + blockType15 + "' != '" + org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.LITERAL + "'", blockType15.equals(org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.LITERAL));
        org.junit.Assert.assertTrue("'" + blockType16 + "' != '" + org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.LITERAL + "'", blockType16.equals(org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.LITERAL));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + blockType18 + "' != '" + org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.LITERAL + "'", blockType18.equals(org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.LITERAL));
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        int int1 = dumpArchiveEntry0.getNlink();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path5 = tarArchiveEntry4.getPath();
        java.nio.file.attribute.FileTime fileTime6 = null;
        tarArchiveEntry4.setCreationTime(fileTime6);
        java.nio.file.attribute.FileTime fileTime8 = tarArchiveEntry4.getLastModifiedTime();
        tarArchiveEntry4.setMode((int) (short) 2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path14 = tarArchiveEntry13.getPath();
        java.nio.file.attribute.FileTime fileTime15 = null;
        tarArchiveEntry13.setCreationTime(fileTime15);
        int int17 = tarArchiveEntry13.getUserId();
        java.util.Date date18 = tarArchiveEntry13.getModTime();
        tarArchiveEntry4.setModTime(date18);
        dumpArchiveEntry0.setLastModifiedDate(date18);
        boolean boolean21 = dumpArchiveEntry0.isFile();
        dumpArchiveEntry0.setVolume((int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(path5);
        org.junit.Assert.assertNotNull(fileTime8);
        org.junit.Assert.assertNull(path14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Mon Jun 19 23:20:55 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, (short) (byte) -1, 29127, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:19:20.457Z] .xz");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField0 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = unicodeCommentExtraField0.getLocalFileDataLength();
        byte[] byteArray2 = unicodeCommentExtraField0.getUnicodeName();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = unicodeCommentExtraField0.getHeaderId();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(zipShort3);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer5 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap6 = packer5.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream4, (java.util.Map<java.lang.String, java.lang.String>) strMap6);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField8 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField9 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean15 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray13, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior17 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray13, false, extraFieldParsingBehavior17);
        boolean boolean20 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray13, 32768);
        unrecognizedExtraField9.setLocalFileDataData(byteArray13);
        unrecognizedExtraField8.setCentralDirectoryData(byteArray13);
        pack200CompressorOutputStream7.write(byteArray13);
        pack200CompressorOutputStream7.write(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream28 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream7, (int) (byte) 83, 256);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Block size must be a multiple of 512 bytes. Attempt to use set size of 83");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(packer5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.lang.Object obj1 = x5455_ExtendedTimestamp0.clone();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry3 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData4 = jarArchiveEntry3.getUnparseableExtraFieldData();
        jarArchiveEntry3.setCompressedSize((long) 64);
        int int7 = jarArchiveEntry3.getRawFlag();
        jarArchiveEntry3.setExternalAttributes((long) (byte) 51);
        java.lang.Object obj10 = jarArchiveEntry3.clone();
        jarArchiveEntry3.setSize((long) 345);
        java.util.Date date13 = jarArchiveEntry3.getLastModifiedDate();
        x5455_ExtendedTimestamp0.setCreateJavaTime(date13);
        long long15 = org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(date13);
        long long16 = org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(date13);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertNull(unparseableExtraFieldData4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "bzip2");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "bzip2");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "bzip2");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 116444735999990000L + "'", long15 == 116444735999990000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 116444735999990000L + "'", long16 == 116444735999990000L);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        org.apache.commons.compress.archivers.zip.ZipMethod zipMethod0 = org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_1;
        int int1 = zipMethod0.getCode();
        org.junit.Assert.assertTrue("'" + zipMethod0 + "' != '" + org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_1 + "'", zipMethod0.equals(org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_1));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        java.lang.String str1 = org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(".bz2.lzma");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + ".bz2.lzma.lzma" + "'", str1, ".bz2.lzma.lzma");
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong2);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = zip64ExtendedInformationExtraField0.getDiskStartNumber();
        byte[] byteArray6 = zipLong5.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byteArray6, (int) (byte) 120, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 120");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(zipLong5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1, -1]");
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong2);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG;
        long long6 = zipLong5.getValue();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong5);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray8 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel9 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray8);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel9);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel9);
        boolean boolean12 = x5455_ExtendedTimestamp0.equals((java.lang.Object) seekableByteChannel9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile14 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel9, "ZipEightByteInteger value: 0");
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(zipLong5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 33639248L + "'", long6 == 33639248L);
        org.junit.Assert.assertNotNull(seekableByteChannelArray8);
        org.junit.Assert.assertNotNull(seekableByteChannel9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker7 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        byte[] byteArray8 = jarMarker7.getLocalFileDataData();
        byte[] byteArray9 = jarMarker7.getCentralDirectoryData();
        int int10 = pack200CompressorInputStream6.read(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = org.apache.commons.compress.compressors.xz.XZUtils.matches(byteArray9, 26625);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertNotNull(jarMarker7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        gzipCompressorOutputStream4.flush();
        gzipCompressorOutputStream4.write(464);
        gzipCompressorOutputStream4.finish();
        // The following exception was thrown during execution in test generation
        try {
            gzipCompressorOutputStream4.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        long long2 = zipArchiveOutputStream1.getBytesWritten();
        zipArchiveOutputStream1.setEncoding("deflate64");
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        zipArchiveOutputStream1.setMethod(263);
        zipArchiveOutputStream1.setUseLanguageEncodingFlag(true);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream10);
        zipArchiveInputStream11.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream14 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream11);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy15 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream16 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream14, pack200Strategy15);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField17 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean23 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray21, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior25 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray21, false, extraFieldParsingBehavior25);
        boolean boolean28 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray21, 32768);
        unrecognizedExtraField17.setLocalFileDataData(byteArray21);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort30 = unrecognizedExtraField17.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort31 = unrecognizedExtraField17.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS32 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger33 = x000A_NTFS32.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel34 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream35 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream37 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream35, strMap36);
        byte[] byteArray38 = new byte[] {};
        pack200CompressorOutputStream37.write(byteArray38);
        x000A_NTFS32.parseFromCentralDirectoryData(byteArray38, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort43 = x000A_NTFS32.getHeaderId();
        byte[] byteArray44 = x000A_NTFS32.getLocalFileDataData();
        unrecognizedExtraField17.setLocalFileDataData(byteArray44);
        int int48 = jarArchiveInputStream14.read(byteArray44, 76, (int) (byte) 120);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.write(byteArray44, (int) (byte) 77, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(pack200Strategy15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zipShort30);
        org.junit.Assert.assertNotNull(zipShort31);
        org.junit.Assert.assertNotNull(zipEightByteInteger33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(zipShort43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        org.apache.commons.compress.compressors.CompressorException compressorException1 = new org.apache.commons.compress.compressors.CompressorException("pack.method.attribute.");
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        java.lang.String str4 = jarArchiveOutputStream3.getEncoding();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry6 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField7 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry6.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField7);
        byte[] byteArray9 = jarArchiveEntry6.getCentralDirectoryExtra();
        long long10 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray9);
        long long11 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveOutputStream3.writePreamble(byteArray9, (int) (byte) 10, 148);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF8" + "'", str4, "UTF8");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 172318L + "'", long10 == 172318L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 193L + "'", long11 == 193L);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        long long7 = tarArchiveEntry2.getRealSize();
        boolean boolean8 = tarArchiveEntry2.isBlockDevice();
        java.lang.String str9 = tarArchiveEntry2.getGroupName();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = tarArchiveEntry2.getExtraPaxHeaders();
        java.nio.file.attribute.FileTime fileTime11 = tarArchiveEntry2.getCreationTime();
        tarArchiveEntry2.setNames("pack.field.attribute.", "pass");
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(fileTime11);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        long long7 = tarArchiveEntry2.getRealSize();
        java.util.Date date8 = tarArchiveEntry2.getLastModifiedDate();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path12 = tarArchiveEntry11.getPath();
        java.nio.file.attribute.FileTime fileTime13 = null;
        tarArchiveEntry11.setCreationTime(fileTime13);
        int int15 = tarArchiveEntry11.getUserId();
        java.util.Date date16 = tarArchiveEntry11.getModTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry19 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path20 = tarArchiveEntry19.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path24 = tarArchiveEntry23.getPath();
        java.nio.file.attribute.FileTime fileTime25 = null;
        tarArchiveEntry23.setCreationTime(fileTime25);
        java.nio.file.attribute.FileTime fileTime27 = tarArchiveEntry23.getLastModifiedTime();
        tarArchiveEntry19.setLastAccessTime(fileTime27);
        tarArchiveEntry11.setModTime(fileTime27);
        boolean boolean30 = tarArchiveEntry2.equals(tarArchiveEntry11);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS31 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger32 = x000A_NTFS31.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel33 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream34 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream36 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream34, strMap35);
        byte[] byteArray37 = new byte[] {};
        pack200CompressorOutputStream36.write(byteArray37);
        x000A_NTFS31.parseFromCentralDirectoryData(byteArray37, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger42 = x000A_NTFS31.getAccessTime();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry45 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date46 = cpioArchiveEntry45.getLastModifiedDate();
        x000A_NTFS31.setModifyJavaTime(date46);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry50 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path51 = tarArchiveEntry50.getPath();
        java.lang.String str52 = tarArchiveEntry50.getName();
        boolean boolean53 = tarArchiveEntry50.isFile();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp54 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong55 = x5455_ExtendedTimestamp54.getAccessTime();
        byte[] byteArray56 = x5455_ExtendedTimestamp54.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry59 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path60 = tarArchiveEntry59.getPath();
        java.nio.file.attribute.FileTime fileTime61 = null;
        tarArchiveEntry59.setCreationTime(fileTime61);
        java.nio.file.attribute.FileTime fileTime63 = tarArchiveEntry59.getLastModifiedTime();
        x5455_ExtendedTimestamp54.setAccessFileTime(fileTime63);
        tarArchiveEntry50.setLastModifiedTime(fileTime63);
        x000A_NTFS31.setModifyFileTime(fileTime63);
        tarArchiveEntry2.setLastAccessTime(fileTime63);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Jun 19 23:20:55 CEST 2023");
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Jun 19 23:20:55 CEST 2023");
        org.junit.Assert.assertNull(path20);
        org.junit.Assert.assertNull(path24);
        org.junit.Assert.assertNotNull(fileTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(zipEightByteInteger32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger42);
        org.junit.Assert.assertNotNull(date46);
        org.junit.Assert.assertEquals(date46.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNull(path51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "deflate64" + "'", str52, "deflate64");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(zipLong55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[0]");
        org.junit.Assert.assertNull(path60);
        org.junit.Assert.assertNotNull(fileTime63);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        zipArchiveOutputStream2.flush();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream snappyCompressorOutputStream7 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (long) (byte) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        org.apache.commons.compress.archivers.tar.TarArchiveStructSparse tarArchiveStructSparse2 = new org.apache.commons.compress.archivers.tar.TarArchiveStructSparse(0L, (long) 476);
        long long3 = tarArchiveStructSparse2.getOffset();
        long long4 = tarArchiveStructSparse2.getNumbytes();
        long long5 = tarArchiveStructSparse2.getNumbytes();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 476L + "'", long4 == 476L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 476L + "'", long5 == 476L);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream4, "snappy-framed");
        tarArchiveOutputStream7.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream7, "deflate64");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry13 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField14 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry13.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField14);
        java.nio.file.attribute.FileTime fileTime16 = jarArchiveEntry13.getLastAccessTime();
        java.nio.file.attribute.FileTime fileTime17 = jarArchiveEntry13.getLastAccessTime();
        long long18 = jarArchiveEntry13.getDataOffset();
        boolean boolean19 = tarArchiveOutputStream7.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry13);
        java.nio.file.Path path20 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create((org.apache.commons.compress.archivers.ArchiveOutputStream) tarArchiveOutputStream7, path20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime16);
        org.junit.Assert.assertNull(fileTime17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream1 = null;
        java.nio.file.Path path2 = null;
        java.nio.file.FileVisitOption[] fileVisitOptionArray3 = new java.nio.file.FileVisitOption[] {};
        java.util.EnumSet<java.nio.file.FileVisitOption> fileVisitOptionSet5 = java.util.EnumSet.noneOf(java.nio.file.FileVisitOption.class);
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.file.FileVisitOption>) fileVisitOptionSet5, fileVisitOptionArray3);
        java.nio.file.LinkOption[] linkOptionArray7 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create(archiveOutputStream1, path2, fileVisitOptionSet5, linkOptionArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileVisitOptionArray3);
        org.junit.Assert.assertNotNull(fileVisitOptionSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(linkOptionArray7);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField0 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = unrecognizedExtraField0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField2 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(zipShort1);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipExtraField2);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        java.lang.Object obj1 = null;
        boolean boolean2 = x7875_NewUnix0.equals(obj1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID;
        boolean boolean4 = x7875_NewUnix0.equals((java.lang.Object) zipShort3);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters0.setDeflateStrategy((int) (short) 3);
        gzipParameters0.setBufferSize((int) (byte) 10);
        gzipParameters0.setBufferSize(36864);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        long long7 = tarArchiveEntry2.getRealSize();
        boolean boolean8 = tarArchiveEntry2.isBlockDevice();
        tarArchiveEntry2.setMode(10);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS1 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str2 = x000A_NTFS1.toString();
        java.lang.String str3 = x000A_NTFS1.toString();
        java.util.Date date4 = x000A_NTFS1.getModifyJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.nio.file.attribute.FileTime fileTime9 = null;
        tarArchiveEntry7.setCreationTime(fileTime9);
        java.nio.file.attribute.FileTime fileTime11 = tarArchiveEntry7.getLastModifiedTime();
        tarArchiveEntry7.setMode((int) (short) 2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path17 = tarArchiveEntry16.getPath();
        java.nio.file.attribute.FileTime fileTime18 = null;
        tarArchiveEntry16.setCreationTime(fileTime18);
        int int20 = tarArchiveEntry16.getUserId();
        java.util.Date date21 = tarArchiveEntry16.getModTime();
        tarArchiveEntry7.setModTime(date21);
        x000A_NTFS1.setCreateJavaTime(date21);
        sevenZArchiveEntry0.setLastModifiedDate(date21);
        boolean boolean25 = sevenZArchiveEntry0.getHasCrc();
        java.lang.String str26 = sevenZArchiveEntry0.getName();
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry27 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS28 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str29 = x000A_NTFS28.toString();
        java.lang.String str30 = x000A_NTFS28.toString();
        java.util.Date date31 = x000A_NTFS28.getModifyJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry34 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path35 = tarArchiveEntry34.getPath();
        java.nio.file.attribute.FileTime fileTime36 = null;
        tarArchiveEntry34.setCreationTime(fileTime36);
        java.nio.file.attribute.FileTime fileTime38 = tarArchiveEntry34.getLastModifiedTime();
        tarArchiveEntry34.setMode((int) (short) 2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry43 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path44 = tarArchiveEntry43.getPath();
        java.nio.file.attribute.FileTime fileTime45 = null;
        tarArchiveEntry43.setCreationTime(fileTime45);
        int int47 = tarArchiveEntry43.getUserId();
        java.util.Date date48 = tarArchiveEntry43.getModTime();
        tarArchiveEntry34.setModTime(date48);
        x000A_NTFS28.setCreateJavaTime(date48);
        sevenZArchiveEntry27.setLastModifiedDate(date48);
        java.util.Date date52 = sevenZArchiveEntry27.getLastModifiedDate();
        sevenZArchiveEntry0.setCreationDate(date52);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str2, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str3, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNull(date4);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertNotNull(fileTime11);
        org.junit.Assert.assertNull(path17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Jun 19 23:20:56 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str29, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str30, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNull(date31);
        org.junit.Assert.assertNull(path35);
        org.junit.Assert.assertNotNull(fileTime38);
        org.junit.Assert.assertNull(path44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Mon Jun 19 23:20:56 CEST 2023");
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Mon Jun 19 23:20:56 CEST 2023");
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream7 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 49, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 49");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        byte[] byteArray1 = x0017_StrongEncryptionHeader0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        byte[] byteArray3 = x0017_StrongEncryptionHeader0.getLocalFileDataData();
        org.junit.Assert.assertNull(byteArray1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNull(byteArray3);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        java.nio.channels.SeekableByteChannel seekableByteChannel4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel4);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream5, strMap6);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream8 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream7);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream7, "snappy-framed");
        tarArchiveOutputStream10.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream14 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream10, "deflate64");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry16 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField17 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry16.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField17);
        java.nio.file.attribute.FileTime fileTime19 = jarArchiveEntry16.getLastAccessTime();
        java.nio.file.attribute.FileTime fileTime20 = jarArchiveEntry16.getLastAccessTime();
        long long21 = jarArchiveEntry16.getDataOffset();
        boolean boolean22 = tarArchiveOutputStream10.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry16);
        java.util.jar.Attributes attributes23 = jarArchiveEntry16.getManifestAttributes();
        java.util.jar.Attributes attributes24 = jarArchiveEntry16.getManifestAttributes();
        // The following exception was thrown during execution in test generation
        try {
            sevenZOutputFile3.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.jar.JarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(fileTime19);
        org.junit.Assert.assertNull(fileTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(attributes23);
        org.junit.Assert.assertNull(attributes24);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator3 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier2);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry4 = null;
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier5 = null;
        // The following exception was thrown during execution in test generation
        try {
            parallelScatterZipCreator3.addArchiveEntry(zipArchiveEntry4, inputStreamSupplier5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        long long2 = x0017_StrongEncryptionHeader0.getRecordCount();
        byte[] byteArray3 = x0017_StrongEncryptionHeader0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = x0017_StrongEncryptionHeader0.getHeaderId();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm encryptionAlgorithm5 = x0017_StrongEncryptionHeader0.getEncryptionAlgorithm();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray6 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel7 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray6);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel7);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream8, (short) (byte) 1);
        org.apache.commons.compress.changes.ChangeSet changeSet11 = new org.apache.commons.compress.changes.ChangeSet();
        changeSet11.deleteDir("hi!");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry15 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField16 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry15.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField16);
        java.nio.file.attribute.FileTime fileTime18 = jarArchiveEntry15.getLastAccessTime();
        java.io.InputStream inputStream19 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream19);
        zipArchiveInputStream20.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream23 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream20);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry24 = jarArchiveInputStream23.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry25 = jarArchiveInputStream23.getNextEntry();
        changeSet11.add((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry15, (java.io.InputStream) jarArchiveInputStream23);
        boolean boolean27 = zipArchiveOutputStream8.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry15);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp28 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong30 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray31 = zipLong30.getBytes();
        x5455_ExtendedTimestamp28.setModifyTime(zipLong30);
        boolean boolean33 = x5455_ExtendedTimestamp28.isBit2_createTimePresent();
        byte[] byteArray34 = x5455_ExtendedTimestamp28.getLocalFileDataData();
        jarArchiveEntry15.setCentralDirectoryExtra(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseFileFormat(byteArray34, 263, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 263");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNull(byteArray3);
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNull(encryptionAlgorithm5);
        org.junit.Assert.assertNotNull(seekableByteChannelArray6);
        org.junit.Assert.assertNotNull(seekableByteChannel7);
        org.junit.Assert.assertNull(fileTime18);
        org.junit.Assert.assertNull(archiveEntry24);
        org.junit.Assert.assertNull(archiveEntry25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1, -1, -1, -1, -1]");
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE tYPE1 = org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + tYPE1 + "' != '" + org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN + "'", tYPE1.equals(org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN));
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        java.nio.file.attribute.FileTime fileTime10 = tarArchiveEntry6.getLastModifiedTime();
        tarArchiveEntry2.setLastAccessTime(fileTime10);
        long long12 = tarArchiveEntry2.getDataOffset();
        tarArchiveEntry2.clearExtraPaxHeaders();
        boolean boolean14 = tarArchiveEntry2.isExtended();
        tarArchiveEntry2.setUserName("zstd");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry[] tarArchiveEntryArray17 = tarArchiveEntry2.getDirectoryEntries();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(tarArchiveEntryArray17);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMaj((long) 'a');
        int int10 = cpioArchiveEntry6.getAlignmentBoundary();
        boolean boolean11 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        cpioArchiveEntry6.setDeviceMin((long) 26128);
        boolean boolean14 = cpioArchiveEntry6.isSocket();
        cpioArchiveEntry6.setUID(29L);
        cpioArchiveEntry6.setNumberOfLinks((long) (short) 100);
        long long19 = cpioArchiveEntry6.getNumberOfLinks();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException unsupportedCompressionAlgorithmException1 = new org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException("ZipLong value: 808471376");
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger0 = null;
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS1 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger2 = x000A_NTFS1.getModifyTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = x000A_NTFS1.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger4 = x000A_NTFS1.getModifyTime();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField5 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger4);
        org.junit.Assert.assertNotNull(zipEightByteInteger2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipEightByteInteger4);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        int int10 = tarArchiveOutputStream6.getCount();
        tarArchiveOutputStream6.finish();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream12 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6);
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        byte[] byteArray1 = jarMarker0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = jarMarker0.getHeaderId();
        org.junit.Assert.assertNotNull(jarMarker0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(zipShort2);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMaj((long) 'a');
        int int10 = cpioArchiveEntry6.getAlignmentBoundary();
        boolean boolean11 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        cpioArchiveEntry6.setDeviceMin((long) 26128);
        cpioArchiveEntry6.setRemoteDeviceMin((long) 26128);
        cpioArchiveEntry6.setGID((long) (byte) 120);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveEntry6.setRemoteDevice((long) (byte) 51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer0 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap1 = packer0.properties();
        java.beans.PropertyChangeListener propertyChangeListener2 = null;
        packer0.removePropertyChangeListener(propertyChangeListener2);
        java.beans.PropertyChangeListener propertyChangeListener4 = null;
        packer0.addPropertyChangeListener(propertyChangeListener4);
        java.beans.PropertyChangeListener propertyChangeListener6 = null;
        packer0.removePropertyChangeListener(propertyChangeListener6);
        org.junit.Assert.assertNotNull(packer0);
        org.junit.Assert.assertNotNull(strMap1);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 488);
        boolean boolean6 = tarArchiveInputStream5.markSupported();
        boolean boolean7 = tarArchiveInputStream5.markSupported();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream9 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream5, false);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField10 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray13 = zipLong12.getBytes();
        boolean boolean15 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray13, 32768);
        boolean boolean17 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray13, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode19 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray13, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode19);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock23 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray13, 488, (int) (short) 2);
        unicodePathExtraField10.setUnicodeName(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = tarArchiveInputStream5.read(byteArray13, 2147483647, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode19 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode19.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray20);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator3 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier2.get();
        java.util.concurrent.ExecutorService executorService5 = null;
        java.nio.file.Path path6 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier7 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path6);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator8 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService5, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier7);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore9 = defaultBackingStoreSupplier7.get();
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore10 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore11 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor12 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore11);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream13 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore10, streamCompressor12);
        long long14 = streamCompressor12.getTotalBytesWritten();
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream15 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore9, streamCompressor12);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream16 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore4, streamCompressor12);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp17 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort18 = x5455_ExtendedTimestamp17.getLocalFileDataLength();
        byte byte19 = x5455_ExtendedTimestamp17.getFlags();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong20 = x5455_ExtendedTimestamp17.getAccessTime();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS21 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger22 = x000A_NTFS21.getModifyTime();
        java.util.Date date23 = x000A_NTFS21.getCreateJavaTime();
        byte[] byteArray24 = x000A_NTFS21.getCentralDirectoryData();
        x5455_ExtendedTimestamp17.parseFromLocalFileData(byteArray24, 29, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            streamCompressor12.writeCounted(byteArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore9);
        org.junit.Assert.assertNotNull(streamCompressor12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(zipShort18);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertNull(zipLong20);
        org.junit.Assert.assertNotNull(zipEightByteInteger22);
        org.junit.Assert.assertNull(date23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize6 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder10 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder12 = builder10.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder14 = builder12.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters15 = builder14.build();
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters16 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize6, true, false, false, parameters15);
        int int17 = parameters15.getNiceBackReferenceLength();
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream18 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, parameters15);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort19 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray20 = zipShort19.getBytes();
        boolean boolean22 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray20, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray24 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray20, true);
        // The following exception was thrown during execution in test generation
        try {
            pack200CompressorOutputStream3.write(byteArray20, 26625, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + blockSize6 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize6.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(parameters15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(zipShort19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray24);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        org.apache.commons.compress.archivers.dump.InvalidFormatException invalidFormatException4 = new org.apache.commons.compress.archivers.dump.InvalidFormatException();
        org.apache.commons.compress.MemoryLimitException memoryLimitException5 = new org.apache.commons.compress.MemoryLimitException((long) 7, 26128, (java.lang.Exception) invalidFormatException4);
        org.apache.commons.compress.archivers.ArchiveException archiveException6 = new org.apache.commons.compress.archivers.ArchiveException("snappy-framed", (java.lang.Exception) memoryLimitException5);
        org.apache.commons.compress.compressors.CompressorException compressorException7 = new org.apache.commons.compress.compressors.CompressorException("0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ", (java.lang.Throwable) memoryLimitException5);
        org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException unsupportedCompressionAlgorithmException10 = new org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException("keep");
        org.apache.commons.compress.archivers.dump.DumpArchiveException dumpArchiveException11 = new org.apache.commons.compress.archivers.dump.DumpArchiveException("org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 26128 kb. If the file is not corrupt, consider increasing the memory limit.", (java.lang.Throwable) unsupportedCompressionAlgorithmException10);
        memoryLimitException5.addSuppressed((java.lang.Throwable) unsupportedCompressionAlgorithmException10);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator3 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier2.get();
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore5 = defaultBackingStoreSupplier2.get();
        java.io.InputStream inputStream6 = scatterGatherBackingStore5.getInputStream();
        java.io.InputStream inputStream7 = scatterGatherBackingStore5.getInputStream();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream9 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream(inputStream7, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream is not in the BZip2 format");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore5);
        org.junit.Assert.assertNotNull(inputStream6);
        org.junit.Assert.assertNotNull(inputStream7);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod0 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER;
        org.junit.Assert.assertTrue("'" + sevenZMethod0 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER + "'", sevenZMethod0.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER));
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        byte[] byteArray1 = jarMarker0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode3 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray1, false, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode3);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS5 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger6 = x000A_NTFS5.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream10 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream8, strMap9);
        byte[] byteArray11 = new byte[] {};
        pack200CompressorOutputStream10.write(byteArray11);
        x000A_NTFS5.parseFromCentralDirectoryData(byteArray11, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort16 = x000A_NTFS5.getHeaderId();
        byte[] byteArray17 = x000A_NTFS5.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger18 = x000A_NTFS5.getAccessTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort19 = x000A_NTFS5.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort20 = x000A_NTFS5.getLocalFileDataLength();
        java.io.InputStream inputStream21 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream22 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream21);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream22, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy25 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream27 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream22, pack200Strategy25, strMap26);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker28 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        byte[] byteArray29 = jarMarker28.getLocalFileDataData();
        byte[] byteArray30 = jarMarker28.getCentralDirectoryData();
        int int31 = pack200CompressorInputStream27.read(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField35 = extraFieldParsingMode3.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x000A_NTFS5, byteArray30, 0, 2048, false);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: Failed to parse corrupt ZIP extra field of type a");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jarMarker0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode3 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT + "'", extraFieldParsingMode3.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT));
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertNotNull(zipEightByteInteger6);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(zipShort16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipEightByteInteger18);
        org.junit.Assert.assertNotNull(zipShort19);
        org.junit.Assert.assertNotNull(zipShort20);
        org.junit.Assert.assertNotNull(pack200Strategy25);
        org.junit.Assert.assertNotNull(jarMarker28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        zipArchiveOutputStream1.flush();
        java.lang.String str5 = zipArchiveOutputStream1.getEncoding();
        zipArchiveOutputStream1.flush();
        zipArchiveOutputStream1.setUseLanguageEncodingFlag(true);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.setLevel(29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid compression level: 29");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTF8" + "'", str5, "UTF8");
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("snappy-raw");
        boolean boolean2 = jarArchiveEntry1.isStreamContiguous();
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField3 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int4 = asiExtraField3.getMode();
        boolean boolean5 = asiExtraField3.isDirectory();
        asiExtraField3.setLinkedFile("error");
        asiExtraField3.setLinkedFile("pack.effort");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort10 = asiExtraField3.getCentralDirectoryLength();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) asiExtraField3);
        byte[] byteArray12 = asiExtraField3.getLocalFileDataData();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipShort10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-25, -90, -8, 116, 0, -96, 11, 0, 0, 0, 0, 0, 0, 0, 112, 97, 99, 107, 46, 101, 102, 102, 111, 114, 116]");
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        short short4 = cpioArchiveEntry2.getFormat();
        long long5 = cpioArchiveEntry2.getGID();
        int int6 = cpioArchiveEntry2.getAlignmentBoundary();
        long long7 = cpioArchiveEntry2.getGID();
        cpioArchiveEntry2.setRemoteDeviceMin(1687209574L);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 1 + "'", short4 == (short) 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray4 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile5 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray4);
        org.apache.commons.compress.archivers.tar.TarFile tarFile6 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray7 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel8 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray7);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile9 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel8);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel8);
        char[] charArray11 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile12 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel8, charArray11);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile13 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray11);
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry16 = sevenZOutputFile13.createArchiveEntry(file14, "ZipLong value: 4294967295");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray7);
        org.junit.Assert.assertNotNull(seekableByteChannel8);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters0 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        boolean boolean1 = deflateParameters0.withZlibHeader();
        boolean boolean2 = deflateParameters0.withZlibHeader();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream3 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream2);
        long long4 = brotliCompressorInputStream3.getCompressedCount();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = brotliCompressorInputStream3.skip((long) 2048);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Brotli stream decoding failed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        long long7 = pack200CompressorInputStream6.getBytesRead();
        long long9 = pack200CompressorInputStream6.skip(1687209505L);
        boolean boolean10 = pack200CompressorInputStream6.markSupported();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) pack200CompressorInputStream6, "bzip2");
        boolean boolean13 = tarArchiveInputStream12.markSupported();
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 29L + "'", long9 == 29L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray4 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel5 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel5);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile7 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel5);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray8 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel9 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray8);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel9);
        org.apache.commons.compress.archivers.tar.TarFile tarFile11 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel9);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray12 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel13 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray12);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile14 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel13);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel13);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray16 = new java.nio.channels.SeekableByteChannel[] { seekableByteChannel1, seekableByteChannel5, seekableByteChannel9, seekableByteChannel13 };
        java.nio.channels.SeekableByteChannel seekableByteChannel17 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray16);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile18 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel17);
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod19 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2;
        sevenZOutputFile18.setContentCompression(sevenZMethod19);
        java.io.File file21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry23 = sevenZOutputFile18.createArchiveEntry(file21, "cpio.lzma");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(seekableByteChannelArray4);
        org.junit.Assert.assertNotNull(seekableByteChannel5);
        org.junit.Assert.assertNotNull(seekableByteChannelArray8);
        org.junit.Assert.assertNotNull(seekableByteChannel9);
        org.junit.Assert.assertNotNull(seekableByteChannelArray12);
        org.junit.Assert.assertNotNull(seekableByteChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannelArray16);
        org.junit.Assert.assertNotNull(seekableByteChannel17);
        org.junit.Assert.assertTrue("'" + sevenZMethod19 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2 + "'", sevenZMethod19.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2));
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        deflateCompressorOutputStream16.flush();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream18 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) deflateCompressorOutputStream16);
        arArchiveOutputStream18.setLongFileMode((int) (byte) 52);
        // The following exception was thrown during execution in test generation
        try {
            arArchiveOutputStream18.close();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray3 = jarArchiveEntry1.getExtraFields(true);
        int int4 = jarArchiveEntry1.getVersionMadeBy();
        org.junit.Assert.assertNotNull(zipExtraFieldArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = x000A_NTFS0.getAccessTime();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry14 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date15 = cpioArchiveEntry14.getLastModifiedDate();
        x000A_NTFS0.setModifyJavaTime(date15);
        java.util.Date date17 = x000A_NTFS0.getCreateJavaTime();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry20 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date21 = cpioArchiveEntry20.getLastModifiedDate();
        cpioArchiveEntry20.setRemoteDeviceMin((long) 12);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry26 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path27 = tarArchiveEntry26.getPath();
        java.nio.file.attribute.FileTime fileTime28 = null;
        tarArchiveEntry26.setCreationTime(fileTime28);
        java.nio.file.attribute.FileTime fileTime30 = tarArchiveEntry26.getLastModifiedTime();
        cpioArchiveEntry20.setTime(fileTime30);
        x000A_NTFS0.setModifyFileTime(fileTime30);
        java.lang.String str33 = x000A_NTFS0.toString();
        java.lang.String str34 = x000A_NTFS0.toString();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger11);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNull(date17);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNull(path27);
        org.junit.Assert.assertNotNull(fileTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "0x000A Zip Extra Field: Modify:[2023-06-19T21:20:58.59Z]  Access:[null]  Create:[null] " + "'", str33, "0x000A Zip Extra Field: Modify:[2023-06-19T21:20:58.59Z]  Access:[null]  Create:[null] ");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0x000A Zip Extra Field: Modify:[2023-06-19T21:20:58.59Z]  Access:[null]  Create:[null] " + "'", str34, "0x000A Zip Extra Field: Modify:[2023-06-19T21:20:58.59Z]  Access:[null]  Create:[null] ");
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile3 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        long long10 = tarArchiveEntry6.getSize();
        java.io.InputStream inputStream11 = tarFile3.getInputStream(tarArchiveEntry6);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(inputStream11);
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream lZMACompressorInputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream((java.io.InputStream) pack200CompressorInputStream12, 26625);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray15 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel16 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray15);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream17 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel16);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream19 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream17, (short) (byte) 1);
        byte[] byteArray21 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray22 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray21);
        cpioArchiveOutputStream19.write(byteArray21, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = lZMACompressorInputStream14.read(byteArray21, 40960, 29127);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertNotNull(seekableByteChannelArray15);
        org.junit.Assert.assertNotNull(seekableByteChannel16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[97, 0]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray22);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream10);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream13 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream11, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy14 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream16 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream11, pack200Strategy14, strMap15);
        int int17 = pack200CompressorInputStream16.read();
        java.io.InputStream inputStream18 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream18);
        zipArchiveInputStream19.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream22 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream19);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy23 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream24 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream22, pack200Strategy23);
        java.nio.channels.SeekableByteChannel seekableByteChannel25 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream26 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel25);
        java.util.Map<java.lang.String, java.lang.String> strMap27 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream28 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream26, strMap27);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream29 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream28);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer30 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap31 = packer30.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream32 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream29, (java.util.Map<java.lang.String, java.lang.String>) strMap31);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream33 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream16, pack200Strategy23, (java.util.Map<java.lang.String, java.lang.String>) strMap31);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer34 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap35 = packer34.properties();
        org.apache.commons.compress.compressors.FileNameUtil fileNameUtil37 = new org.apache.commons.compress.compressors.FileNameUtil((java.util.Map<java.lang.String, java.lang.String>) strMap35, ".lzma");
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream38 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream16, (java.util.Map<java.lang.String, java.lang.String>) strMap35);
        java.io.File file39 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand((java.io.InputStream) pack200CompressorInputStream16, file39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(pack200Strategy14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 80 + "'", int17 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy23);
        org.junit.Assert.assertNotNull(packer30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(packer34);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature3 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        java.lang.String str4 = feature3.toString();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry6 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long7 = jarArchiveEntry6.getDataOffset();
        byte[] byteArray8 = jarArchiveEntry6.getRawName();
        jarArchiveEntry6.setInternalAttributes(1024);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException11 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature3, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry6);
        byte[] byteArray12 = jarArchiveEntry6.getRawName();
        byte[] byteArray13 = jarArchiveEntry6.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding15 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("lz4-block");
        byte[] byteArray17 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean19 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray17, 3);
        java.lang.String str20 = zipEncoding15.decode(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveEntry2.writeEntryHeader(byteArray13, zipEncoding15, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(feature3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "data descriptor" + "'", str4, "data descriptor");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(zipEncoding15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "a\000" + "'", str20, "a\000");
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        org.apache.commons.compress.changes.ChangeSetResults changeSetResults0 = new org.apache.commons.compress.changes.ChangeSetResults();
        java.util.List<java.lang.String> strList1 = changeSetResults0.getAddedFromChangeSet();
        java.util.List<java.lang.String> strList2 = changeSetResults0.getAddedFromChangeSet();
        java.util.List<java.lang.String> strList3 = changeSetResults0.getDeleted();
        java.util.List<java.lang.String> strList4 = changeSetResults0.getAddedFromChangeSet();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertNotNull(strList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNotNull(strList4);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x000A_NTFS0.getHeaderId();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS3 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger4 = x000A_NTFS3.getModifyTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger5 = x000A_NTFS3.getModifyTime();
        x000A_NTFS0.setModifyTime(zipEightByteInteger5);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS7 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = x000A_NTFS7.getModifyTime();
        java.util.Date date9 = x000A_NTFS7.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger10 = x000A_NTFS7.getModifyTime();
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod11 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64;
        boolean boolean12 = zipEightByteInteger10.equals((java.lang.Object) sevenZMethod11);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS13 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger14 = x000A_NTFS13.getModifyTime();
        java.lang.String str15 = zipEightByteInteger14.toString();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField16 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong18 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray19 = zipLong18.getBytes();
        zip64ExtendedInformationExtraField16.setDiskStartNumber(zipLong18);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp21 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong22 = x5455_ExtendedTimestamp21.getAccessTime();
        byte[] byteArray23 = x5455_ExtendedTimestamp21.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry26 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path27 = tarArchiveEntry26.getPath();
        java.nio.file.attribute.FileTime fileTime28 = null;
        tarArchiveEntry26.setCreationTime(fileTime28);
        java.nio.file.attribute.FileTime fileTime30 = tarArchiveEntry26.getLastModifiedTime();
        x5455_ExtendedTimestamp21.setAccessFileTime(fileTime30);
        boolean boolean32 = x5455_ExtendedTimestamp21.isBit1_accessTimePresent();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong33 = x5455_ExtendedTimestamp21.getAccessTime();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry36 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long37 = arArchiveEntry36.getLastModified();
        long long38 = arArchiveEntry36.getLength();
        java.util.Date date39 = arArchiveEntry36.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong40 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date39);
        x5455_ExtendedTimestamp21.setModifyTime(zipLong40);
        zip64ExtendedInformationExtraField16.setDiskStartNumber(zipLong40);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField43 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger5, zipEightByteInteger10, zipEightByteInteger14, zipLong40);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS44 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger45 = x000A_NTFS44.getModifyTime();
        java.util.Date date46 = x000A_NTFS44.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger47 = x000A_NTFS44.getModifyTime();
        byte[] byteArray48 = x000A_NTFS44.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry51 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path52 = tarArchiveEntry51.getPath();
        java.nio.file.attribute.FileTime fileTime53 = null;
        tarArchiveEntry51.setCreationTime(fileTime53);
        int int55 = tarArchiveEntry51.getUserId();
        long long56 = tarArchiveEntry51.getRealSize();
        java.util.Date date57 = tarArchiveEntry51.getLastModifiedDate();
        x000A_NTFS44.setModifyJavaTime(date57);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS59 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger60 = x000A_NTFS59.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel61 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream62 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel61);
        java.util.Map<java.lang.String, java.lang.String> strMap63 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream64 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream62, strMap63);
        byte[] byteArray65 = new byte[] {};
        pack200CompressorOutputStream64.write(byteArray65);
        x000A_NTFS59.parseFromCentralDirectoryData(byteArray65, 64, 0);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS70 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger71 = x000A_NTFS70.getModifyTime();
        java.util.Date date72 = x000A_NTFS70.getCreateJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry75 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path76 = tarArchiveEntry75.getPath();
        java.nio.file.attribute.FileTime fileTime77 = null;
        tarArchiveEntry75.setCreationTime(fileTime77);
        int int79 = tarArchiveEntry75.getUserId();
        java.util.Date date80 = tarArchiveEntry75.getModTime();
        x000A_NTFS70.setCreateJavaTime(date80);
        java.util.Date date82 = x000A_NTFS70.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger83 = x000A_NTFS70.getAccessTime();
        x000A_NTFS59.setModifyTime(zipEightByteInteger83);
        x000A_NTFS44.setCreateTime(zipEightByteInteger83);
        zip64ExtendedInformationExtraField43.setCompressedSize(zipEightByteInteger83);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS87 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger88 = x000A_NTFS87.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel89 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream90 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel89);
        java.util.Map<java.lang.String, java.lang.String> strMap91 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream92 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream90, strMap91);
        byte[] byteArray93 = new byte[] {};
        pack200CompressorOutputStream92.write(byteArray93);
        x000A_NTFS87.parseFromCentralDirectoryData(byteArray93, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger98 = x000A_NTFS87.getAccessTime();
        zip64ExtendedInformationExtraField43.setRelativeHeaderOffset(zipEightByteInteger98);
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipEightByteInteger4);
        org.junit.Assert.assertNotNull(zipEightByteInteger5);
        org.junit.Assert.assertNotNull(zipEightByteInteger8);
        org.junit.Assert.assertNull(date9);
        org.junit.Assert.assertNotNull(zipEightByteInteger10);
        org.junit.Assert.assertTrue("'" + sevenZMethod11 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64 + "'", sevenZMethod11.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ZipEightByteInteger value: 0" + "'", str15, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNull(zipLong22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0]");
        org.junit.Assert.assertNull(path27);
        org.junit.Assert.assertNotNull(fileTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(zipLong33);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1687209658L + "'", long37 == 1687209658L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 12L + "'", long38 == 12L);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Mon Jun 19 23:20:58 CEST 2023");
        org.junit.Assert.assertNotNull(zipLong40);
        org.junit.Assert.assertNotNull(zipEightByteInteger45);
        org.junit.Assert.assertNull(date46);
        org.junit.Assert.assertNotNull(zipEightByteInteger47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(path52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(date57);
// flaky:         org.junit.Assert.assertEquals(date57.toString(), "Mon Jun 19 23:20:58 CEST 2023");
        org.junit.Assert.assertNotNull(zipEightByteInteger60);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger71);
        org.junit.Assert.assertNull(date72);
        org.junit.Assert.assertNull(path76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(date80);
// flaky:         org.junit.Assert.assertEquals(date80.toString(), "Mon Jun 19 23:20:58 CEST 2023");
        org.junit.Assert.assertNotNull(date82);
// flaky:         org.junit.Assert.assertEquals(date82.toString(), "Mon Jun 19 23:20:58 CEST 2023");
        org.junit.Assert.assertNotNull(zipEightByteInteger83);
        org.junit.Assert.assertNotNull(zipEightByteInteger88);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger98);
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.lang.String str2 = zipEightByteInteger1.toString();
        byte[] byteArray3 = zipEightByteInteger1.getBytes();
        byte[] byteArray4 = zipEightByteInteger1.getBytes();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS5 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger6 = x000A_NTFS5.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream10 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream8, strMap9);
        byte[] byteArray11 = new byte[] {};
        pack200CompressorOutputStream10.write(byteArray11);
        x000A_NTFS5.parseFromCentralDirectoryData(byteArray11, 64, 0);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS16 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger17 = x000A_NTFS16.getModifyTime();
        java.util.Date date18 = x000A_NTFS16.getCreateJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry21 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path22 = tarArchiveEntry21.getPath();
        java.nio.file.attribute.FileTime fileTime23 = null;
        tarArchiveEntry21.setCreationTime(fileTime23);
        int int25 = tarArchiveEntry21.getUserId();
        java.util.Date date26 = tarArchiveEntry21.getModTime();
        x000A_NTFS16.setCreateJavaTime(date26);
        java.util.Date date28 = x000A_NTFS16.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger29 = x000A_NTFS16.getAccessTime();
        x000A_NTFS5.setModifyTime(zipEightByteInteger29);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS31 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger32 = x000A_NTFS31.getModifyTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort33 = x000A_NTFS31.getHeaderId();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS34 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger35 = x000A_NTFS34.getModifyTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger36 = x000A_NTFS34.getModifyTime();
        x000A_NTFS31.setModifyTime(zipEightByteInteger36);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean43 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray41, (int) (short) -1);
        boolean boolean44 = zipEightByteInteger36.equals((java.lang.Object) boolean43);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp45 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong46 = x5455_ExtendedTimestamp45.getAccessTime();
        byte[] byteArray47 = x5455_ExtendedTimestamp45.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry50 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path51 = tarArchiveEntry50.getPath();
        java.nio.file.attribute.FileTime fileTime52 = null;
        tarArchiveEntry50.setCreationTime(fileTime52);
        java.nio.file.attribute.FileTime fileTime54 = tarArchiveEntry50.getLastModifiedTime();
        x5455_ExtendedTimestamp45.setAccessFileTime(fileTime54);
        boolean boolean56 = x5455_ExtendedTimestamp45.isBit1_accessTimePresent();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong57 = x5455_ExtendedTimestamp45.getAccessTime();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry60 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long61 = arArchiveEntry60.getLastModified();
        long long62 = arArchiveEntry60.getLength();
        java.util.Date date63 = arArchiveEntry60.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong64 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date63);
        x5455_ExtendedTimestamp45.setModifyTime(zipLong64);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp66 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort67 = x5455_ExtendedTimestamp66.getLocalFileDataLength();
        boolean boolean68 = zipLong64.equals((java.lang.Object) zipShort67);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField69 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger1, zipEightByteInteger29, zipEightByteInteger36, zipLong64);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger70 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField71 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger1, zipEightByteInteger70);
        long long72 = zipEightByteInteger70.getLongValue();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ZipEightByteInteger value: 0" + "'", str2, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipEightByteInteger6);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger17);
        org.junit.Assert.assertNull(date18);
        org.junit.Assert.assertNull(path22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Mon Jun 19 23:20:59 CEST 2023");
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Mon Jun 19 23:20:59 CEST 2023");
        org.junit.Assert.assertNotNull(zipEightByteInteger29);
        org.junit.Assert.assertNotNull(zipEightByteInteger32);
        org.junit.Assert.assertNotNull(zipShort33);
        org.junit.Assert.assertNotNull(zipEightByteInteger35);
        org.junit.Assert.assertNotNull(zipEightByteInteger36);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(zipLong46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0]");
        org.junit.Assert.assertNull(path51);
        org.junit.Assert.assertNotNull(fileTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(zipLong57);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1687209659L + "'", long61 == 1687209659L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 12L + "'", long62 == 12L);
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Mon Jun 19 23:20:59 CEST 2023");
        org.junit.Assert.assertNotNull(zipLong64);
        org.junit.Assert.assertNotNull(zipShort67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        int int10 = tarArchiveOutputStream6.getCount();
        tarArchiveOutputStream6.setBigNumberMode(1);
        tarArchiveOutputStream6.setLongFileMode(61440);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6, (short) (byte) 2, (int) (byte) 52);
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry20 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long21 = arArchiveEntry20.getLastModified();
        long long22 = arArchiveEntry20.getLength();
        long long23 = arArchiveEntry20.getLength();
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream17.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) arArchiveEntry20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.ar.ArArchiveEntry cannot be cast to org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1687209659L + "'", long21 == 1687209659L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 12L + "'", long22 == 12L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 12L + "'", long23 == 12L);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        tarArchiveEntry1.setGroupId((long) (short) 2);
        int int4 = tarArchiveEntry1.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.lang.String str9 = tarArchiveEntry7.getName();
        boolean boolean10 = tarArchiveEntry7.isFile();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp11 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = x5455_ExtendedTimestamp11.getAccessTime();
        byte[] byteArray13 = x5455_ExtendedTimestamp11.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path17 = tarArchiveEntry16.getPath();
        java.nio.file.attribute.FileTime fileTime18 = null;
        tarArchiveEntry16.setCreationTime(fileTime18);
        java.nio.file.attribute.FileTime fileTime20 = tarArchiveEntry16.getLastModifiedTime();
        x5455_ExtendedTimestamp11.setAccessFileTime(fileTime20);
        tarArchiveEntry7.setLastModifiedTime(fileTime20);
        tarArchiveEntry1.setLastModifiedTime(fileTime20);
        java.lang.String str24 = tarArchiveEntry1.getName();
        int int25 = tarArchiveEntry1.getDevMajor();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "deflate64" + "'", str9, "deflate64");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(zipLong12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0]");
        org.junit.Assert.assertNull(path17);
        org.junit.Assert.assertNotNull(fileTime20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "`\n" + "'", str24, "`\n");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        org.apache.commons.compress.changes.ChangeSet changeSet0 = new org.apache.commons.compress.changes.ChangeSet();
        changeSet0.deleteDir("hi!");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry4 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField5 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry4.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField5);
        java.nio.file.attribute.FileTime fileTime7 = jarArchiveEntry4.getLastAccessTime();
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream8);
        zipArchiveInputStream9.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream9);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry13 = jarArchiveInputStream12.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = jarArchiveInputStream12.getNextEntry();
        changeSet0.add((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry4, (java.io.InputStream) jarArchiveInputStream12);
        changeSet0.delete("data descriptor");
        changeSet0.deleteDir("keep");
        org.junit.Assert.assertNull(fileTime7);
        org.junit.Assert.assertNull(archiveEntry13);
        org.junit.Assert.assertNull(archiveEntry14);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy5 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream4, pack200Strategy5);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField7 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean13 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray11, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior15 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray11, false, extraFieldParsingBehavior15);
        boolean boolean18 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray11, 32768);
        unrecognizedExtraField7.setLocalFileDataData(byteArray11);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort20 = unrecognizedExtraField7.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort21 = unrecognizedExtraField7.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS22 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger23 = x000A_NTFS22.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel24 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream25 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream27 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream25, strMap26);
        byte[] byteArray28 = new byte[] {};
        pack200CompressorOutputStream27.write(byteArray28);
        x000A_NTFS22.parseFromCentralDirectoryData(byteArray28, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort33 = x000A_NTFS22.getHeaderId();
        byte[] byteArray34 = x000A_NTFS22.getLocalFileDataData();
        unrecognizedExtraField7.setLocalFileDataData(byteArray34);
        int int38 = jarArchiveInputStream4.read(byteArray34, 76, (int) (byte) 120);
        boolean boolean40 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray34, 148);
        org.junit.Assert.assertNotNull(pack200Strategy5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zipShort20);
        org.junit.Assert.assertNotNull(zipShort21);
        org.junit.Assert.assertNotNull(zipEightByteInteger23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(zipShort33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore0 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore1 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore2 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor3 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore2);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream4 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore1, streamCompressor3);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream5 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore0, streamCompressor3);
        long long6 = streamCompressor3.getBytesRead();
        java.nio.channels.SeekableByteChannel seekableByteChannel7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream10 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream8, strMap9);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream11 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream10);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer12 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap13 = packer12.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream11, (java.util.Map<java.lang.String, java.lang.String>) strMap13);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField15 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField16 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean22 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray20, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior24 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray25 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray20, false, extraFieldParsingBehavior24);
        boolean boolean27 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray20, 32768);
        unrecognizedExtraField16.setLocalFileDataData(byteArray20);
        unrecognizedExtraField15.setCentralDirectoryData(byteArray20);
        pack200CompressorOutputStream14.write(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            streamCompressor3.writeCounted(byteArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(streamCompressor3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(packer12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        java.nio.file.attribute.FileTime fileTime6 = tarArchiveEntry2.getLastModifiedTime();
        java.io.File file7 = tarArchiveEntry2.getFile();
        boolean boolean8 = tarArchiveEntry2.isLink();
        tarArchiveEntry2.setGroupId(1687209593L);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertNotNull(fileTime6);
        org.junit.Assert.assertNull(file7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream7 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry8 = arArchiveInputStream7.getNextArEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Failed to read header. Occurred at byte: 0");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(tarArchiveEntry4);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        long long7 = pack200CompressorInputStream6.getBytesRead();
        long long9 = pack200CompressorInputStream6.skip(1687209505L);
        int int10 = pack200CompressorInputStream6.available();
        byte[] byteArray12 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean14 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray12, 3);
        boolean boolean16 = org.apache.commons.compress.compressors.xz.XZUtils.matches(byteArray12, (int) (short) 2);
        int int17 = pack200CompressorInputStream6.read(byteArray12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream gzipCompressorInputStream19 = new org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Input is not in the .gz format");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 29L + "'", long9 == 29L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean13 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray11, 3);
        boolean boolean15 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray11, (int) (byte) 53);
        boolean boolean17 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray11, (int) ' ');
        org.apache.commons.compress.archivers.tar.TarFile tarFile18 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray11);
        java.io.File file19 = null;
        expander0.expand(tarFile18, file19);
        java.nio.file.Path path22 = null;
        java.nio.file.Path path23 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("0x5455 Zip Extra Field: Flags=0 ", path22, path23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        java.io.File file0 = null;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream5 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        framedSnappyCompressorOutputStream5.finish();
        framedSnappyCompressorOutputStream5.finish();
        framedSnappyCompressorOutputStream5.finish();
        java.nio.channels.SeekableByteChannel seekableByteChannel9 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel9);
        java.lang.String str11 = zipArchiveOutputStream10.getEncoding();
        boolean boolean12 = zipArchiveOutputStream10.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry15 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date16 = cpioArchiveEntry15.getLastModifiedDate();
        cpioArchiveEntry15.setRemoteDeviceMaj((long) 'a');
        int int19 = cpioArchiveEntry15.getAlignmentBoundary();
        boolean boolean20 = zipArchiveOutputStream10.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry15);
        zipArchiveOutputStream10.setComment("pack.code.attribute.");
        java.io.InputStream inputStream23 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream23);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream26 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream24, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy27 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap28 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream29 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream24, pack200Strategy27, strMap28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream31 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream10, pack200Strategy27, strMap30);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream32 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream5, pack200Strategy27);
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry33 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry33.setGroupId(0);
        java.lang.String str36 = dumpArchiveEntry33.getSimpleName();
        boolean boolean37 = dumpArchiveEntry33.isDirectory();
        java.io.InputStream inputStream38 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream39 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream38);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream41 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream39, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy42 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream44 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream39, pack200Strategy42, strMap43);
        int int45 = pack200CompressorInputStream44.read();
        java.io.InputStream inputStream46 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream47 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream46);
        zipArchiveInputStream47.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream50 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream47);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy51 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream52 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream50, pack200Strategy51);
        java.nio.channels.SeekableByteChannel seekableByteChannel53 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream54 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel53);
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream56 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream54, strMap55);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream57 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream56);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer58 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap59 = packer58.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream60 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream57, (java.util.Map<java.lang.String, java.lang.String>) strMap59);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream61 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream44, pack200Strategy51, (java.util.Map<java.lang.String, java.lang.String>) strMap59);
        boolean boolean62 = dumpArchiveEntry33.equals((java.lang.Object) strMap59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream63 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(file0, pack200Strategy27, (java.util.Map<java.lang.String, java.lang.String>) strMap59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTF8" + "'", str11, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(pack200Strategy27);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(pack200Strategy42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 80 + "'", int45 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy51);
        org.junit.Assert.assertNotNull(packer58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier1 = null;
        parallelScatterZipCreator0.addArchiveEntry(zipArchiveEntryRequestSupplier1);
        java.io.OutputStream outputStream3 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream(outputStream3, "snappy-framed");
        // The following exception was thrown during execution in test generation
        try {
            parallelScatterZipCreator0.writeTo((org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream) jarArchiveOutputStream5);
            org.junit.Assert.fail("Expected exception of type java.util.concurrent.ExecutionException; message: java.lang.NullPointerException");
        } catch (java.util.concurrent.ExecutionException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile4 = new org.apache.commons.compress.archivers.zip.ZipFile(file0, "zip", true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        zipArchiveOutputStream1.setMethod(0);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream14 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        long long15 = zipArchiveOutputStream1.getBytesWritten();
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField0 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField1 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean7 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray5, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior9 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray5, false, extraFieldParsingBehavior9);
        boolean boolean12 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray5, 32768);
        unrecognizedExtraField1.setLocalFileDataData(byteArray5);
        unrecognizedExtraField0.setCentralDirectoryData(byteArray5);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort15 = unrecognizedExtraField0.getLocalFileDataLength();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zipShort15);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        java.lang.String str0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DUMP;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "dump" + "'", str0, "dump");
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 488);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream5);
        long long7 = tarArchiveInputStream5.getBytesRead();
        tarArchiveInputStream5.close();
        tarArchiveInputStream5.close();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream11 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream((java.io.InputStream) tarArchiveInputStream5, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        int int1 = dumpArchiveEntry0.getNlink();
        dumpArchiveEntry0.setMode((-1));
        boolean boolean4 = dumpArchiveEntry0.isFile();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator3 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier2.get();
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore5 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore6 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor7 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore6);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream8 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore5, streamCompressor7);
        long long9 = streamCompressor7.getTotalBytesWritten();
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream10 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore4, streamCompressor7);
        long long11 = streamCompressor7.getBytesRead();
        long long12 = streamCompressor7.getCrc32();
        streamCompressor7.close();
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
        org.junit.Assert.assertNotNull(streamCompressor7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer5 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap6 = packer5.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream4, (java.util.Map<java.lang.String, java.lang.String>) strMap6);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField8 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField9 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean15 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray13, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior17 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray13, false, extraFieldParsingBehavior17);
        boolean boolean20 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray13, 32768);
        unrecognizedExtraField9.setLocalFileDataData(byteArray13);
        unrecognizedExtraField8.setCentralDirectoryData(byteArray13);
        pack200CompressorOutputStream7.write(byteArray13);
        pack200CompressorOutputStream7.write(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder26 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder28 = builder26.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder30 = builder28.withLazyThreshold(6);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder32 = builder28.withMaxLiteralLength(263);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder34 = builder32.withLazyThreshold(2);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters35 = builder34.build();
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream blockLZ4CompressorOutputStream36 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream7, parameters35);
        pack200CompressorOutputStream7.write((int) (byte) 48);
        org.junit.Assert.assertNotNull(packer5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(parameters35);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        java.lang.String str0 = org.apache.commons.compress.archivers.tar.TarConstants.GNU_LONGLINK;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "././@LongLink" + "'", str0, "././@LongLink");
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream2, true);
        int int5 = tarArchiveInputStream4.getRecordSize();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry7 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData8 = jarArchiveEntry7.getUnparseableExtraFieldData();
        jarArchiveEntry7.setCompressedSize((long) 64);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature11 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException12 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature11);
        boolean boolean13 = jarArchiveEntry7.equals((java.lang.Object) unsupportedZipFeatureException12);
        boolean boolean14 = tarArchiveInputStream4.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = tarArchiveInputStream4.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current ar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 512 + "'", int5 == 512);
        org.junit.Assert.assertNull(unparseableExtraFieldData8);
        org.junit.Assert.assertNotNull(feature11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(file0, "error");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        java.lang.String str1 = org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename("unpack.progress");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "unpack.progress" + "'", str1, "unpack.progress");
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setRemoteDeviceMin((long) 12);
        java.util.Date date6 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setUID(1687209520L);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveEntry2.setMode(1024L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mode. Full: 400 Masked: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        java.io.InputStream inputStream0 = null;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream4 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream3);
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters5 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters5.setWithZlibHeader(false);
        deflateParameters5.setWithZlibHeader(true);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream10 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) brotliCompressorInputStream4, deflateParameters5);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream11 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream(inputStream0, deflateParameters5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.dump.DumpArchiveInputStream dumpArchiveInputStream12 = new org.apache.commons.compress.archivers.dump.DumpArchiveInputStream((java.io.InputStream) deflateCompressorInputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        sevenZArchiveEntry0.setHasWindowsAttributes(true);
        boolean boolean5 = sevenZArchiveEntry0.getHasCreationDate();
        int int6 = sevenZArchiveEntry0.getWindowsAttributes();
        sevenZArchiveEntry0.setSize((long) 40960);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray9 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray9);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile11 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray12 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel13 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray12);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile14 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel13);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel13);
        char[] charArray16 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile17 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel13, charArray16);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile18 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray16);
        java.io.File file19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry21 = sevenZOutputFile18.createArchiveEntry(file19, "br");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a,  , a, #, 4]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray12);
        org.junit.Assert.assertNotNull(seekableByteChannel13);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[]");
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("pack.field.attribute.", ".bz2.lzma");
        boolean boolean3 = dumpArchiveEntry2.isBlkDev();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x5455_ExtendedTimestamp0.getLocalFileDataLength();
        byte byte2 = x5455_ExtendedTimestamp0.getFlags();
        java.util.Date date3 = x5455_ExtendedTimestamp0.getCreateJavaTime();
        java.nio.file.attribute.FileTime fileTime4 = x5455_ExtendedTimestamp0.getModifyFileTime();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0);
        org.junit.Assert.assertNull(date3);
        org.junit.Assert.assertNull(fileTime4);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory1 = new org.apache.commons.compress.compressors.CompressorStreamFactory(false);
        java.io.InputStream inputStream3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream3);
        zipArchiveInputStream4.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream7 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream4);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy8 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream9 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream7, pack200Strategy8);
        org.apache.commons.compress.compressors.CompressorInputStream compressorInputStream11 = compressorStreamFactory1.createCompressorInputStream("zstd", (java.io.InputStream) pack200CompressorInputStream9, false);
        java.util.Set<java.lang.String> strSet12 = compressorStreamFactory1.getOutputStreamCompressorNames();
        // The following exception was thrown during execution in test generation
        try {
            compressorStreamFactory1.setDecompressConcatenated(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot override the setting defined by the constructor");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy8);
        org.junit.Assert.assertNotNull(compressorInputStream11);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        boolean boolean2 = asiExtraField0.isDirectory();
        boolean boolean3 = asiExtraField0.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding6 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("lz4-block");
        byte[] byteArray8 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean10 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray8, 3);
        java.lang.String str11 = zipEncoding6.decode(byteArray8);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField12 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField("latest", byteArray8);
        boolean boolean14 = org.apache.commons.compress.compressors.xz.XZUtils.matches(byteArray8, 67324752);
        // The following exception was thrown during execution in test generation
        try {
            asiExtraField0.parseFromCentralDirectoryData(byteArray8, 508, 60012);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 508");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zipEncoding6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "a\000" + "'", str11, "a\000");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry2 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("ustar\000", 1687209641L);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        sevenZArchiveEntry0.setHasLastModifiedDate(false);
        boolean boolean5 = sevenZArchiveEntry0.getHasCrc();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp6 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong7 = x5455_ExtendedTimestamp6.getAccessTime();
        byte[] byteArray8 = x5455_ExtendedTimestamp6.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path12 = tarArchiveEntry11.getPath();
        java.nio.file.attribute.FileTime fileTime13 = null;
        tarArchiveEntry11.setCreationTime(fileTime13);
        java.nio.file.attribute.FileTime fileTime15 = tarArchiveEntry11.getLastModifiedTime();
        x5455_ExtendedTimestamp6.setAccessFileTime(fileTime15);
        boolean boolean17 = x5455_ExtendedTimestamp6.isBit1_accessTimePresent();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong18 = x5455_ExtendedTimestamp6.getAccessTime();
        java.util.Date date19 = x5455_ExtendedTimestamp6.getAccessJavaTime();
        sevenZArchiveEntry0.setLastModifiedDate(date19);
        org.apache.commons.compress.archivers.tar.TarArchiveStructSparse tarArchiveStructSparse23 = new org.apache.commons.compress.archivers.tar.TarArchiveStructSparse(0L, (long) 476);
        long long24 = tarArchiveStructSparse23.getNumbytes();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry27 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date28 = cpioArchiveEntry27.getLastModifiedDate();
        cpioArchiveEntry27.setChksum(0L);
        boolean boolean31 = cpioArchiveEntry27.isSocket();
        cpioArchiveEntry27.setRemoteDeviceMaj(1687209545L);
        java.util.Date date34 = cpioArchiveEntry27.getLastModifiedDate();
        boolean boolean35 = tarArchiveStructSparse23.equals((java.lang.Object) date34);
        sevenZArchiveEntry0.setLastModifiedDate(date34);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(zipLong7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0]");
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertNotNull(fileTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zipLong18);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Mon Jun 19 23:21:01 CEST 2023");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 476L + "'", long24 == 476L);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy5 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream4, pack200Strategy5);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry7 = jarArchiveInputStream4.getNextJarEntry();
        java.nio.channels.SeekableByteChannel seekableByteChannel8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream11 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream9, strMap10);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream12 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream11);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer13 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap14 = packer13.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream15 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream12, (java.util.Map<java.lang.String, java.lang.String>) strMap14);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField16 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField17 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean23 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray21, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior25 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray21, false, extraFieldParsingBehavior25);
        boolean boolean28 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray21, 32768);
        unrecognizedExtraField17.setLocalFileDataData(byteArray21);
        unrecognizedExtraField16.setCentralDirectoryData(byteArray21);
        pack200CompressorOutputStream15.write(byteArray21);
        int int34 = jarArchiveInputStream4.read(byteArray21, 8, 131);
        org.junit.Assert.assertNotNull(pack200Strategy5);
        org.junit.Assert.assertNull(jarArchiveEntry7);
        org.junit.Assert.assertNotNull(packer13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        org.apache.commons.compress.PasswordRequiredException passwordRequiredException1 = new org.apache.commons.compress.PasswordRequiredException("org.apache.commons.compress.archivers.ArchiveException: 0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:19:20.457Z] ");
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        framedSnappyCompressorOutputStream4.finish();
        framedSnappyCompressorOutputStream4.finish();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream4, "pack.class.attribute.");
        framedSnappyCompressorOutputStream4.write(7);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        org.apache.commons.compress.compressors.CompressorException compressorException1 = new org.apache.commons.compress.compressors.CompressorException("0x000A Zip Extra Field: Modify:[2023-06-19T21:19:55.787Z]  Access:[null]  Create:[null] ");
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6, "deflate64");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry12 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField13 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry12.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField13);
        java.nio.file.attribute.FileTime fileTime15 = jarArchiveEntry12.getLastAccessTime();
        java.nio.file.attribute.FileTime fileTime16 = jarArchiveEntry12.getLastAccessTime();
        long long17 = jarArchiveEntry12.getDataOffset();
        boolean boolean18 = tarArchiveOutputStream6.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry12);
        tarArchiveOutputStream6.setBigNumberMode(263);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6);
        tarArchiveOutputStream6.setLongFileMode(0);
        org.junit.Assert.assertNull(fileTime15);
        org.junit.Assert.assertNull(fileTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        java.io.File file0 = null;
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        char[] charArray10 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile11 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2, charArray10);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile12 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray13 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel14 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray13);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile15 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel14);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel14);
        char[] charArray17 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile18 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel14, charArray17);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile19 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2, charArray17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile20 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(file0, charArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  , a, #, 4]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray13);
        org.junit.Assert.assertNotNull(seekableByteChannel14);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream10);
        zipArchiveInputStream11.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream11, 488);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream16 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream15);
        java.nio.file.Path path17 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) tarArchiveInputStream15, path17);
        org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile19 = null;
        java.nio.file.Path path20 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand(sevenZFile19, path20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) (byte) 1);
        long long2 = cpioArchiveEntry1.getInode();
        // The following exception was thrown during execution in test generation
        try {
            long long3 = cpioArchiveEntry1.getDevice();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        org.apache.commons.compress.MemoryLimitException memoryLimitException2 = new org.apache.commons.compress.MemoryLimitException((long) 5, (int) (byte) 52);
        long long3 = memoryLimitException2.getMemoryNeededInKb();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 5L + "'", long3 == 5L);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy3 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
        java.lang.String str4 = unicodeExtraFieldPolicy3.toString();
        zipArchiveOutputStream1.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy3);
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry6 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        boolean boolean7 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) arjArchiveEntry6);
        java.lang.String str8 = zipArchiveOutputStream1.getEncoding();
        java.nio.channels.SeekableByteChannel seekableByteChannel9 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel9);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream10, strMap11);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream13 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream12);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer14 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap15 = packer14.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream16 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream13, (java.util.Map<java.lang.String, java.lang.String>) strMap15);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField17 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField18 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean24 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray22, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior26 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray27 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray22, false, extraFieldParsingBehavior26);
        boolean boolean29 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray22, 32768);
        unrecognizedExtraField18.setLocalFileDataData(byteArray22);
        unrecognizedExtraField17.setCentralDirectoryData(byteArray22);
        pack200CompressorOutputStream16.write(byteArray22);
        pack200CompressorOutputStream16.write(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder35 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder37 = builder35.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder39 = builder37.withLazyThreshold(6);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder41 = builder37.withMaxLiteralLength(263);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder43 = builder41.withLazyThreshold(2);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters44 = builder43.build();
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream blockLZ4CompressorOutputStream45 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream16, parameters44);
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream blockLZ4CompressorOutputStream46 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, parameters44);
        // The following exception was thrown during execution in test generation
        try {
            blockLZ4CompressorOutputStream46.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "never" + "'", str4, "never");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTF8" + "'", str8, "UTF8");
        org.junit.Assert.assertNotNull(packer14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(parameters44);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(file0, "zstd");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6, "deflate64");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry12 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField13 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry12.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField13);
        java.nio.file.attribute.FileTime fileTime15 = jarArchiveEntry12.getLastAccessTime();
        java.nio.file.attribute.FileTime fileTime16 = jarArchiveEntry12.getLastAccessTime();
        long long17 = jarArchiveEntry12.getDataOffset();
        boolean boolean18 = tarArchiveOutputStream6.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry12);
        tarArchiveOutputStream6.setBigNumberMode(263);
        int int21 = tarArchiveOutputStream6.getCount();
        java.nio.channels.SeekableByteChannel seekableByteChannel22 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream23 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream25 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream23, strMap24);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream26 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream25);
        gzipCompressorOutputStream26.flush();
        gzipCompressorOutputStream26.write(464);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize30 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M4;
        org.apache.commons.compress.compressors.lz77support.Parameters parameters34 = null;
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters35 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize30, true, true, true, parameters34);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters39 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize30, true, true, true);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream40 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream26, parameters39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream41 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream((java.io.OutputStream) tarArchiveOutputStream6, parameters39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime15);
        org.junit.Assert.assertNull(fileTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + blockSize30 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M4 + "'", blockSize30.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M4));
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        int int7 = pack200CompressorInputStream6.read();
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream8);
        zipArchiveInputStream9.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream9);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy13 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream12, pack200Strategy13);
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream16, strMap17);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream19 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream18);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer20 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap21 = packer20.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream19, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, pack200Strategy13, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream24 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream25 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream27 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) deflate64CompressorInputStream25, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream29 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream27, ".bz2.lzma");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: .bz2.lzma");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 80 + "'", int7 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy13);
        org.junit.Assert.assertNotNull(packer20);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        tarArchiveEntry2.setMode(131);
        java.lang.String str6 = tarArchiveEntry2.getName();
        byte byte7 = tarArchiveEntry2.getLinkFlag();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "deflate64" + "'", str6, "deflate64");
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 77 + "'", byte7 == (byte) 77);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        int int6 = deflateCompressorInputStream5.available();
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) deflateCompressorInputStream5, (int) (byte) 100);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer9 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap10 = packer9.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream11 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) cpioArchiveInputStream8, (java.util.Map<java.lang.String, java.lang.String>) strMap10);
        long long13 = cpioArchiveInputStream8.skip(0L);
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(packer9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile7 = new org.apache.commons.compress.archivers.zip.ZipFile(seekableByteChannel1, "LZ4 Parameters with BlockSize null, withContentChecksum false, withBlockChecksum false, withBlockDependency true", "", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean1 = sevenZArchiveEntry0.getHasLastModifiedDate();
        boolean boolean2 = sevenZArchiveEntry0.getHasCrc();
        boolean boolean3 = sevenZArchiveEntry0.isAntiItem();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField0 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField();
        unicodeCommentExtraField0.setNameCRC32((long) 12);
        byte[] byteArray3 = unicodeCommentExtraField0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = unicodeCommentExtraField0.getHeaderId();
        byte[] byteArray5 = unicodeCommentExtraField0.getCentralDirectoryData();
        byte[] byteArray6 = unicodeCommentExtraField0.getCentralDirectoryData();
        org.junit.Assert.assertNull(byteArray3);
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNull(byteArray5);
        org.junit.Assert.assertNull(byteArray6);
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy5 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream4, pack200Strategy5);
        jarArchiveInputStream4.close();
        org.junit.Assert.assertNotNull(pack200Strategy5);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        zipArchiveOutputStream1.flush();
        zipArchiveOutputStream1.flush();
        zipArchiveOutputStream1.setMethod((int) (byte) -1);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream8 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode9 = org.apache.commons.compress.archivers.zip.Zip64Mode.AlwaysWithCompatibility;
        zipArchiveOutputStream1.setUseZip64(zip64Mode9);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry12 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData13 = jarArchiveEntry12.getUnparseableExtraFieldData();
        jarArchiveEntry12.setCompressedSize((long) 64);
        int int16 = jarArchiveEntry12.getRawFlag();
        jarArchiveEntry12.setExternalAttributes((long) (byte) 51);
        byte[] byteArray20 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean22 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray20, 3);
        boolean boolean24 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray20, 3);
        jarArchiveEntry12.setExtra(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + zip64Mode9 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.AlwaysWithCompatibility + "'", zip64Mode9.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.AlwaysWithCompatibility));
        org.junit.Assert.assertNull(unparseableExtraFieldData13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        byte byte2 = tarArchiveEntry1.getLinkFlag();
        tarArchiveEntry1.setModTime((long) (byte) 76);
        tarArchiveEntry1.setGroupId(64);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry[] tarArchiveEntryArray7 = tarArchiveEntry1.getDirectoryEntries();
        boolean boolean8 = tarArchiveEntry1.isPaxHeader();
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 48 + "'", byte2 == (byte) 48);
        org.junit.Assert.assertNotNull(tarArchiveEntryArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream2 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
        java.lang.String str3 = org.apache.commons.compress.archivers.ArchiveStreamFactory.detect((java.io.InputStream) pack200CompressorInputStream2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream((java.io.InputStream) pack200CompressorInputStream2);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a framed Snappy stream");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zip" + "'", str3, "zip");
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        org.apache.commons.compress.java.util.jar.Pack200.Unpacker unpacker0 = org.apache.commons.compress.java.util.jar.Pack200.newUnpacker();
        java.beans.PropertyChangeListener propertyChangeListener1 = null;
        unpacker0.removePropertyChangeListener(propertyChangeListener1);
        java.io.InputStream inputStream3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream3);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream4);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream6 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream5);
        long long7 = brotliCompressorInputStream6.getCompressedCount();
        java.lang.String str8 = brotliCompressorInputStream6.toString();
        long long9 = brotliCompressorInputStream6.getCompressedCount();
        brotliCompressorInputStream6.mark(128);
        java.util.jar.JarOutputStream jarOutputStream12 = null;
        // The following exception was thrown during execution in test generation
        try {
            unpacker0.unpack((java.io.InputStream) brotliCompressorInputStream6, jarOutputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must specify both input and output streams");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(unpacker0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters0.setDeflateStrategy((int) (short) 3);
        gzipParameters0.setBufferSize((int) (byte) 10);
        gzipParameters0.setModificationTime(133316831452240000L);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        byte byte2 = tarArchiveEntry1.getLinkFlag();
        int int3 = tarArchiveEntry1.getDevMinor();
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList4 = tarArchiveEntry1.getSparseHeaders();
        boolean boolean5 = tarArchiveEntry1.isExtended();
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 48 + "'", byte2 == (byte) 48);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(tarArchiveStructSparseList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setVolume((int) (byte) 120);
        java.lang.String str3 = dumpArchiveEntry0.getSimpleName();
        dumpArchiveEntry0.setUserId(11);
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet6 = dumpArchiveEntry0.getPermissions();
        int int7 = dumpArchiveEntry0.getHeaderHoles();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(pERMISSIONSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        int int10 = tarArchiveOutputStream6.getCount();
        tarArchiveOutputStream6.finish();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream12 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream snappyCompressorOutputStream14 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream((java.io.OutputStream) cpioArchiveOutputStream12, (long) 49152);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current CPIO entry");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean13 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray11, 3);
        boolean boolean15 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray11, (int) (byte) 53);
        boolean boolean17 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray11, (int) ' ');
        org.apache.commons.compress.archivers.tar.TarFile tarFile18 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray11);
        java.io.File file19 = null;
        expander0.expand(tarFile18, file19);
        java.io.InputStream inputStream22 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream23 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream22);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream23);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream25 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream24);
        long long26 = brotliCompressorInputStream25.getCompressedCount();
        java.lang.String str27 = brotliCompressorInputStream25.toString();
        long long28 = brotliCompressorInputStream25.getCompressedCount();
        brotliCompressorInputStream25.mark(128);
        java.io.File file31 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("", (java.io.InputStream) brotliCompressorInputStream25, file31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver:  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        boolean boolean3 = jarArchiveEntry1.isStreamContiguous();
        long long4 = jarArchiveEntry1.getDataOffset();
        boolean boolean5 = jarArchiveEntry1.isUnixSymlink();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS6 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger7 = x000A_NTFS6.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream11 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream9, strMap10);
        byte[] byteArray12 = new byte[] {};
        pack200CompressorOutputStream11.write(byteArray12);
        x000A_NTFS6.parseFromCentralDirectoryData(byteArray12, 64, 0);
        jarArchiveEntry1.setCentralDirectoryExtra(byteArray12);
        byte[] byteArray18 = jarArchiveEntry1.getLocalFileDataExtra();
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit19 = jarArchiveEntry1.getGeneralPurposeBit();
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(generalPurposeBit19);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        bZip2CompressorOutputStream5.finish();
        bZip2CompressorOutputStream5.flush();
        int int8 = bZip2CompressorOutputStream5.getBlockSize();
        bZip2CompressorOutputStream5.flush();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        long long7 = tarArchiveEntry2.getRealSize();
        boolean boolean8 = tarArchiveEntry2.isGNULongLinkEntry();
        boolean boolean9 = tarArchiveEntry2.isCheckSumOK();
        java.nio.file.Path path10 = tarArchiveEntry2.getPath();
        java.nio.file.Path path11 = tarArchiveEntry2.getPath();
        java.lang.String str12 = tarArchiveEntry2.getName();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(path10);
        org.junit.Assert.assertNull(path11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "deflate64" + "'", str12, "deflate64");
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        zipArchiveOutputStream1.flush();
        java.lang.String str5 = zipArchiveOutputStream1.getEncoding();
        zipArchiveOutputStream1.setEncoding("lz4-block.xz");
        int int8 = zipArchiveOutputStream1.getCount();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS9 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean13 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray11, 3);
        x000A_NTFS9.parseFromLocalFileData(byteArray11, 8, (int) (short) 2);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.writePreamble(byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTF8" + "'", str5, "UTF8");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        java.lang.String str1 = org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename("gz");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "gz.bz2" + "'", str1, "gz.bz2");
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT;
        archiveStreamFactory0.setEntryEncoding("data descriptor");
        java.util.Set<java.lang.String> strSet3 = archiveStreamFactory0.getInputStreamArchiveNames();
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.archivers.ArchiveStreamProvider> strMap4 = archiveStreamFactory0.getArchiveInputStreamProviders();
        java.util.Set<java.lang.String> strSet5 = archiveStreamFactory0.getOutputStreamArchiveNames();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray7 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel8 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray7);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory0.createArchiveOutputStream("lz4-framed", (java.io.OutputStream) zipArchiveOutputStream9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: lz4-framed not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(archiveStreamFactory0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(seekableByteChannelArray7);
        org.junit.Assert.assertNotNull(seekableByteChannel8);
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        long long4 = zipArchiveInputStream1.getUncompressedCount();
        long long6 = zipArchiveInputStream1.skip(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry7 = zipArchiveInputStream1.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long2 = jarArchiveEntry1.getDataOffset();
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit3 = null;
        jarArchiveEntry1.setGeneralPurposeBit(generalPurposeBit3);
        long long5 = jarArchiveEntry1.getDataOffset();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        org.apache.commons.compress.archivers.zip.X0014_X509Certificates x0014_X509Certificates0 = new org.apache.commons.compress.archivers.zip.X0014_X509Certificates();
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        short short4 = cpioArchiveEntry2.getFormat();
        cpioArchiveEntry2.setNumberOfLinks((long) ' ');
        boolean boolean7 = cpioArchiveEntry2.isCharacterDevice();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 1 + "'", short4 == (short) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder0 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder2 = builder0.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder4 = builder2.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder6 = builder2.withMinBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder8 = builder6.withMaxOffset((int) (byte) 48);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder9 = builder6.tunedForSpeed();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream10);
        zipArchiveInputStream11.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream11, 488);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream16 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream15);
        java.nio.file.Path path17 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) tarArchiveInputStream15, path17);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = tarArchiveInputStream15.skip(1687209642L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 488);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.dump.DumpArchiveInputStream dumpArchiveInputStream6 = new org.apache.commons.compress.archivers.dump.DumpArchiveInputStream((java.io.InputStream) tarArchiveInputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        java.nio.file.attribute.FileTime fileTime3 = null;
        sevenZArchiveEntry0.setAccessTime(fileTime3);
        boolean boolean5 = sevenZArchiveEntry0.getHasWindowsAttributes();
        boolean boolean6 = sevenZArchiveEntry0.getHasAccessDate();
        sevenZArchiveEntry0.setHasCreationDate(true);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.attribute.FileTime fileTime9 = sevenZArchiveEntry0.getAccessTime();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The entry doesn't have this timestamp");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        org.apache.commons.compress.changes.ChangeSet changeSet0 = new org.apache.commons.compress.changes.ChangeSet();
        changeSet0.deleteDir("hi!");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry4 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField5 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry4.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField5);
        java.nio.file.attribute.FileTime fileTime7 = jarArchiveEntry4.getLastAccessTime();
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream8);
        zipArchiveInputStream9.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream9);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry13 = jarArchiveInputStream12.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = jarArchiveInputStream12.getNextEntry();
        changeSet0.add((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry4, (java.io.InputStream) jarArchiveInputStream12);
        long long17 = jarArchiveInputStream12.skip((long) 29);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker18 = new org.apache.commons.compress.archivers.zip.JarMarker();
        byte[] byteArray19 = jarMarker18.getLocalFileDataData();
        byte[] byteArray20 = jarMarker18.getCentralDirectoryData();
        int int21 = jarArchiveInputStream12.read(byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipShort zipShort22 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime7);
        org.junit.Assert.assertNull(archiveEntry13);
        org.junit.Assert.assertNull(archiveEntry14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        long long7 = pack200CompressorInputStream6.getBytesRead();
        long long9 = pack200CompressorInputStream6.skip(1687209505L);
        int int10 = pack200CompressorInputStream6.available();
        byte[] byteArray12 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean14 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray12, 3);
        boolean boolean16 = org.apache.commons.compress.compressors.xz.XZUtils.matches(byteArray12, (int) (short) 2);
        int int17 = pack200CompressorInputStream6.read(byteArray12);
        boolean boolean18 = pack200CompressorInputStream6.markSupported();
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 29L + "'", long9 == 29L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile3 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        long long10 = tarArchiveEntry6.getSize();
        java.io.InputStream inputStream11 = tarFile3.getInputStream(tarArchiveEntry6);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(inputStream11);
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream lZMACompressorInputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream((java.io.InputStream) pack200CompressorInputStream12, 26625);
        long long15 = lZMACompressorInputStream14.getCompressedCount();
        lZMACompressorInputStream14.close();
        lZMACompressorInputStream14.close();
        int int18 = lZMACompressorInputStream14.available();
        int int19 = lZMACompressorInputStream14.available();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = lZMACompressorInputStream14.read();
            org.junit.Assert.fail("Expected exception of type org.tukaani.xz.XZIOException; message: Stream closed");
        } catch (org.tukaani.xz.XZIOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 18L + "'", long15 == 18L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder1 = org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.createParameterBuilder(80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: windowSize must be a power of two");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream3 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters4 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters4.setWithZlibHeader(false);
        deflateParameters4.setWithZlibHeader(true);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream9 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) brotliCompressorInputStream3, deflateParameters4);
        brotliCompressorInputStream3.mark((int) (byte) 76);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = brotliCompressorInputStream3.skip(33639248L);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Brotli stream decoding failed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        int int5 = jarArchiveEntry1.getRawFlag();
        jarArchiveEntry1.setExternalAttributes((long) (byte) 51);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource8 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry1.setCommentSource(commentSource8);
        jarArchiveEntry1.setTime((long) 16);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path15 = tarArchiveEntry14.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path19 = tarArchiveEntry18.getPath();
        java.nio.file.attribute.FileTime fileTime20 = null;
        tarArchiveEntry18.setCreationTime(fileTime20);
        java.nio.file.attribute.FileTime fileTime22 = tarArchiveEntry18.getLastModifiedTime();
        tarArchiveEntry14.setLastAccessTime(fileTime22);
        boolean boolean24 = tarArchiveEntry14.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime25 = tarArchiveEntry14.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry26 = jarArchiveEntry1.setLastAccessTime(fileTime25);
        int int27 = jarArchiveEntry1.getVersionMadeBy();
        long long28 = jarArchiveEntry1.getTime();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry30 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField31 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry30.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField31);
        byte[] byteArray33 = jarArchiveEntry30.getCentralDirectoryExtra();
        int int34 = jarArchiveEntry30.getVersionMadeBy();
        java.lang.Object obj35 = jarArchiveEntry30.clone();
        boolean boolean36 = jarArchiveEntry30.isDirectory();
        long long37 = jarArchiveEntry30.getExternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode38 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS39 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger40 = x000A_NTFS39.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel41 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream42 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream44 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream42, strMap43);
        byte[] byteArray45 = new byte[] {};
        pack200CompressorOutputStream44.write(byteArray45);
        x000A_NTFS39.parseFromCentralDirectoryData(byteArray45, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort50 = x000A_NTFS39.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField51 = extraFieldParsingMode38.createExtraField(zipShort50);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField52 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray53 = unrecognizedExtraField52.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort54 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray55 = zipShort54.getBytes();
        java.lang.Object obj56 = zipShort54.clone();
        unrecognizedExtraField52.setHeaderId(zipShort54);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField58 = extraFieldParsingMode38.createExtraField(zipShort54);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong60 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray61 = zipLong60.getBytes();
        boolean boolean63 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray61, 32768);
        boolean boolean65 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray61, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode67 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray68 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray61, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode67);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock71 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray61, 488, (int) (short) 2);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField76 = extraFieldParsingMode38.onUnparseableExtraField(byteArray61, 0, 32768, false, (int) (byte) 54);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray77 = jarArchiveEntry30.getExtraFields((org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode38);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray78 = jarArchiveEntry1.getExtraFields((org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode38);
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + commentSource8 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD + "'", commentSource8.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNull(path15);
        org.junit.Assert.assertNull(path19);
        org.junit.Assert.assertNotNull(fileTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fileTime25);
        org.junit.Assert.assertNotNull(zipEntry26);
        org.junit.Assert.assertEquals(zipEntry26.toString(), "bzip2");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 16L + "'", long28 == 16L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "bzip2");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "bzip2");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "bzip2");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode38 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode38.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipEightByteInteger40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(zipShort50);
        org.junit.Assert.assertNotNull(zipExtraField51);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(zipShort54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[30, -95]");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "ZipShort value: 41246");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "ZipShort value: 41246");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "ZipShort value: 41246");
        org.junit.Assert.assertNotNull(zipExtraField58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode67 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode67.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray68);
        org.junit.Assert.assertNotNull(zipExtraField76);
        org.junit.Assert.assertNotNull(zipExtraFieldArray77);
        org.junit.Assert.assertNotNull(zipExtraFieldArray78);
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray5 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder6 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions7 = builder6.build();
        boolean boolean8 = sevenZFileOptions7.getTryToRecoverBrokenArchives();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile9 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, "apkm.gz", charArray5, sevenZFileOptions7);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(sevenZFileOptions7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT;
        archiveStreamFactory0.setEntryEncoding("data descriptor");
        java.nio.channels.SeekableByteChannel seekableByteChannel4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel4);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream5, strMap6);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date11 = cpioArchiveEntry10.getLastModifiedDate();
        cpioArchiveEntry10.setRemoteDeviceMin((long) 12);
        boolean boolean14 = zipArchiveOutputStream5.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry10);
        long long15 = zipArchiveOutputStream5.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters16 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters16.setWithZlibHeader(false);
        int int19 = deflateParameters16.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream20 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream5, deflateParameters16);
        deflateCompressorOutputStream20.flush();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream22 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) deflateCompressorOutputStream20);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream23 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) arArchiveOutputStream22);
        arArchiveOutputStream22.setLongFileMode(4096);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream27 = archiveStreamFactory0.createArchiveOutputStream("deflate", (java.io.OutputStream) arArchiveOutputStream22, "pack.effort");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: deflate not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(archiveStreamFactory0);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        long long1 = org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(2147483647);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 2147483647L + "'", long1 == 2147483647L);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp7 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.lang.Object obj8 = x5455_ExtendedTimestamp7.clone();
        byte[] byteArray9 = x5455_ExtendedTimestamp7.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding11 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("lz4-block");
        byte[] byteArray13 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean15 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray13, 3);
        java.lang.String str16 = zipEncoding11.decode(byteArray13);
        boolean boolean18 = zipEncoding11.canEncode("070702");
        boolean boolean20 = zipEncoding11.canEncode("unpack.deflate.hint");
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveEntry2.parseTarHeader(byteArray9, zipEncoding11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0]");
        org.junit.Assert.assertNotNull(zipEncoding11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "a\000" + "'", str16, "a\000");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory0 = org.apache.commons.compress.compressors.CompressorStreamFactory.getSingleton();
        java.util.Set<java.lang.String> strSet1 = compressorStreamFactory0.getInputStreamCompressorNames();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream2);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream7 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream3, 29, "070702");
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream8 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream7);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path12 = tarArchiveEntry11.getPath();
        java.nio.file.attribute.FileTime fileTime13 = null;
        tarArchiveEntry11.setCreationTime(fileTime13);
        int int15 = tarArchiveEntry11.getUserId();
        long long16 = tarArchiveEntry11.getRealSize();
        boolean boolean17 = tarArchiveEntry11.isBlockDevice();
        java.lang.String str18 = tarArchiveEntry11.getGroupName();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = tarArchiveEntry11.getExtraPaxHeaders();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream20 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) cpioArchiveInputStream7, strMap19);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream25 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) pack200CompressorInputStream20, "pack.unknown.attribute", false, false, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.CompressorInputStream compressorInputStream26 = compressorStreamFactory0.createCompressorInputStream((java.io.InputStream) zipArchiveInputStream25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compressorStreamFactory0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        boolean boolean4 = tarArchiveEntry2.isGlobalPaxHeader();
        boolean boolean5 = tarArchiveEntry2.isDirectory();
        tarArchiveEntry2.setModTime((long) 512);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort0 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray1 = zipShort0.getBytes();
        boolean boolean3 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray1, (int) 'a');
        org.apache.commons.compress.archivers.tar.TarFile tarFile4 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        int int1 = dumpArchiveEntry0.getNlink();
        long long2 = dumpArchiveEntry0.getOffset();
        boolean boolean3 = dumpArchiveEntry0.isFile();
        long long4 = dumpArchiveEntry0.getOffset();
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry5 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry5.setDeleted(false);
        dumpArchiveEntry5.setDeleted(false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path13 = tarArchiveEntry12.getPath();
        java.nio.file.attribute.FileTime fileTime14 = null;
        tarArchiveEntry12.setCreationTime(fileTime14);
        java.nio.file.attribute.FileTime fileTime16 = tarArchiveEntry12.getLastModifiedTime();
        tarArchiveEntry12.setNames(" \000", "UTF8");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path23 = tarArchiveEntry22.getPath();
        java.nio.file.attribute.FileTime fileTime24 = null;
        tarArchiveEntry22.setCreationTime(fileTime24);
        int int26 = tarArchiveEntry22.getUserId();
        java.util.Date date27 = tarArchiveEntry22.getModTime();
        tarArchiveEntry12.setModTime(date27);
        dumpArchiveEntry5.setCreationTime(date27);
        dumpArchiveEntry0.setLastModifiedDate(date27);
        dumpArchiveEntry0.setVolume(464);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNull(path13);
        org.junit.Assert.assertNotNull(fileTime16);
        org.junit.Assert.assertNull(path23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Mon Jun 19 23:21:04 CEST 2023");
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong2);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG;
        long long6 = zipLong5.getValue();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong5);
        boolean boolean8 = x5455_ExtendedTimestamp0.isBit0_modifyTimePresent();
        java.lang.Object obj9 = x5455_ExtendedTimestamp0.clone();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(zipLong5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 33639248L + "'", long6 == 33639248L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "0x5455 Zip Extra Field: Flags=1  Modify:[Mon Jan 25 09:14:08 CET 1971] ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "0x5455 Zip Extra Field: Flags=1  Modify:[Mon Jan 25 09:14:08 CET 1971] ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "0x5455 Zip Extra Field: Flags=1  Modify:[Mon Jan 25 09:14:08 CET 1971] ");
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference backReference2 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference(84446, 508);
        int int3 = backReference2.getLength();
        int int4 = backReference2.getLength();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 508 + "'", int3 == 508);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 508 + "'", int4 == 508);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray2 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray2);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile4 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel3);
        org.apache.commons.compress.archivers.tar.TarFile tarFile5 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel3);
        java.nio.file.Path path6 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create(".bz2.lzma", seekableByteChannel3, path6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: .bz2.lzma");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray2);
        org.junit.Assert.assertNotNull(seekableByteChannel3);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        boolean boolean3 = jarArchiveEntry1.isStreamContiguous();
        long long4 = jarArchiveEntry1.getDataOffset();
        boolean boolean5 = jarArchiveEntry1.isUnixSymlink();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS6 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger7 = x000A_NTFS6.getModifyTime();
        java.util.Date date8 = x000A_NTFS6.getCreateJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path12 = tarArchiveEntry11.getPath();
        java.nio.file.attribute.FileTime fileTime13 = null;
        tarArchiveEntry11.setCreationTime(fileTime13);
        int int15 = tarArchiveEntry11.getUserId();
        java.util.Date date16 = tarArchiveEntry11.getModTime();
        x000A_NTFS6.setCreateJavaTime(date16);
        java.util.Date date18 = x000A_NTFS6.getCreateJavaTime();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) x000A_NTFS6);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp20 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong22 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray23 = zipLong22.getBytes();
        x5455_ExtendedTimestamp20.setModifyTime(zipLong22);
        boolean boolean25 = x5455_ExtendedTimestamp20.isBit2_createTimePresent();
        byte[] byteArray26 = x5455_ExtendedTimestamp20.getLocalFileDataData();
        boolean boolean28 = org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byteArray26, 263);
        // The following exception was thrown during execution in test generation
        try {
            x000A_NTFS6.parseFromCentralDirectoryData(byteArray26, 54, (int) (byte) 49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 58");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger7);
        org.junit.Assert.assertNull(date8);
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Jun 19 23:21:05 CEST 2023");
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Mon Jun 19 23:21:05 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = x000A_NTFS0.getHeaderId();
        byte[] byteArray12 = x000A_NTFS0.getLocalFileDataData();
        boolean boolean14 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray12, 33188);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 148");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipShort11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        sevenZArchiveEntry0.setHasLastModifiedDate(false);
        boolean boolean5 = sevenZArchiveEntry0.getHasCrc();
        boolean boolean6 = sevenZArchiveEntry0.getHasCrc();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp7 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort8 = x5455_ExtendedTimestamp7.getLocalFileDataLength();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date12 = cpioArchiveEntry11.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong13 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date12);
        byte[] byteArray14 = zipLong13.getBytes();
        x5455_ExtendedTimestamp7.setModifyTime(zipLong13);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong16 = x5455_ExtendedTimestamp7.getCreateTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry19 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path20 = tarArchiveEntry19.getPath();
        java.nio.file.attribute.FileTime fileTime21 = null;
        tarArchiveEntry19.setCreationTime(fileTime21);
        int int23 = tarArchiveEntry19.getUserId();
        long long24 = tarArchiveEntry19.getRealSize();
        java.util.Date date25 = tarArchiveEntry19.getLastModifiedDate();
        boolean boolean26 = tarArchiveEntry19.isLink();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp27 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong29 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray30 = zipLong29.getBytes();
        x5455_ExtendedTimestamp27.setModifyTime(zipLong29);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry34 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path35 = tarArchiveEntry34.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry38 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path39 = tarArchiveEntry38.getPath();
        java.nio.file.attribute.FileTime fileTime40 = null;
        tarArchiveEntry38.setCreationTime(fileTime40);
        java.nio.file.attribute.FileTime fileTime42 = tarArchiveEntry38.getLastModifiedTime();
        tarArchiveEntry34.setLastAccessTime(fileTime42);
        x5455_ExtendedTimestamp27.setModifyFileTime(fileTime42);
        tarArchiveEntry19.setStatusChangeTime(fileTime42);
        x5455_ExtendedTimestamp7.setModifyFileTime(fileTime42);
        sevenZArchiveEntry0.setAccessTime(fileTime42);
        sevenZArchiveEntry0.setHasCreationDate(true);
        java.util.Date date50 = sevenZArchiveEntry0.getCreationDate();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zipShort8);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(zipLong13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 33, 0]");
        org.junit.Assert.assertNull(zipLong16);
        org.junit.Assert.assertNull(path20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Mon Jun 19 23:21:05 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNull(path35);
        org.junit.Assert.assertNull(path39);
        org.junit.Assert.assertNotNull(fileTime42);
        org.junit.Assert.assertNull(date50);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, (int) (short) 4, 512, "pass", false);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray9 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel10 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray9);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel10);
        char[] charArray18 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile19 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel10, charArray18);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder20 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions21 = builder20.build();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder23 = builder20.withMaxMemoryLimitInKb(4096);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions24 = builder20.build();
        boolean boolean25 = sevenZFileOptions24.getTryToRecoverBrokenArchives();
        boolean boolean26 = sevenZFileOptions24.getTryToRecoverBrokenArchives();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile27 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, "0x000A Zip Extra Field: Modify:[2023-06-19T21:19:55.787Z]  Access:[null]  Create:[null] ", charArray18, sevenZFileOptions24);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(seekableByteChannelArray9);
        org.junit.Assert.assertNotNull(seekableByteChannel10);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4, a,  , a, #, 4]");
        org.junit.Assert.assertNotNull(sevenZFileOptions21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(sevenZFileOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        int int5 = jarArchiveEntry1.getRawFlag();
        jarArchiveEntry1.setExternalAttributes((long) (byte) 51);
        java.lang.Object obj8 = jarArchiveEntry1.clone();
        jarArchiveEntry1.setSize((long) 345);
        jarArchiveEntry1.setVersionRequired((int) (short) 2);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp13 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong14 = x5455_ExtendedTimestamp13.getAccessTime();
        byte[] byteArray15 = x5455_ExtendedTimestamp13.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path19 = tarArchiveEntry18.getPath();
        java.nio.file.attribute.FileTime fileTime20 = null;
        tarArchiveEntry18.setCreationTime(fileTime20);
        java.nio.file.attribute.FileTime fileTime22 = tarArchiveEntry18.getLastModifiedTime();
        x5455_ExtendedTimestamp13.setAccessFileTime(fileTime22);
        java.util.zip.ZipEntry zipEntry24 = jarArchiveEntry1.setLastModifiedTime(fileTime22);
        jarArchiveEntry1.setDiskNumberStart((long) 512);
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "bzip2");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "bzip2");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "bzip2");
        org.junit.Assert.assertNull(zipLong14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0]");
        org.junit.Assert.assertNull(path19);
        org.junit.Assert.assertNotNull(fileTime22);
        org.junit.Assert.assertNotNull(zipEntry24);
        org.junit.Assert.assertEquals(zipEntry24.toString(), "bzip2");
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        int int10 = tarArchiveOutputStream6.getCount();
        tarArchiveOutputStream6.setBigNumberMode(4096);
        tarArchiveOutputStream6.setLongFileMode(0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference backReference2 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference((int) (byte) 88, (int) (byte) 100);
        java.lang.String str3 = backReference2.toString();
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType blockType4 = backReference2.getType();
        int int5 = backReference2.getOffset();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "BackReference with offset 88 and length 100" + "'", str3, "BackReference with offset 88 and length 100");
        org.junit.Assert.assertTrue("'" + blockType4 + "' != '" + org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.BACK_REFERENCE + "'", blockType4.equals(org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.BACK_REFERENCE));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 88 + "'", int5 == 88);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream3 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream2);
        long long4 = brotliCompressorInputStream3.getCompressedCount();
        java.lang.String str5 = brotliCompressorInputStream3.toString();
        java.lang.String str6 = brotliCompressorInputStream3.toString();
        java.lang.String str7 = brotliCompressorInputStream3.toString();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        deflateCompressorOutputStream16.flush();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream18 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) deflateCompressorOutputStream16);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream19 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) arArchiveOutputStream18);
        arArchiveOutputStream18.setLongFileMode(2147483647);
        java.nio.file.Path path22 = null;
        java.nio.file.LinkOption[] linkOptionArray24 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry25 = arArchiveOutputStream18.createArchiveEntry(path22, "\000\000", linkOptionArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(linkOptionArray24);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory2 = new org.apache.commons.compress.compressors.CompressorStreamFactory(true, 1024);
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.compressors.CompressorStreamProvider> strMap3 = compressorStreamFactory2.getCompressorInputStreamProviders();
        java.util.Set<java.lang.String> strSet4 = compressorStreamFactory2.getOutputStreamCompressorNames();
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode0 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS1 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger2 = x000A_NTFS1.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream4, strMap5);
        byte[] byteArray7 = new byte[] {};
        pack200CompressorOutputStream6.write(byteArray7);
        x000A_NTFS1.parseFromCentralDirectoryData(byteArray7, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = x000A_NTFS1.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = extraFieldParsingMode0.createExtraField(zipShort12);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField15 = extraFieldParsingMode0.createExtraField(zipShort14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode0 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode0.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipEightByteInteger2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(zipShort12);
        org.junit.Assert.assertNotNull(zipExtraField13);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream blockLZ4CompressorInputStream5 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
        int int6 = blockLZ4CompressorInputStream5.available();
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField10 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(3, false, 1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = resourceAlignmentExtraField10.getHeaderId();
        byte[] byteArray12 = resourceAlignmentExtraField10.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = blockLZ4CompressorInputStream5.read(byteArray12, (int) ' ', 12);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Premature end of stream while looking for next block");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(zipShort11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[3, 0]");
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        boolean boolean1 = org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename("lz4-block");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        boolean boolean3 = jarArchiveEntry1.isStreamContiguous();
        long long4 = jarArchiveEntry1.getDataOffset();
        boolean boolean5 = jarArchiveEntry1.isUnixSymlink();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS6 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger7 = x000A_NTFS6.getModifyTime();
        java.util.Date date8 = x000A_NTFS6.getCreateJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path12 = tarArchiveEntry11.getPath();
        java.nio.file.attribute.FileTime fileTime13 = null;
        tarArchiveEntry11.setCreationTime(fileTime13);
        int int15 = tarArchiveEntry11.getUserId();
        java.util.Date date16 = tarArchiveEntry11.getModTime();
        x000A_NTFS6.setCreateJavaTime(date16);
        java.util.Date date18 = x000A_NTFS6.getCreateJavaTime();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) x000A_NTFS6);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger20 = x000A_NTFS6.getModifyTime();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS21 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str22 = x000A_NTFS21.toString();
        java.lang.String str23 = x000A_NTFS21.toString();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger24 = x000A_NTFS21.getModifyTime();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField25 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray26 = zip64ExtendedInformationExtraField25.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS27 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger28 = x000A_NTFS27.getModifyTime();
        java.util.Date date29 = x000A_NTFS27.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger30 = x000A_NTFS27.getModifyTime();
        zip64ExtendedInformationExtraField25.setRelativeHeaderOffset(zipEightByteInteger30);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger32 = zip64ExtendedInformationExtraField25.getRelativeHeaderOffset();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry34 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long35 = jarArchiveEntry34.getCrc();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource36 = jarArchiveEntry34.getCommentSource();
        java.util.Date date37 = jarArchiveEntry34.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS38 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger39 = x000A_NTFS38.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel40 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream41 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel40);
        java.util.Map<java.lang.String, java.lang.String> strMap42 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream43 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream41, strMap42);
        byte[] byteArray44 = new byte[] {};
        pack200CompressorOutputStream43.write(byteArray44);
        x000A_NTFS38.parseFromCentralDirectoryData(byteArray44, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort49 = x000A_NTFS38.getHeaderId();
        byte[] byteArray50 = x000A_NTFS38.getLocalFileDataData();
        jarArchiveEntry34.setExtra(byteArray50);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong53 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray50, 0);
        java.lang.Object obj54 = zipLong53.clone();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField55 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger20, zipEightByteInteger24, zipEightByteInteger32, zipLong53);
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger7);
        org.junit.Assert.assertNull(date8);
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Jun 19 23:21:05 CEST 2023");
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Mon Jun 19 23:21:05 CEST 2023");
        org.junit.Assert.assertNotNull(zipEightByteInteger20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str22, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str23, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNotNull(zipEightByteInteger24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger28);
        org.junit.Assert.assertNull(date29);
        org.junit.Assert.assertNotNull(zipEightByteInteger30);
        org.junit.Assert.assertNotNull(zipEightByteInteger32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + commentSource36 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT + "'", commentSource36.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT));
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(zipEightByteInteger39);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(zipShort49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "ZipLong value: 0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "ZipLong value: 0");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "ZipLong value: 0");
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode1 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT;
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField2 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean8 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray6, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior10 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray6, false, extraFieldParsingBehavior10);
        boolean boolean13 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray6, 32768);
        unrecognizedExtraField2.setLocalFileDataData(byteArray6);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort15 = unrecognizedExtraField2.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort16 = unrecognizedExtraField2.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS17 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger18 = x000A_NTFS17.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel19 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream20, strMap21);
        byte[] byteArray23 = new byte[] {};
        pack200CompressorOutputStream22.write(byteArray23);
        x000A_NTFS17.parseFromCentralDirectoryData(byteArray23, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort28 = x000A_NTFS17.getHeaderId();
        byte[] byteArray29 = x000A_NTFS17.getLocalFileDataData();
        unrecognizedExtraField2.setLocalFileDataData(byteArray29);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort31 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray32 = zipShort31.getBytes();
        boolean boolean34 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray32, (int) 'a');
        org.apache.commons.compress.archivers.tar.TarFile tarFile35 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray32);
        unrecognizedExtraField2.setCentralDirectoryData(byteArray32);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField41 = extraFieldParsingMode1.onUnparseableExtraField(byteArray32, 424935705, (int) (short) 10, false, 16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField44 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField("pack.field.attribute.", byteArray32, (int) (byte) 48, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode1 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT + "'", extraFieldParsingMode1.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT));
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(zipShort15);
        org.junit.Assert.assertNotNull(zipShort16);
        org.junit.Assert.assertNotNull(zipEightByteInteger18);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(zipShort28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipShort31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(zipExtraField41);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder0 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder2 = builder0.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder4 = builder2.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder6 = builder2.withMinBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder8 = builder6.withMaxOffset((int) (byte) 48);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters9 = builder6.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(parameters9);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm1 = org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode(5);
        org.junit.Assert.assertNull(hashAlgorithm1);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile3 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        long long10 = tarArchiveEntry6.getSize();
        java.io.InputStream inputStream11 = tarFile3.getInputStream(tarArchiveEntry6);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(inputStream11);
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream lZMACompressorInputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream((java.io.InputStream) pack200CompressorInputStream12, 26625);
        long long15 = pack200CompressorInputStream12.getBytesRead();
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream16 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) pack200CompressorInputStream12);
        long long17 = deflate64CompressorInputStream16.getCompressedCount();
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        boolean boolean4 = tarArchiveEntry2.isCheckSumOK();
        tarArchiveEntry2.setSize(16L);
        int int7 = tarArchiveEntry2.getDevMinor();
        long long8 = tarArchiveEntry2.getRealSize();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 16L + "'", long8 == 16L);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory0 = new org.apache.commons.compress.compressors.CompressorStreamFactory();
        java.util.Set<java.lang.String> strSet1 = compressorStreamFactory0.getInputStreamCompressorNames();
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel3);
        long long5 = zipArchiveOutputStream4.getBytesWritten();
        zipArchiveOutputStream4.setEncoding("deflate64");
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream8 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.CompressorOutputStream compressorOutputStream9 = compressorStreamFactory0.createCompressorOutputStream("ZipEightByteInteger value: 0", (java.io.OutputStream) zipArchiveOutputStream4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.compressors.CompressorException; message: Compressor: ZipEightByteInteger value: 0 not found.");
        } catch (org.apache.commons.compress.compressors.CompressorException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray7 = zipShort6.getBytes();
        boolean boolean9 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray7, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray7, true);
        gzipCompressorOutputStream5.write(byteArray7);
        closeableConsumer0.accept((java.io.Closeable) gzipCompressorOutputStream5);
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters14 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters14.setDeflateStrategy((int) (short) 3);
        gzipParameters14.setComment("unpack.deflate.hint");
        gzipParameters14.setDeflateStrategy((int) (short) 0);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream21 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream5, gzipParameters14);
        int int22 = gzipParameters14.getBufferSize();
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 512 + "'", int22 == 512);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x5455_ExtendedTimestamp0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date5 = cpioArchiveEntry4.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong6 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date5);
        byte[] byteArray7 = zipLong6.getBytes();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong6);
        boolean boolean9 = x5455_ExtendedTimestamp0.isBit1_accessTimePresent();
        boolean boolean10 = x5455_ExtendedTimestamp0.isBit2_createTimePresent();
        byte[] byteArray11 = x5455_ExtendedTimestamp0.getLocalFileDataData();
        byte[] byteArray13 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) 7);
        boolean boolean15 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray13, 256);
        // The following exception was thrown during execution in test generation
        try {
            x5455_ExtendedTimestamp0.parseFromCentralDirectoryData(byteArray13, 488, 504);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 488");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(zipLong6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 33, 0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 0, 0, 33, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[7, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        asiExtraField0.setMode(5);
        asiExtraField0.setUserId(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit0 = new org.apache.commons.compress.archivers.zip.GeneralPurposeBit();
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime((long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            generalPurposeBit0.encode(byteArray2, 8192);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8192");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 33, 0]");
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, (int) (short) 4, 512, "pass", false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile9 = new org.apache.commons.compress.archivers.zip.ZipFile(seekableByteChannel1, "0x5455 Zip Extra Field: Flags=0 ");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 0x5455 Zip Extra Field: Flags=0 ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        zipArchiveOutputStream1.flush();
        boolean boolean5 = zipArchiveOutputStream1.isSeekable();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream blockLZ4CompressorInputStream5 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField6 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray7 = zip64ExtendedInformationExtraField6.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS8 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger9 = x000A_NTFS8.getModifyTime();
        java.util.Date date10 = x000A_NTFS8.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = x000A_NTFS8.getModifyTime();
        zip64ExtendedInformationExtraField6.setRelativeHeaderOffset(zipEightByteInteger11);
        byte[] byteArray13 = zipEightByteInteger11.getBytes();
        int int14 = zipArchiveInputStream1.read(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream framedLZ4CompressorInputStream16 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a LZ4 frame stream");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger9);
        org.junit.Assert.assertNull(date10);
        org.junit.Assert.assertNotNull(zipEightByteInteger11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6, "deflate64");
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10, "apkm");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry14 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData15 = jarArchiveEntry14.getUnparseableExtraFieldData();
        jarArchiveEntry14.setCompressedSize((long) 64);
        int int18 = jarArchiveEntry14.getRawFlag();
        jarArchiveEntry14.setMethod(9);
        java.io.InputStream inputStream21 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream22 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream21);
        zipArchiveInputStream22.mark((int) (byte) -1);
        long long26 = zipArchiveInputStream22.skip((long) 16877);
        java.nio.channels.SeekableByteChannel seekableByteChannel27 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream28 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream30 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream28, strMap29);
        byte[] byteArray31 = new byte[] {};
        pack200CompressorOutputStream30.write(byteArray31);
        int int35 = zipArchiveInputStream22.read(byteArray31, (int) (short) -1, (int) (byte) 50);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField37 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray38 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray31, false, unparseableExtraField37);
        jarArchiveEntry14.setExtraFields(zipExtraFieldArray38);
        jarArchiveEntry14.setVersionRequired(21);
        int int42 = jarArchiveEntry14.getMethod();
        boolean boolean43 = jarArchiveOutputStream10.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry14);
        long long44 = jarArchiveOutputStream10.getBytesWritten();
        jarArchiveOutputStream10.setFallbackToUTF8(false);
        org.junit.Assert.assertNull(unparseableExtraFieldData15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(zipExtraFieldArray38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setDeleted(false);
        dumpArchiveEntry0.setDeleted(false);
        int int5 = dumpArchiveEntry0.getVolume();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = dumpArchiveEntry0.isSparseRecord(2162688);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2162688");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        boolean boolean4 = tarArchiveEntry2.isGlobalPaxHeader();
        boolean boolean5 = tarArchiveEntry2.isDirectory();
        long long6 = tarArchiveEntry2.getLongGroupId();
        java.lang.String str7 = tarArchiveEntry2.getName();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "deflate64" + "'", str7, "deflate64");
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference backReference2 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.BackReference(84446, 508);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType blockType3 = backReference2.getType();
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType blockType4 = backReference2.getType();
        int int5 = backReference2.getOffset();
        int int6 = backReference2.getOffset();
        org.junit.Assert.assertTrue("'" + blockType3 + "' != '" + org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.BACK_REFERENCE + "'", blockType3.equals(org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.BACK_REFERENCE));
        org.junit.Assert.assertTrue("'" + blockType4 + "' != '" + org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.BACK_REFERENCE + "'", blockType4.equals(org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.BACK_REFERENCE));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 84446 + "'", int5 == 84446);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 84446 + "'", int6 == 84446);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray6 = zipShort5.getBytes();
        boolean boolean8 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray6, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray6, true);
        gzipCompressorOutputStream4.write(byteArray6);
        gzipCompressorOutputStream4.write((int) (short) 10);
        gzipCompressorOutputStream4.finish();
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        int int1 = gzipParameters0.getDeflateStrategy();
        java.lang.String str2 = gzipParameters0.getComment();
        gzipParameters0.setComment("pack200");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        int int1 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.chooseBlockSize(0L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 9 + "'", int1 == 9);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy3 = null;
        java.io.InputStream inputStream4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream4);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream5);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream5);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry8 = tarArchiveInputStream7.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream9 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream7);
        int int10 = deflateCompressorInputStream9.available();
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream12 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) deflateCompressorInputStream9, (int) (byte) 100);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer13 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap14 = packer13.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream15 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) cpioArchiveInputStream12, (java.util.Map<java.lang.String, java.lang.String>) strMap14);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream16 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, pack200Strategy3, (java.util.Map<java.lang.String, java.lang.String>) strMap14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertNull(tarArchiveEntry8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(packer13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        long long2 = zipArchiveOutputStream1.getBytesWritten();
        zipArchiveOutputStream1.setEncoding("deflate64");
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        arArchiveOutputStream5.setLongFileMode(65535);
        java.nio.file.Path path8 = null;
        java.nio.file.LinkOption[] linkOptionArray10 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry11 = arArchiveOutputStream5.createArchiveEntry(path8, "lz4-block.xz", linkOptionArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(linkOptionArray10);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder1 = org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream.createParameterBuilder(156);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: windowSize must be a power of two");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        byte[] byteArray5 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) '#');
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray5, true);
        // The following exception was thrown during execution in test generation
        try {
            sevenZOutputFile3.write(byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current 7z entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[35, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("deflate64");
        int int2 = cpioArchiveEntry1.getAlignmentBoundary();
        long long3 = cpioArchiveEntry1.getSize();
        cpioArchiveEntry1.setMode((long) 10240);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x5455_ExtendedTimestamp0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date5 = cpioArchiveEntry4.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong6 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date5);
        byte[] byteArray7 = zipLong6.getBytes();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong6);
        boolean boolean9 = x5455_ExtendedTimestamp0.isBit1_accessTimePresent();
        boolean boolean10 = x5455_ExtendedTimestamp0.isBit2_createTimePresent();
        byte[] byteArray11 = x5455_ExtendedTimestamp0.getLocalFileDataData();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry14 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long15 = jarArchiveEntry14.getCrc();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource16 = jarArchiveEntry14.getCommentSource();
        java.util.Date date17 = jarArchiveEntry14.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS18 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger19 = x000A_NTFS18.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel20 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream21 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream21, strMap22);
        byte[] byteArray24 = new byte[] {};
        pack200CompressorOutputStream23.write(byteArray24);
        x000A_NTFS18.parseFromCentralDirectoryData(byteArray24, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort29 = x000A_NTFS18.getHeaderId();
        byte[] byteArray30 = x000A_NTFS18.getLocalFileDataData();
        jarArchiveEntry14.setExtra(byteArray30);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS33 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger34 = x000A_NTFS33.getModifyTime();
        java.lang.String str35 = zipEightByteInteger34.toString();
        byte[] byteArray36 = zipEightByteInteger34.getBytes();
        byte[] byteArray37 = zipEightByteInteger34.getBytes();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField39 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW;
        int int40 = unparseableExtraField39.getKey();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray41 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray37, false, unparseableExtraField39);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray42 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray30, false, unparseableExtraField39);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray43 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray11, true, unparseableExtraField39);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: Bad extra field starting at 0.  Block length of 8448 bytes exceeds remaining data of 1 bytes.");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(zipLong6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 33, 0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 0, 0, 33, 0]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + commentSource16 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT + "'", commentSource16.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT));
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(zipEightByteInteger19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(zipShort29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipEightByteInteger34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZipEightByteInteger value: 0" + "'", str35, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(unparseableExtraField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray41);
        org.junit.Assert.assertNotNull(zipExtraFieldArray42);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setVolume((int) (byte) 120);
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry3 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry3.setVolume((int) (byte) 120);
        java.lang.String str6 = dumpArchiveEntry3.getSimpleName();
        java.nio.channels.SeekableByteChannel seekableByteChannel7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel7);
        java.lang.String str9 = zipArchiveOutputStream8.getEncoding();
        boolean boolean10 = zipArchiveOutputStream8.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry13 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date14 = cpioArchiveEntry13.getLastModifiedDate();
        cpioArchiveEntry13.setRemoteDeviceMaj((long) 'a');
        int int17 = cpioArchiveEntry13.getAlignmentBoundary();
        boolean boolean18 = zipArchiveOutputStream8.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry13);
        cpioArchiveEntry13.setDeviceMin((long) 26128);
        boolean boolean21 = cpioArchiveEntry13.isSocket();
        java.util.Date date22 = cpioArchiveEntry13.getLastModifiedDate();
        dumpArchiveEntry3.setAccessTime(date22);
        dumpArchiveEntry0.setLastModifiedDate(date22);
        java.lang.String str25 = dumpArchiveEntry0.getSimpleName();
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry26 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry29 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long30 = arArchiveEntry29.getLastModified();
        long long31 = arArchiveEntry29.getLength();
        java.util.Date date32 = arArchiveEntry29.getLastModifiedDate();
        dumpArchiveEntry26.setLastModifiedDate(date32);
        dumpArchiveEntry0.setLastModifiedDate(date32);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTF8" + "'", str9, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNull(str25);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1687209667L + "'", long30 == 1687209667L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 12L + "'", long31 == 12L);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Mon Jun 19 23:21:07 CEST 2023");
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.lang.String str4 = zipArchiveOutputStream3.getEncoding();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy5 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
        java.lang.String str6 = unicodeExtraFieldPolicy5.toString();
        zipArchiveOutputStream3.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy5);
        zipArchiveOutputStream1.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy5);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF8" + "'", str4, "UTF8");
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "never" + "'", str6, "never");
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream6 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize8 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder12 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder14 = builder12.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder16 = builder14.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters17 = builder16.build();
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters18 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize8, true, false, false, parameters17);
        int int19 = parameters17.getNiceBackReferenceLength();
        int int20 = parameters17.getMaxCandidates();
        org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream snappyCompressorOutputStream21 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream6, 18L, parameters17);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry23 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData24 = jarArchiveEntry23.getUnparseableExtraFieldData();
        boolean boolean25 = jarArchiveEntry23.isStreamContiguous();
        long long26 = jarArchiveEntry23.getDataOffset();
        boolean boolean27 = jarArchiveEntry23.isUnixSymlink();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS28 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger29 = x000A_NTFS28.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel30 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream31 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream33 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream31, strMap32);
        byte[] byteArray34 = new byte[] {};
        pack200CompressorOutputStream33.write(byteArray34);
        x000A_NTFS28.parseFromCentralDirectoryData(byteArray34, 64, 0);
        jarArchiveEntry23.setCentralDirectoryExtra(byteArray34);
        byte[] byteArray40 = jarArchiveEntry23.getLocalFileDataExtra();
        // The following exception was thrown during execution in test generation
        try {
            snappyCompressorOutputStream21.write(byteArray40, (int) 'a', 64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + blockSize8 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize8.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(parameters17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 512 + "'", int20 == 512);
        org.junit.Assert.assertNull(unparseableExtraFieldData24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger29);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker1 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        byte[] byteArray2 = jarMarker1.getCentralDirectoryData();
        byte[] byteArray3 = jarMarker1.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes((long) (byte) 55, byteArray3, 24576, (int) (short) 8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24581");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jarMarker1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField0 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray1 = unrecognizedExtraField0.getLocalFileDataData();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream3, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy6 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream8 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream3, pack200Strategy6, strMap7);
        long long9 = pack200CompressorInputStream8.getBytesRead();
        long long11 = pack200CompressorInputStream8.skip(1687209505L);
        int int12 = pack200CompressorInputStream8.available();
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean16 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray14, 3);
        boolean boolean18 = org.apache.commons.compress.compressors.xz.XZUtils.matches(byteArray14, (int) (short) 2);
        int int19 = pack200CompressorInputStream8.read(byteArray14);
        unrecognizedExtraField0.setCentralDirectoryData(byteArray14);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS22 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger23 = x000A_NTFS22.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel24 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream25 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel24);
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream27 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream25, strMap26);
        byte[] byteArray28 = new byte[] {};
        pack200CompressorOutputStream27.write(byteArray28);
        x000A_NTFS22.parseFromCentralDirectoryData(byteArray28, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort33 = x000A_NTFS22.getHeaderId();
        byte[] byteArray34 = x000A_NTFS22.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort35 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray34);
        int int38 = org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes("cpio", byteArray34, 4, 5);
        // The following exception was thrown during execution in test generation
        try {
            unrecognizedExtraField0.parseFromLocalFileData(byteArray34, 2162688, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(byteArray1);
        org.junit.Assert.assertNotNull(pack200Strategy6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 29L + "'", long11 == 29L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(zipEightByteInteger23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(zipShort33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 99, 112, 105, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        short short4 = cpioArchiveEntry2.getFormat();
        long long5 = cpioArchiveEntry2.getGID();
        int int6 = cpioArchiveEntry2.getAlignmentBoundary();
        boolean boolean7 = cpioArchiveEntry2.isSocket();
        int int8 = cpioArchiveEntry2.getHeaderPadCount();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 1 + "'", short4 == (short) 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime((long) 24576);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 0, 33, 0]");
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setLongFileMode((int) (byte) 120);
        tarArchiveOutputStream6.setLongFileMode((int) (short) 0);
        long long11 = tarArchiveOutputStream6.getBytesWritten();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        int int1 = gzipParameters0.getDeflateStrategy();
        gzipParameters0.setOperatingSystem((int) '4');
        gzipParameters0.setModificationTime((long) 65535);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean4 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray2, 3);
        boolean boolean6 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray2, (int) (byte) 53);
        long long9 = org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byteArray2, 1, 476);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField10 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField(".bz2", byteArray2);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding12 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("lz4-block");
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean16 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray14, 3);
        java.lang.String str17 = zipEncoding12.decode(byteArray14);
        boolean boolean19 = zipEncoding12.canEncode("070702");
        boolean boolean21 = zipEncoding12.canEncode("data descriptor");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray2, zipEncoding12, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(zipEncoding12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "a\000" + "'", str17, "a\000");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT;
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream2);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream3);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream5 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream4);
        long long6 = brotliCompressorInputStream5.getCompressedCount();
        java.lang.String str7 = brotliCompressorInputStream5.toString();
        long long8 = brotliCompressorInputStream5.getCompressedCount();
        brotliCompressorInputStream5.mark(128);
        brotliCompressorInputStream5.mark(263);
        int int13 = brotliCompressorInputStream5.available();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 11 kb. If the file is not corrupt, consider increasing the memory limit.", (java.io.InputStream) brotliCompressorInputStream5, "lz4-framed");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 11 kb. If the file is not corrupt, consider increasing the memory limit. not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(archiveStreamFactory0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        byte[] byteArray1 = x7875_NewUnix0.getCentralDirectoryData();
        long long2 = x7875_NewUnix0.getUID();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = x7875_NewUnix0.getLocalFileDataLength();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1000L + "'", long2 == 1000L);
        org.junit.Assert.assertNotNull(zipShort3);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        bZip2CompressorOutputStream5.finish();
        bZip2CompressorOutputStream5.flush();
        int int8 = bZip2CompressorOutputStream5.getBlockSize();
        // The following exception was thrown during execution in test generation
        try {
            bZip2CompressorOutputStream5.write(26121);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        char[] charArray10 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile11 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2, charArray10);
        java.nio.file.Path path12 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create(sevenZOutputFile11, path12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  , a, #, 4]");
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField1 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        byte[] byteArray2 = resourceAlignmentExtraField1.getLocalFileDataData();
        byte[] byteArray3 = resourceAlignmentExtraField1.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(100L, byteArray3, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0]");
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile3 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        long long10 = tarArchiveEntry6.getSize();
        java.io.InputStream inputStream11 = tarFile3.getInputStream(tarArchiveEntry6);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(inputStream11);
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream lZMACompressorInputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream((java.io.InputStream) pack200CompressorInputStream12, 26625);
        long long15 = lZMACompressorInputStream14.getCompressedCount();
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream16 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) lZMACompressorInputStream14);
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 18L + "'", long15 == 18L);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry3 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long4 = arArchiveEntry3.getLastModified();
        long long5 = arArchiveEntry3.getLength();
        java.util.Date date6 = arArchiveEntry3.getLastModifiedDate();
        dumpArchiveEntry0.setLastModifiedDate(date6);
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE tYPE8 = dumpArchiveEntry0.getType();
        boolean boolean9 = dumpArchiveEntry0.isChrDev();
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet10 = dumpArchiveEntry0.getPermissions();
        dumpArchiveEntry0.setDeleted(false);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1687209668L + "'", long4 == 1687209668L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 12L + "'", long5 == 12L);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Jun 19 23:21:08 CEST 2023");
        org.junit.Assert.assertTrue("'" + tYPE8 + "' != '" + org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN + "'", tYPE8.equals(org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(pERMISSIONSet10);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str1 = x000A_NTFS0.toString();
        java.lang.String str2 = x000A_NTFS0.toString();
        java.lang.String str3 = x000A_NTFS0.toString();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.lang.String str8 = tarArchiveEntry6.getName();
        boolean boolean9 = tarArchiveEntry6.isFile();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp10 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong11 = x5455_ExtendedTimestamp10.getAccessTime();
        byte[] byteArray12 = x5455_ExtendedTimestamp10.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry15 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path16 = tarArchiveEntry15.getPath();
        java.nio.file.attribute.FileTime fileTime17 = null;
        tarArchiveEntry15.setCreationTime(fileTime17);
        java.nio.file.attribute.FileTime fileTime19 = tarArchiveEntry15.getLastModifiedTime();
        x5455_ExtendedTimestamp10.setAccessFileTime(fileTime19);
        tarArchiveEntry6.setLastModifiedTime(fileTime19);
        x000A_NTFS0.setModifyFileTime(fileTime19);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort23 = x000A_NTFS0.getLocalFileDataLength();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str1, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str2, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str3, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deflate64" + "'", str8, "deflate64");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(zipLong11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0]");
        org.junit.Assert.assertNull(path16);
        org.junit.Assert.assertNotNull(fileTime19);
        org.junit.Assert.assertNotNull(zipShort23);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        java.io.File file0 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path4 = tarArchiveEntry3.getPath();
        java.nio.file.attribute.FileTime fileTime5 = null;
        tarArchiveEntry3.setCreationTime(fileTime5);
        java.lang.String str8 = tarArchiveEntry3.getExtraPaxHeader("xz");
        boolean boolean9 = tarArchiveEntry3.isExtended();
        tarArchiveEntry3.setDevMajor((int) (byte) 49);
        boolean boolean12 = tarArchiveEntry3.isFIFO();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = tarArchiveEntry3.getExtraPaxHeaders();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(file0, strMap13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path4);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy5 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream4, pack200Strategy5);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream8 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream4, true);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) jarArchiveInputStream4, 64);
        org.junit.Assert.assertNotNull(pack200Strategy5);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        boolean boolean1 = org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(".bz2.lzma");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setCrcValue(1687209545L);
        sevenZArchiveEntry0.setAccessDate(16L);
        sevenZArchiveEntry0.setHasLastModifiedDate(true);
        boolean boolean7 = sevenZArchiveEntry0.hasStream();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = x5455_ExtendedTimestamp0.getAccessTime();
        byte[] byteArray2 = x5455_ExtendedTimestamp0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path6 = tarArchiveEntry5.getPath();
        java.nio.file.attribute.FileTime fileTime7 = null;
        tarArchiveEntry5.setCreationTime(fileTime7);
        java.nio.file.attribute.FileTime fileTime9 = tarArchiveEntry5.getLastModifiedTime();
        x5455_ExtendedTimestamp0.setAccessFileTime(fileTime9);
        boolean boolean11 = x5455_ExtendedTimestamp0.isBit1_accessTimePresent();
        boolean boolean12 = x5455_ExtendedTimestamp0.isBit1_accessTimePresent();
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix13 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        byte[] byteArray14 = x7875_NewUnix13.getCentralDirectoryData();
        x7875_NewUnix13.setGID(1687209559L);
        byte[] byteArray18 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean20 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray18, 3);
        boolean boolean22 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray18, 3);
        boolean boolean24 = org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byteArray18, 511);
        x7875_NewUnix13.parseFromCentralDirectoryData(byteArray18, 2147483647, 0);
        boolean boolean29 = org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byteArray18, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            x5455_ExtendedTimestamp0.parseFromLocalFileData(byteArray18, 0, 65535);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(zipLong1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNull(path6);
        org.junit.Assert.assertNotNull(fileTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        int int5 = jarArchiveEntry1.getRawFlag();
        jarArchiveEntry1.setExternalAttributes((long) (byte) 51);
        byte[] byteArray9 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean11 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray9, 3);
        boolean boolean13 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray9, 3);
        jarArchiveEntry1.setExtra(byteArray9);
        java.nio.file.attribute.FileTime fileTime15 = jarArchiveEntry1.getLastModifiedTime();
        long long16 = jarArchiveEntry1.getSize();
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(fileTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        long long3 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature4 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        java.lang.String str5 = feature4.toString();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry7 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long8 = jarArchiveEntry7.getDataOffset();
        byte[] byteArray9 = jarArchiveEntry7.getRawName();
        jarArchiveEntry7.setInternalAttributes(1024);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException12 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature4, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry7);
        byte[] byteArray13 = jarArchiveEntry7.getRawName();
        int int14 = jarArchiveEntry7.getPlatform();
        java.io.InputStream inputStream15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream15);
        zipArchiveInputStream16.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream20 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream16, 488);
        tarArchiveInputStream20.mark(257);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = tarArchiveInputStream20.getNextTarEntry();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry24 = tarArchiveInputStream20.getNextTarEntry();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.addRawArchiveEntry((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry7, (java.io.InputStream) tarArchiveInputStream20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(feature4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "data descriptor" + "'", str5, "data descriptor");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(tarArchiveEntry23);
        org.junit.Assert.assertNull(tarArchiveEntry24);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setVolume((int) (byte) 120);
        java.lang.String str3 = dumpArchiveEntry0.getSimpleName();
        dumpArchiveEntry0.setUserId(11);
        dumpArchiveEntry0.setOffset(0L);
        int int8 = dumpArchiveEntry0.getHeaderCount();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        long long12 = cpioArchiveEntry11.getMode();
        cpioArchiveEntry11.setSize((long) (short) 2);
        cpioArchiveEntry11.setDeviceMaj((long) (-1));
        boolean boolean17 = cpioArchiveEntry11.isBlockDevice();
        boolean boolean18 = dumpArchiveEntry0.equals((java.lang.Object) cpioArchiveEntry11);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32768L + "'", long12 == 32768L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        java.lang.String str1 = org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename("org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 26128 kb. If the file is not corrupt, consider increasing the memory limit.");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 26128 kb. If the file is not corrupt, consider increasing the memory limit." + "'", str1, "org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 26128 kb. If the file is not corrupt, consider increasing the memory limit.");
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2);
        arArchiveOutputStream5.finish();
        arArchiveOutputStream5.setLongFileMode(96);
        arArchiveOutputStream5.setLongFileMode(4095);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry13 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        int int14 = cpioArchiveEntry13.getHeaderPadCount();
        // The following exception was thrown during execution in test generation
        try {
            arArchiveOutputStream5.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry13);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature0 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        java.lang.String str1 = feature0.toString();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry3 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long4 = jarArchiveEntry3.getDataOffset();
        byte[] byteArray5 = jarArchiveEntry3.getRawName();
        jarArchiveEntry3.setInternalAttributes(1024);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException8 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature0, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry3);
        byte[] byteArray9 = jarArchiveEntry3.getRawName();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry10 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(feature0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "data descriptor" + "'", str1, "data descriptor");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(byteArray5);
        org.junit.Assert.assertNull(byteArray9);
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        java.io.InputStream inputStream5 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream5);
        zipArchiveInputStream6.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream9 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream6);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy10 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream11 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream9, pack200Strategy10);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) pack200CompressorInputStream11, "pack200", false, false);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField16 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong18 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray19 = zipLong18.getBytes();
        boolean boolean21 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray19, 32768);
        boolean boolean23 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray19, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode25 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray19, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode25);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock29 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray19, 488, (int) (short) 2);
        unicodePathExtraField16.setUnicodeName(byteArray19);
        int int33 = zipArchiveInputStream15.read(byteArray19, 32, 24576);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream4.write(byteArray19, 84446, 26121);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(pack200Strategy10);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode25 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode25.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = new org.apache.commons.compress.archivers.zip.ZipLong(1020L);
        int int2 = zipLong1.getIntValue();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1020 + "'", int2 == 1020);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        tarArchiveEntry5.setGroupId((long) (short) 2);
        int int8 = tarArchiveEntry5.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path12 = tarArchiveEntry11.getPath();
        java.lang.String str13 = tarArchiveEntry11.getName();
        boolean boolean14 = tarArchiveEntry11.isFile();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp15 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong16 = x5455_ExtendedTimestamp15.getAccessTime();
        byte[] byteArray17 = x5455_ExtendedTimestamp15.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry20 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path21 = tarArchiveEntry20.getPath();
        java.nio.file.attribute.FileTime fileTime22 = null;
        tarArchiveEntry20.setCreationTime(fileTime22);
        java.nio.file.attribute.FileTime fileTime24 = tarArchiveEntry20.getLastModifiedTime();
        x5455_ExtendedTimestamp15.setAccessFileTime(fileTime24);
        tarArchiveEntry11.setLastModifiedTime(fileTime24);
        tarArchiveEntry5.setLastModifiedTime(fileTime24);
        // The following exception was thrown during execution in test generation
        try {
            sevenZOutputFile3.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "deflate64" + "'", str13, "deflate64");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(zipLong16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0]");
        org.junit.Assert.assertNull(path21);
        org.junit.Assert.assertNotNull(fileTime24);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        int int0 = org.apache.commons.compress.archivers.dump.DumpArchiveConstants.OFS_MAGIC;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 60011 + "'", int0 == 60011);
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory1 = new org.apache.commons.compress.compressors.CompressorStreamFactory(false);
        java.io.InputStream inputStream3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream3);
        zipArchiveInputStream4.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream7 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream4);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy8 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream9 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream7, pack200Strategy8);
        org.apache.commons.compress.compressors.CompressorInputStream compressorInputStream11 = compressorStreamFactory1.createCompressorInputStream("zstd", (java.io.InputStream) pack200CompressorInputStream9, false);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) compressorInputStream11, "xz", false);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) compressorInputStream11);
        org.junit.Assert.assertNotNull(pack200Strategy8);
        org.junit.Assert.assertNotNull(compressorInputStream11);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        boolean boolean3 = jarArchiveEntry1.isStreamContiguous();
        long long4 = jarArchiveEntry1.getDataOffset();
        boolean boolean5 = jarArchiveEntry1.isUnixSymlink();
        byte[] byteArray6 = jarArchiveEntry1.getExtra();
        jarArchiveEntry1.setTime((long) 32772);
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(byteArray6);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = x5455_ExtendedTimestamp0.getAccessTime();
        byte[] byteArray2 = x5455_ExtendedTimestamp0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path6 = tarArchiveEntry5.getPath();
        java.nio.file.attribute.FileTime fileTime7 = null;
        tarArchiveEntry5.setCreationTime(fileTime7);
        java.nio.file.attribute.FileTime fileTime9 = tarArchiveEntry5.getLastModifiedTime();
        x5455_ExtendedTimestamp0.setAccessFileTime(fileTime9);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry12 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long13 = jarArchiveEntry12.getCrc();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource14 = jarArchiveEntry12.getCommentSource();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        tarArchiveEntry16.setGroupId((long) (short) 2);
        int int19 = tarArchiveEntry16.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path23 = tarArchiveEntry22.getPath();
        java.lang.String str24 = tarArchiveEntry22.getName();
        boolean boolean25 = tarArchiveEntry22.isFile();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp26 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong27 = x5455_ExtendedTimestamp26.getAccessTime();
        byte[] byteArray28 = x5455_ExtendedTimestamp26.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry31 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path32 = tarArchiveEntry31.getPath();
        java.nio.file.attribute.FileTime fileTime33 = null;
        tarArchiveEntry31.setCreationTime(fileTime33);
        java.nio.file.attribute.FileTime fileTime35 = tarArchiveEntry31.getLastModifiedTime();
        x5455_ExtendedTimestamp26.setAccessFileTime(fileTime35);
        tarArchiveEntry22.setLastModifiedTime(fileTime35);
        tarArchiveEntry16.setLastModifiedTime(fileTime35);
        java.util.zip.ZipEntry zipEntry39 = jarArchiveEntry12.setCreationTime(fileTime35);
        x5455_ExtendedTimestamp0.setAccessFileTime(fileTime35);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry43 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.attribute.FileTime fileTime44 = tarArchiveEntry43.getLastModifiedTime();
        x5455_ExtendedTimestamp0.setAccessFileTime(fileTime44);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry47 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData48 = jarArchiveEntry47.getUnparseableExtraFieldData();
        jarArchiveEntry47.setCompressedSize((long) 64);
        int int51 = jarArchiveEntry47.getRawFlag();
        jarArchiveEntry47.setExternalAttributes((long) (byte) 51);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource54 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry47.setCommentSource(commentSource54);
        jarArchiveEntry47.setTime((long) 16);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry60 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path61 = tarArchiveEntry60.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry64 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path65 = tarArchiveEntry64.getPath();
        java.nio.file.attribute.FileTime fileTime66 = null;
        tarArchiveEntry64.setCreationTime(fileTime66);
        java.nio.file.attribute.FileTime fileTime68 = tarArchiveEntry64.getLastModifiedTime();
        tarArchiveEntry60.setLastAccessTime(fileTime68);
        boolean boolean70 = tarArchiveEntry60.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime71 = tarArchiveEntry60.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry72 = jarArchiveEntry47.setLastAccessTime(fileTime71);
        x5455_ExtendedTimestamp0.setModifyFileTime(fileTime71);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry75 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField76 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry75.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField76);
        byte[] byteArray78 = jarArchiveEntry75.getCentralDirectoryExtra();
        long long79 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            x5455_ExtendedTimestamp0.parseFromLocalFileData(byteArray78, 4096, 0);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: X5455_ExtendedTimestamp too short, only 0 bytes");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(zipLong1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNull(path6);
        org.junit.Assert.assertNotNull(fileTime9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + commentSource14 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT + "'", commentSource14.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNull(path23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "deflate64" + "'", str24, "deflate64");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(zipLong27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0]");
        org.junit.Assert.assertNull(path32);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry39);
        org.junit.Assert.assertEquals(zipEntry39.toString(), "bzip2");
        org.junit.Assert.assertNotNull(fileTime44);
        org.junit.Assert.assertNull(unparseableExtraFieldData48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + commentSource54 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD + "'", commentSource54.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNull(path61);
        org.junit.Assert.assertNull(path65);
        org.junit.Assert.assertNotNull(fileTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(fileTime71);
        org.junit.Assert.assertNotNull(zipEntry72);
        org.junit.Assert.assertEquals(zipEntry72.toString(), "bzip2");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 172318L + "'", long79 == 172318L);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray2 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray2);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel3);
        org.apache.commons.compress.archivers.tar.TarFile tarFile9 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel3, (int) (short) 4, 512, "pass", false);
        java.nio.file.Path path10 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 11 kb. If the file is not corrupt, consider increasing the memory limit.", seekableByteChannel3, path10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 11 kb. If the file is not corrupt, consider increasing the memory limit.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray2);
        org.junit.Assert.assertNotNull(seekableByteChannel3);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        long long5 = zipArchiveInputStream1.skip((long) 16877);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = zipArchiveInputStream1.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        int int7 = pack200CompressorInputStream6.read();
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream8);
        zipArchiveInputStream9.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream9);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy13 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream12, pack200Strategy13);
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream16, strMap17);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream19 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream18);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer20 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap21 = packer20.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream19, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, pack200Strategy13, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer24 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap25 = packer24.properties();
        org.apache.commons.compress.compressors.FileNameUtil fileNameUtil27 = new org.apache.commons.compress.compressors.FileNameUtil((java.util.Map<java.lang.String, java.lang.String>) strMap25, ".lzma");
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream28 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, (java.util.Map<java.lang.String, java.lang.String>) strMap25);
        boolean boolean29 = pack200CompressorInputStream28.markSupported();
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 80 + "'", int7 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy13);
        org.junit.Assert.assertNotNull(packer20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(packer24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setVolume((int) (byte) 120);
        java.lang.String str3 = dumpArchiveEntry0.getSimpleName();
        java.nio.channels.SeekableByteChannel seekableByteChannel4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        boolean boolean7 = zipArchiveOutputStream5.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date11 = cpioArchiveEntry10.getLastModifiedDate();
        cpioArchiveEntry10.setRemoteDeviceMaj((long) 'a');
        int int14 = cpioArchiveEntry10.getAlignmentBoundary();
        boolean boolean15 = zipArchiveOutputStream5.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry10);
        cpioArchiveEntry10.setDeviceMin((long) 26128);
        boolean boolean18 = cpioArchiveEntry10.isSocket();
        java.util.Date date19 = cpioArchiveEntry10.getLastModifiedDate();
        dumpArchiveEntry0.setAccessTime(date19);
        java.lang.String str21 = dumpArchiveEntry0.toString();
        java.util.Date date22 = dumpArchiveEntry0.getAccessTime();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        short short4 = cpioArchiveEntry2.getFormat();
        long long5 = cpioArchiveEntry2.getGID();
        int int6 = cpioArchiveEntry2.getAlignmentBoundary();
        cpioArchiveEntry2.setSize((long) 32768);
        boolean boolean9 = cpioArchiveEntry2.isPipe();
        cpioArchiveEntry2.setTime(172318L);
        long long12 = cpioArchiveEntry2.getSize();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 1 + "'", short4 == (short) 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 32768L + "'", long12 == 32768L);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("a\000");
        long long2 = zipArchiveEntry1.getCrc();
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField3 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = resourceAlignmentExtraField3.getCentralDirectoryLength();
        byte[] byteArray5 = zipShort4.getBytes();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = zipArchiveEntry1.getExtraField(zipShort4);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[2, 0]");
        org.junit.Assert.assertNull(zipExtraField6);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray2 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray2);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile4 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel3);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel3);
        char[] charArray6 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile7 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel3, charArray6);
        org.apache.commons.compress.archivers.tar.TarFile tarFile8 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel3);
        org.apache.commons.compress.archivers.tar.TarFile tarFile9 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel3);
        java.nio.file.Path path10 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 4.", seekableByteChannel3, path10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 4.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray2);
        org.junit.Assert.assertNotNull(seekableByteChannel3);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        int int6 = deflateCompressorInputStream5.available();
        int int7 = deflateCompressorInputStream5.available();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream8 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) deflateCompressorInputStream5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream snappyCompressorInputStream10 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream((java.io.InputStream) deflateCompressorInputStream8, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        boolean boolean3 = jarArchiveEntry1.isStreamContiguous();
        long long4 = jarArchiveEntry1.getDataOffset();
        boolean boolean5 = jarArchiveEntry1.isUnixSymlink();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS6 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger7 = x000A_NTFS6.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream11 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream9, strMap10);
        byte[] byteArray12 = new byte[] {};
        pack200CompressorOutputStream11.write(byteArray12);
        x000A_NTFS6.parseFromCentralDirectoryData(byteArray12, 64, 0);
        jarArchiveEntry1.setCentralDirectoryExtra(byteArray12);
        byte[] byteArray18 = jarArchiveEntry1.getRawName();
        jarArchiveEntry1.setVersionMadeBy(476);
        long long21 = jarArchiveEntry1.getDataOffset();
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray7 = zipShort6.getBytes();
        boolean boolean9 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray7, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray7, true);
        gzipCompressorOutputStream5.write(byteArray7);
        closeableConsumer0.accept((java.io.Closeable) gzipCompressorOutputStream5);
        org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream lZMACompressorOutputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) gzipCompressorOutputStream5, (short) (byte) 75, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 75");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator3 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier2.get();
        java.util.concurrent.ExecutorService executorService5 = null;
        java.nio.file.Path path6 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier7 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path6);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator8 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService5, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier7);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore9 = defaultBackingStoreSupplier7.get();
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore10 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore11 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor12 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore11);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream13 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore10, streamCompressor12);
        long long14 = streamCompressor12.getTotalBytesWritten();
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream15 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore9, streamCompressor12);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream16 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore4, streamCompressor12);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter zipEntryWriter17 = scatterZipOutputStream16.zipEntryWriter();
        scatterZipOutputStream16.close();
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore9);
        org.junit.Assert.assertNotNull(streamCompressor12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(zipEntryWriter17);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT;
        archiveStreamFactory0.setEntryEncoding("data descriptor");
        java.nio.channels.SeekableByteChannel seekableByteChannel4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel4);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream5, strMap6);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream8 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream7);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream7, "snappy-framed");
        tarArchiveOutputStream10.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream14 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream10, "deflate64");
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream14);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream17 = archiveStreamFactory0.createArchiveOutputStream("jar", (java.io.OutputStream) jarArchiveOutputStream15, "error");
        archiveOutputStream17.flush();
        // The following exception was thrown during execution in test generation
        try {
            archiveOutputStream17.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(archiveStreamFactory0);
        org.junit.Assert.assertNotNull(archiveOutputStream17);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField0 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = null;
        unrecognizedExtraField0.setHeaderId(zipShort1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = unrecognizedExtraField0.getCentralDirectoryLength();
        int int4 = zipShort3.getValue();
        java.lang.Object obj5 = null;
        boolean boolean6 = zipShort3.equals(obj5);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = x5455_ExtendedTimestamp0.getAccessTime();
        byte[] byteArray2 = x5455_ExtendedTimestamp0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path6 = tarArchiveEntry5.getPath();
        java.nio.file.attribute.FileTime fileTime7 = null;
        tarArchiveEntry5.setCreationTime(fileTime7);
        java.nio.file.attribute.FileTime fileTime9 = tarArchiveEntry5.getLastModifiedTime();
        x5455_ExtendedTimestamp0.setAccessFileTime(fileTime9);
        boolean boolean11 = x5455_ExtendedTimestamp0.isBit1_accessTimePresent();
        byte byte12 = x5455_ExtendedTimestamp0.getFlags();
        org.junit.Assert.assertNull(zipLong1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNull(path6);
        org.junit.Assert.assertNotNull(fileTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 2 + "'", byte12 == (byte) 2);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy3 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
        java.lang.String str4 = unicodeExtraFieldPolicy3.toString();
        zipArchiveOutputStream1.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy3);
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry6 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        boolean boolean7 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) arjArchiveEntry6);
        java.nio.file.Path path8 = null;
        java.nio.file.LinkOption linkOption10 = null;
        java.nio.file.LinkOption[] linkOptionArray11 = new java.nio.file.LinkOption[] { linkOption10 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry12 = zipArchiveOutputStream1.createArchiveEntry(path8, "BackReference with offset 88 and length 100", linkOptionArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "never" + "'", str4, "never");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(linkOptionArray11);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        org.apache.commons.compress.compressors.lz4.XXHash32 xXHash32_1 = new org.apache.commons.compress.compressors.lz4.XXHash32(464);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry3 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long4 = jarArchiveEntry3.getCrc();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource5 = jarArchiveEntry3.getCommentSource();
        java.util.Date date6 = jarArchiveEntry3.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS7 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = x000A_NTFS7.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel9 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel9);
        java.util.Map<java.lang.String, java.lang.String> strMap11 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream10, strMap11);
        byte[] byteArray13 = new byte[] {};
        pack200CompressorOutputStream12.write(byteArray13);
        x000A_NTFS7.parseFromCentralDirectoryData(byteArray13, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort18 = x000A_NTFS7.getHeaderId();
        byte[] byteArray19 = x000A_NTFS7.getLocalFileDataData();
        jarArchiveEntry3.setExtra(byteArray19);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS22 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger23 = x000A_NTFS22.getModifyTime();
        java.lang.String str24 = zipEightByteInteger23.toString();
        byte[] byteArray25 = zipEightByteInteger23.getBytes();
        byte[] byteArray26 = zipEightByteInteger23.getBytes();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField28 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW;
        int int29 = unparseableExtraField28.getKey();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray30 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray26, false, unparseableExtraField28);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray31 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray19, false, unparseableExtraField28);
        // The following exception was thrown during execution in test generation
        try {
            xXHash32_1.update(byteArray19, 33188, (int) (byte) 75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 33188");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + commentSource5 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT + "'", commentSource5.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT));
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(zipEightByteInteger8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(zipShort18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipEightByteInteger23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ZipEightByteInteger value: 0" + "'", str24, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(unparseableExtraField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(zipExtraFieldArray30);
        org.junit.Assert.assertNotNull(zipExtraFieldArray31);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        int int6 = deflateCompressorInputStream5.available();
        int int7 = deflateCompressorInputStream5.available();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream8 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) deflateCompressorInputStream5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.dump.DumpArchiveInputStream dumpArchiveInputStream10 = new org.apache.commons.compress.archivers.dump.DumpArchiveInputStream((java.io.InputStream) deflateCompressorInputStream8, "070702");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 488);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream5);
        long long7 = tarArchiveInputStream5.getBytesRead();
        tarArchiveInputStream5.close();
        tarArchiveInputStream5.close();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry10 = tarArchiveInputStream5.getNextTarEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: The stream is closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        long long3 = cpioArchiveEntry2.getSize();
        boolean boolean4 = cpioArchiveEntry2.isDirectory();
        boolean boolean5 = cpioArchiveEntry2.isPipe();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 52L + "'", long3 == 52L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        char[] charArray10 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile11 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2, charArray10);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile12 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarFile tarFile13 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarFile tarFile14 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel2);
        java.io.File file15 = null;
        expander0.expand(tarFile14, file15);
        java.io.InputStream inputStream18 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream18);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream20 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream19);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream20, true);
        arArchiveInputStream20.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream26 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream20, (int) '#', 257);
        java.io.File file27 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("7z", (java.io.InputStream) arArchiveInputStream20, file27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.StreamingNotSupportedException; message: The 7z doesn't support streaming.");
        } catch (org.apache.commons.compress.archivers.StreamingNotSupportedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  , a, #, 4]");
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters3 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        boolean boolean4 = deflateParameters3.withZlibHeader();
        deflateParameters3.setCompressionLevel(8);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream7 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) zipArchiveInputStream1, deflateParameters3);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = deflateCompressorInputStream7.read();
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Unexpected end of ZLIB input stream");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.compressors.snappy.FramedSnappyDialect framedSnappyDialect2 = org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE;
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream3 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream(inputStream0, framedSnappyDialect2);
        int int4 = framedSnappyCompressorInputStream3.available();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) framedSnappyCompressorInputStream3, 6, "pack.segment.limit");
        long long8 = framedSnappyCompressorInputStream3.getCompressedCount();
        org.junit.Assert.assertTrue("'" + framedSnappyDialect2 + "' != '" + org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE + "'", framedSnappyDialect2.equals(org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder0 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder2 = builder0.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder4 = builder2.withLazyThreshold(6);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder5 = builder2.tunedForCompressionRatio();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder6 = builder2.tunedForSpeed();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray7 = zipShort6.getBytes();
        boolean boolean9 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray7, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray7, true);
        gzipCompressorOutputStream5.write(byteArray7);
        closeableConsumer0.accept((java.io.Closeable) gzipCompressorOutputStream5);
        org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream lZMACompressorOutputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream5);
        lZMACompressorOutputStream14.write((int) (byte) 49);
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        char[] charArray5 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile6 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2, charArray5);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarFile tarFile8 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel2);
        java.io.File file9 = null;
        expander0.expand(tarFile8, file9);
        java.io.File file11 = null;
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand(file11, file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        byte[] byteArray1 = jarMarker0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = jarMarker0.getLocalFileDataLength();
        org.junit.Assert.assertNotNull(jarMarker0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(zipShort2);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS1 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str2 = x000A_NTFS1.toString();
        java.lang.String str3 = x000A_NTFS1.toString();
        java.util.Date date4 = x000A_NTFS1.getModifyJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.nio.file.attribute.FileTime fileTime9 = null;
        tarArchiveEntry7.setCreationTime(fileTime9);
        java.nio.file.attribute.FileTime fileTime11 = tarArchiveEntry7.getLastModifiedTime();
        tarArchiveEntry7.setMode((int) (short) 2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path17 = tarArchiveEntry16.getPath();
        java.nio.file.attribute.FileTime fileTime18 = null;
        tarArchiveEntry16.setCreationTime(fileTime18);
        int int20 = tarArchiveEntry16.getUserId();
        java.util.Date date21 = tarArchiveEntry16.getModTime();
        tarArchiveEntry7.setModTime(date21);
        x000A_NTFS1.setCreateJavaTime(date21);
        sevenZArchiveEntry0.setLastModifiedDate(date21);
        java.util.Date date25 = sevenZArchiveEntry0.getLastModifiedDate();
        sevenZArchiveEntry0.setName("");
        sevenZArchiveEntry0.setHasCrc(true);
        sevenZArchiveEntry0.setHasCreationDate(false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str2, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str3, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNull(date4);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertNotNull(fileTime11);
        org.junit.Assert.assertNull(path17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Jun 19 23:21:11 CEST 2023");
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Mon Jun 19 23:21:11 CEST 2023");
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters0.setDeflateStrategy((int) (short) 3);
        gzipParameters0.setBufferSize((int) (byte) 10);
        gzipParameters0.setDeflateStrategy((int) (byte) 1);
        gzipParameters0.setDeflateStrategy(0);
        gzipParameters0.setDeflateStrategy((int) (byte) 100);
        java.lang.String str11 = gzipParameters0.getFilename();
        java.lang.String str12 = gzipParameters0.getFilename();
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream blockLZ4CompressorOutputStream1 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream(outputStream0);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp2 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong3 = x5455_ExtendedTimestamp2.getAccessTime();
        byte[] byteArray4 = x5455_ExtendedTimestamp2.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.nio.file.attribute.FileTime fileTime9 = null;
        tarArchiveEntry7.setCreationTime(fileTime9);
        java.nio.file.attribute.FileTime fileTime11 = tarArchiveEntry7.getLastModifiedTime();
        x5455_ExtendedTimestamp2.setAccessFileTime(fileTime11);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp13 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray16 = zipLong15.getBytes();
        x5455_ExtendedTimestamp13.setModifyTime(zipLong15);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong18 = org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG;
        long long19 = zipLong18.getValue();
        x5455_ExtendedTimestamp13.setModifyTime(zipLong18);
        x5455_ExtendedTimestamp2.setCreateTime(zipLong18);
        byte[] byteArray22 = x5455_ExtendedTimestamp2.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            blockLZ4CompressorOutputStream1.prefill(byteArray22, 1687209545, 32768);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(zipLong3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0]");
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertNotNull(fileTime11);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(zipLong18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 33639248L + "'", long19 == 33639248L);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[6, -57, -58, -112, 100, 80, 75, 1, 2]");
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        long long7 = tarArchiveEntry2.getRealSize();
        tarArchiveEntry2.setGroupId((int) ' ');
        int int10 = tarArchiveEntry2.getDevMajor();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        byte byte13 = tarArchiveEntry12.getLinkFlag();
        tarArchiveEntry12.setGroupName("LZ4 Parameters with BlockSize null, withContentChecksum false, withBlockChecksum false, withBlockDependency true");
        org.apache.commons.compress.archivers.tar.TarArchiveStructSparse tarArchiveStructSparse18 = new org.apache.commons.compress.archivers.tar.TarArchiveStructSparse((long) 100, (long) 156);
        org.apache.commons.compress.archivers.tar.TarArchiveStructSparse[] tarArchiveStructSparseArray19 = new org.apache.commons.compress.archivers.tar.TarArchiveStructSparse[] { tarArchiveStructSparse18 };
        java.util.ArrayList<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList20 = new java.util.ArrayList<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>) tarArchiveStructSparseList20, tarArchiveStructSparseArray19);
        tarArchiveEntry12.setSparseHeaders((java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>) tarArchiveStructSparseList20);
        tarArchiveEntry2.setSparseHeaders((java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>) tarArchiveStructSparseList20);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry26 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path27 = tarArchiveEntry26.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry30 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path31 = tarArchiveEntry30.getPath();
        java.nio.file.attribute.FileTime fileTime32 = null;
        tarArchiveEntry30.setCreationTime(fileTime32);
        java.nio.file.attribute.FileTime fileTime34 = tarArchiveEntry30.getLastModifiedTime();
        tarArchiveEntry26.setLastAccessTime(fileTime34);
        boolean boolean36 = tarArchiveEntry26.isGNULongNameEntry();
        boolean boolean37 = tarArchiveEntry26.isOldGNUSparse();
        tarArchiveEntry26.addPaxHeader("UTF8", "bzip2");
        boolean boolean41 = tarArchiveEntry26.isLink();
        boolean boolean42 = tarArchiveEntry2.isDescendent(tarArchiveEntry26);
        java.util.Date date43 = tarArchiveEntry26.getModTime();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 48 + "'", byte13 == (byte) 48);
        org.junit.Assert.assertNotNull(tarArchiveStructSparseArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(path27);
        org.junit.Assert.assertNull(path31);
        org.junit.Assert.assertNotNull(fileTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Mon Jun 19 23:21:11 CEST 2023");
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile3 = new org.apache.commons.compress.archivers.zip.ZipFile(file0, "data descriptor", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        long long7 = tarArchiveEntry2.getRealSize();
        boolean boolean8 = tarArchiveEntry2.isGNULongLinkEntry();
        boolean boolean9 = tarArchiveEntry2.isDirectory();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2);
        arArchiveOutputStream5.finish();
        java.io.File file7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = arArchiveOutputStream5.createArchiveEntry(file7, "tar\000");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField0 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = null;
        unrecognizedExtraField0.setHeaderId(zipShort1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = unrecognizedExtraField0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray6 = zipLong5.getBytes();
        boolean boolean8 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray6, 32768);
        boolean boolean10 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray6, 0);
        unrecognizedExtraField0.setCentralDirectoryData(byteArray6);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = unrecognizedExtraField0.getHeaderId();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer13 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.nio.channels.SeekableByteChannel seekableByteChannel14 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream17 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream15, strMap16);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream18 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream17);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort19 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray20 = zipShort19.getBytes();
        boolean boolean22 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray20, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray24 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray20, true);
        gzipCompressorOutputStream18.write(byteArray20);
        closeableConsumer13.accept((java.io.Closeable) gzipCompressorOutputStream18);
        byte[] byteArray28 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) 7);
        gzipCompressorOutputStream18.write(byteArray28);
        unrecognizedExtraField0.setCentralDirectoryData(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray28, 60011, (int) (byte) 76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 60011");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(zipShort12);
        org.junit.Assert.assertNotNull(closeableConsumer13);
        org.junit.Assert.assertNotNull(zipShort19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray24);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[7, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding1 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("lz4-block");
        byte[] byteArray3 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean5 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray3, 3);
        java.lang.String str6 = zipEncoding1.decode(byteArray3);
        boolean boolean8 = zipEncoding1.canEncode("070702");
        boolean boolean10 = zipEncoding1.canEncode("data descriptor");
        java.nio.ByteBuffer byteBuffer12 = zipEncoding1.encode("org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 26128 kb. If the file is not corrupt, consider increasing the memory limit.");
        org.junit.Assert.assertNotNull(zipEncoding1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "a\000" + "'", str6, "a\000");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteBuffer12);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature0 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        java.lang.String str1 = feature0.toString();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry3 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long4 = jarArchiveEntry3.getDataOffset();
        byte[] byteArray5 = jarArchiveEntry3.getRawName();
        jarArchiveEntry3.setInternalAttributes(1024);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException8 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature0, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry3);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry10 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField11 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry10.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField11);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException13 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature0, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry10);
        org.apache.commons.compress.MemoryLimitException memoryLimitException16 = new org.apache.commons.compress.MemoryLimitException((long) 'a', 508);
        int int17 = memoryLimitException16.getMemoryLimitInKb();
        org.apache.commons.compress.archivers.dump.UnrecognizedFormatException unrecognizedFormatException18 = new org.apache.commons.compress.archivers.dump.UnrecognizedFormatException();
        org.apache.commons.compress.archivers.dump.DumpArchiveException dumpArchiveException19 = new org.apache.commons.compress.archivers.dump.DumpArchiveException((java.lang.Throwable) unrecognizedFormatException18);
        memoryLimitException16.addSuppressed((java.lang.Throwable) unrecognizedFormatException18);
        unsupportedZipFeatureException13.addSuppressed((java.lang.Throwable) memoryLimitException16);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry22 = unsupportedZipFeatureException13.getEntry();
        org.junit.Assert.assertNotNull(feature0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "data descriptor" + "'", str1, "data descriptor");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(byteArray5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 508 + "'", int17 == 508);
        org.junit.Assert.assertNotNull(zipArchiveEntry22);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path12 = tarArchiveEntry11.getPath();
        java.nio.file.attribute.FileTime fileTime13 = null;
        tarArchiveEntry11.setCreationTime(fileTime13);
        java.nio.file.attribute.FileTime fileTime15 = tarArchiveEntry11.getLastModifiedTime();
        tarArchiveEntry7.setLastAccessTime(fileTime15);
        x5455_ExtendedTimestamp0.setModifyFileTime(fileTime15);
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry18 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS19 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str20 = x000A_NTFS19.toString();
        java.lang.String str21 = x000A_NTFS19.toString();
        java.util.Date date22 = x000A_NTFS19.getModifyJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry25 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path26 = tarArchiveEntry25.getPath();
        java.nio.file.attribute.FileTime fileTime27 = null;
        tarArchiveEntry25.setCreationTime(fileTime27);
        java.nio.file.attribute.FileTime fileTime29 = tarArchiveEntry25.getLastModifiedTime();
        tarArchiveEntry25.setMode((int) (short) 2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry34 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path35 = tarArchiveEntry34.getPath();
        java.nio.file.attribute.FileTime fileTime36 = null;
        tarArchiveEntry34.setCreationTime(fileTime36);
        int int38 = tarArchiveEntry34.getUserId();
        java.util.Date date39 = tarArchiveEntry34.getModTime();
        tarArchiveEntry25.setModTime(date39);
        x000A_NTFS19.setCreateJavaTime(date39);
        sevenZArchiveEntry18.setLastModifiedDate(date39);
        java.util.Date date43 = sevenZArchiveEntry18.getLastModifiedDate();
        sevenZArchiveEntry18.setName("");
        sevenZArchiveEntry18.setHasCrc(true);
        java.util.Date date49 = org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime((long) (short) -1);
        sevenZArchiveEntry18.setCreationDate(date49);
        // The following exception was thrown during execution in test generation
        try {
            x5455_ExtendedTimestamp0.setCreateJavaTime(date49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: X5455 timestamps must fit in a signed 32 bit integer: -11644473600");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertNotNull(fileTime15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str20, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str21, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNull(date22);
        org.junit.Assert.assertNull(path26);
        org.junit.Assert.assertNotNull(fileTime29);
        org.junit.Assert.assertNull(path35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(date39);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Mon Jun 19 23:21:11 CEST 2023");
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Mon Jun 19 23:21:11 CEST 2023");
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Mon Jan 01 00:59:59 CET 1601");
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile3 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        long long10 = tarArchiveEntry6.getSize();
        java.io.InputStream inputStream11 = tarFile3.getInputStream(tarArchiveEntry6);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(inputStream11);
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream lZMACompressorInputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream((java.io.InputStream) pack200CompressorInputStream12, 26625);
        long long15 = lZMACompressorInputStream14.getCompressedCount();
        long long17 = lZMACompressorInputStream14.skip((long) 25461);
        int int18 = lZMACompressorInputStream14.read();
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 18L + "'", long15 == 18L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        java.nio.file.Path path18 = null;
        java.nio.file.LinkOption linkOption20 = null;
        java.nio.file.LinkOption[] linkOptionArray21 = new java.nio.file.LinkOption[] { linkOption20 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry22 = cpioArchiveOutputStream17.createArchiveEntry(path18, "00.xz", linkOptionArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(linkOptionArray21);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator3 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier2.get();
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore5 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore6 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor7 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore6);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream8 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore5, streamCompressor7);
        long long9 = streamCompressor7.getTotalBytesWritten();
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream10 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore4, streamCompressor7);
        long long11 = streamCompressor7.getBytesRead();
        streamCompressor7.close();
        streamCompressor7.close();
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
        org.junit.Assert.assertNotNull(streamCompressor7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField0 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        boolean boolean5 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray3, 32768);
        boolean boolean7 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray3, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode9 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray3, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode9);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock13 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray3, 488, (int) (short) 2);
        unicodePathExtraField0.setUnicodeName(byteArray3);
        byte[] byteArray16 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean18 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray16, 3);
        boolean boolean20 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray16, (int) (byte) 53);
        long long23 = org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byteArray16, 1, 476);
        boolean boolean25 = org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byteArray16, 16877);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray16);
        unicodePathExtraField0.setUnicodeName(byteArray16);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort28 = unicodePathExtraField0.getLocalFileDataLength();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode9 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode9.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
        org.junit.Assert.assertNotNull(zipShort28);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy5 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream4, pack200Strategy5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean12 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray10, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior14 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray10, false, extraFieldParsingBehavior14);
        boolean boolean17 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray10, 508);
        int int20 = jarArchiveInputStream4.read(byteArray10, (int) (byte) -1, 4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream4, "ustar ");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ustar ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy5);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory0 = new org.apache.commons.compress.compressors.CompressorStreamFactory();
        java.util.Set<java.lang.String> strSet1 = compressorStreamFactory0.getInputStreamCompressorNames();
        compressorStreamFactory0.setDecompressConcatenated(true);
        java.io.InputStream inputStream5 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream5);
        zipArchiveInputStream6.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream6, 488);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.CompressorInputStream compressorInputStream13 = compressorStreamFactory0.createCompressorInputStream("apks", (java.io.InputStream) tarArchiveInputStream10, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.compressors.CompressorException; message: Compressor: apks not found.");
        } catch (org.apache.commons.compress.compressors.CompressorException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        asiExtraField0.setLinkedFile(".bz2");
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = x5455_ExtendedTimestamp0.getAccessTime();
        byte[] byteArray2 = x5455_ExtendedTimestamp0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path6 = tarArchiveEntry5.getPath();
        java.nio.file.attribute.FileTime fileTime7 = null;
        tarArchiveEntry5.setCreationTime(fileTime7);
        java.nio.file.attribute.FileTime fileTime9 = tarArchiveEntry5.getLastModifiedTime();
        x5455_ExtendedTimestamp0.setAccessFileTime(fileTime9);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry12 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long13 = jarArchiveEntry12.getCrc();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource14 = jarArchiveEntry12.getCommentSource();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        tarArchiveEntry16.setGroupId((long) (short) 2);
        int int19 = tarArchiveEntry16.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path23 = tarArchiveEntry22.getPath();
        java.lang.String str24 = tarArchiveEntry22.getName();
        boolean boolean25 = tarArchiveEntry22.isFile();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp26 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong27 = x5455_ExtendedTimestamp26.getAccessTime();
        byte[] byteArray28 = x5455_ExtendedTimestamp26.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry31 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path32 = tarArchiveEntry31.getPath();
        java.nio.file.attribute.FileTime fileTime33 = null;
        tarArchiveEntry31.setCreationTime(fileTime33);
        java.nio.file.attribute.FileTime fileTime35 = tarArchiveEntry31.getLastModifiedTime();
        x5455_ExtendedTimestamp26.setAccessFileTime(fileTime35);
        tarArchiveEntry22.setLastModifiedTime(fileTime35);
        tarArchiveEntry16.setLastModifiedTime(fileTime35);
        java.util.zip.ZipEntry zipEntry39 = jarArchiveEntry12.setCreationTime(fileTime35);
        x5455_ExtendedTimestamp0.setAccessFileTime(fileTime35);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry43 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.attribute.FileTime fileTime44 = tarArchiveEntry43.getLastModifiedTime();
        x5455_ExtendedTimestamp0.setAccessFileTime(fileTime44);
        java.nio.file.attribute.FileTime fileTime46 = x5455_ExtendedTimestamp0.getCreateFileTime();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField47 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort48 = null;
        unrecognizedExtraField47.setHeaderId(zipShort48);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort50 = unrecognizedExtraField47.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong52 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray53 = zipLong52.getBytes();
        boolean boolean55 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray53, 32768);
        boolean boolean57 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray53, 0);
        unrecognizedExtraField47.setCentralDirectoryData(byteArray53);
        boolean boolean60 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray53, 4);
        // The following exception was thrown during execution in test generation
        try {
            x5455_ExtendedTimestamp0.parseFromLocalFileData(byteArray53, (int) 'a', (int) (byte) 103);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(zipLong1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNull(path6);
        org.junit.Assert.assertNotNull(fileTime9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + commentSource14 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT + "'", commentSource14.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNull(path23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "deflate64" + "'", str24, "deflate64");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(zipLong27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0]");
        org.junit.Assert.assertNull(path32);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry39);
        org.junit.Assert.assertEquals(zipEntry39.toString(), "bzip2");
        org.junit.Assert.assertNotNull(fileTime44);
        org.junit.Assert.assertNull(fileTime46);
        org.junit.Assert.assertNotNull(zipShort50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 488);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream5);
        java.io.InputStream inputStream7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream7);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream8);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream12 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream8, 29, "070702");
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream13 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream12);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path17 = tarArchiveEntry16.getPath();
        java.nio.file.attribute.FileTime fileTime18 = null;
        tarArchiveEntry16.setCreationTime(fileTime18);
        int int20 = tarArchiveEntry16.getUserId();
        long long21 = tarArchiveEntry16.getRealSize();
        boolean boolean22 = tarArchiveEntry16.isBlockDevice();
        java.lang.String str23 = tarArchiveEntry16.getGroupName();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = tarArchiveEntry16.getExtraPaxHeaders();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream25 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) cpioArchiveInputStream12, strMap24);
        java.io.InputStream inputStream26 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream27 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream26);
        zipArchiveInputStream27.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream30 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream27);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy31 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream32 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream30, pack200Strategy31);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream34 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) cpioArchiveInputStream12, pack200Strategy31, strMap33);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream35 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) tarArchiveInputStream5, pack200Strategy31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(pack200Strategy31);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        int int7 = pack200CompressorInputStream6.read();
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream8);
        zipArchiveInputStream9.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream9);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy13 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream12, pack200Strategy13);
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream16, strMap17);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream19 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream18);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer20 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap21 = packer20.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream19, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, pack200Strategy13, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        byte[] byteArray25 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean27 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray25, 3);
        boolean boolean29 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray25, 3);
        boolean boolean31 = org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byteArray25, 511);
        boolean boolean33 = org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byteArray25, (int) (byte) 48);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding35 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("lz4-block");
        byte[] byteArray37 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean39 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray37, 3);
        java.lang.String str40 = zipEncoding35.decode(byteArray37);
        boolean boolean42 = zipEncoding35.canEncode("070702");
        boolean boolean44 = zipEncoding35.canEncode("unpack.deflate.hint");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry47 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry((java.util.Map<java.lang.String, java.lang.String>) strMap21, byteArray25, zipEncoding35, false, (long) (byte) 53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 80 + "'", int7 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy13);
        org.junit.Assert.assertNotNull(packer20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(zipEncoding35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "a\000" + "'", str40, "a\000");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField5 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong7 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray8 = zipLong7.getBytes();
        boolean boolean10 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray8, 32768);
        boolean boolean12 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray8, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode14 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray8, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode14);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock18 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray8, 488, (int) (short) 2);
        unicodePathExtraField5.setUnicodeName(byteArray8);
        pack200CompressorOutputStream3.write(byteArray8);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS21 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str22 = x000A_NTFS21.toString();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort23 = x000A_NTFS21.getHeaderId();
        byte[] byteArray24 = x000A_NTFS21.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            pack200CompressorOutputStream3.write(byteArray24, 0, (int) (byte) 49);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode14 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode14.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str22, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNotNull(zipShort23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x0017_StrongEncryptionHeader0.getLocalFileDataLength();
        byte[] byteArray3 = null;
        x0017_StrongEncryptionHeader0.setLocalFileDataData(byteArray3);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS5 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger6 = x000A_NTFS5.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream10 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream8, strMap9);
        byte[] byteArray11 = new byte[] {};
        pack200CompressorOutputStream10.write(byteArray11);
        x000A_NTFS5.parseFromCentralDirectoryData(byteArray11, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort16 = x000A_NTFS5.getHeaderId();
        byte[] byteArray17 = zipShort16.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseFromLocalFileData(byteArray17, 155, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipEightByteInteger6);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(zipShort16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 0]");
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm0 = org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA384;
        int int1 = hashAlgorithm0.getCode();
        org.junit.Assert.assertTrue("'" + hashAlgorithm0 + "' != '" + org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA384 + "'", hashAlgorithm0.equals(org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA384));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32781 + "'", int1 == 32781);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy5 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream4, pack200Strategy5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean12 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray10, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior14 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray10, false, extraFieldParsingBehavior14);
        boolean boolean17 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray10, 508);
        int int20 = jarArchiveInputStream4.read(byteArray10, (int) (byte) -1, 4);
        boolean boolean22 = org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byteArray10, 26128);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byteArray10, (int) (short) 1, 24576);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24576");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy5);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setVolume((int) (byte) 120);
        java.lang.String str3 = dumpArchiveEntry0.getSimpleName();
        dumpArchiveEntry0.setVolume(0);
        int int6 = dumpArchiveEntry0.getNlink();
        dumpArchiveEntry0.setGeneration(10240);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.util.Date date3 = tarArchiveEntry2.getModTime();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Jun 19 23:21:13 CEST 2023");
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        long long3 = cpioArchiveEntry2.getMode();
        cpioArchiveEntry2.setSize((long) (short) 2);
        long long6 = cpioArchiveEntry2.getDeviceMaj();
        boolean boolean7 = cpioArchiveEntry2.isNetwork();
        long long8 = cpioArchiveEntry2.getInode();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32768L + "'", long3 == 32768L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        java.io.InputStream inputStream7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream7);
        zipArchiveInputStream8.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream8);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy12 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream13 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream11, pack200Strategy12);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer14 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap15 = packer14.properties();
        java.beans.PropertyChangeListener propertyChangeListener16 = null;
        packer14.removePropertyChangeListener(propertyChangeListener16);
        java.beans.PropertyChangeListener propertyChangeListener18 = null;
        packer14.addPropertyChangeListener(propertyChangeListener18);
        java.util.SortedMap<java.lang.String, java.lang.String> strMap20 = packer14.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream21 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, pack200Strategy12, (java.util.Map<java.lang.String, java.lang.String>) strMap20);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField22 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort23 = null;
        unrecognizedExtraField22.setHeaderId(zipShort23);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort25 = unrecognizedExtraField22.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong27 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray28 = zipLong27.getBytes();
        boolean boolean30 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray28, 32768);
        boolean boolean32 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray28, 0);
        unrecognizedExtraField22.setCentralDirectoryData(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            pack200CompressorOutputStream3.write(byteArray28, 256, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy12);
        org.junit.Assert.assertNotNull(packer14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(zipShort25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        int int1 = gzipParameters0.getCompressionLevel();
        int int2 = gzipParameters0.getDeflateStrategy();
        int int3 = gzipParameters0.getBufferSize();
        gzipParameters0.setCompressionLevel((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 512 + "'", int3 == 512);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters0.setDeflateStrategy((int) (short) 3);
        int int3 = gzipParameters0.getDeflateStrategy();
        gzipParameters0.setBufferSize(128);
        java.lang.String str6 = gzipParameters0.getComment();
        java.lang.String str7 = gzipParameters0.getFilename();
        java.lang.String str8 = gzipParameters0.getComment();
        int int9 = gzipParameters0.getOperatingSystem();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 255 + "'", int9 == 255);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        long long7 = tarArchiveEntry2.getRealSize();
        boolean boolean8 = tarArchiveEntry2.isBlockDevice();
        java.lang.String str9 = tarArchiveEntry2.getGroupName();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = tarArchiveEntry2.getExtraPaxHeaders();
        java.nio.file.attribute.FileTime fileTime11 = tarArchiveEntry2.getCreationTime();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry13 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData14 = jarArchiveEntry13.getUnparseableExtraFieldData();
        jarArchiveEntry13.setCompressedSize((long) 64);
        int int17 = jarArchiveEntry13.getRawFlag();
        jarArchiveEntry13.setExternalAttributes((long) (byte) 51);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource20 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry13.setCommentSource(commentSource20);
        jarArchiveEntry13.setTime((long) 16);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry26 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path27 = tarArchiveEntry26.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry30 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path31 = tarArchiveEntry30.getPath();
        java.nio.file.attribute.FileTime fileTime32 = null;
        tarArchiveEntry30.setCreationTime(fileTime32);
        java.nio.file.attribute.FileTime fileTime34 = tarArchiveEntry30.getLastModifiedTime();
        tarArchiveEntry26.setLastAccessTime(fileTime34);
        boolean boolean36 = tarArchiveEntry26.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime37 = tarArchiveEntry26.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry38 = jarArchiveEntry13.setLastAccessTime(fileTime37);
        tarArchiveEntry2.setCreationTime(fileTime37);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertNull(unparseableExtraFieldData14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + commentSource20 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD + "'", commentSource20.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNull(path27);
        org.junit.Assert.assertNull(path31);
        org.junit.Assert.assertNotNull(fileTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(fileTime37);
        org.junit.Assert.assertNotNull(zipEntry38);
        org.junit.Assert.assertEquals(zipEntry38.toString(), "bzip2");
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long2 = jarArchiveEntry1.getDataOffset();
        int int3 = jarArchiveEntry1.getInternalAttributes();
        byte[] byteArray4 = jarArchiveEntry1.getRawName();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = jarArchiveEntry1.getExtraFields(false);
        jarArchiveEntry1.setRawFlag(26121);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(byteArray4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray6);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray9 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray9);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile11 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile12 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile13 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarFile tarFile18 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, 52, 4095, "hi!", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a,  , a, #, 4]");
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray7 = zipShort6.getBytes();
        boolean boolean9 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray7, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray7, true);
        gzipCompressorOutputStream5.write(byteArray7);
        closeableConsumer0.accept((java.io.Closeable) gzipCompressorOutputStream5);
        org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream lZMACompressorOutputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream5);
        lZMACompressorOutputStream14.flush();
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker16 = new org.apache.commons.compress.archivers.zip.JarMarker();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort17 = jarMarker16.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort18 = jarMarker16.getLocalFileDataLength();
        byte[] byteArray19 = jarMarker16.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            lZMACompressorOutputStream14.write(byteArray19, 60012, 493);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
        org.junit.Assert.assertNotNull(zipShort17);
        org.junit.Assert.assertNotNull(zipShort18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream blockLZ4CompressorInputStream5 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
        int int6 = blockLZ4CompressorInputStream5.available();
        long long7 = blockLZ4CompressorInputStream5.getBytesRead();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        gzipCompressorOutputStream4.flush();
        gzipCompressorOutputStream4.write(464);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize8 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M4;
        org.apache.commons.compress.compressors.lz77support.Parameters parameters12 = null;
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters13 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize8, true, true, true, parameters12);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters17 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize8, true, true, true);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream18 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream4, parameters17);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort20 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray21 = zipShort20.getBytes();
        boolean boolean23 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray21, (int) 'a');
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField24 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar", byteArray21);
        // The following exception was thrown during execution in test generation
        try {
            framedLZ4CompressorOutputStream18.write(byteArray21, (int) (byte) 54, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + blockSize8 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M4 + "'", blockSize8.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M4));
        org.junit.Assert.assertNotNull(zipShort20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize0 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder4 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder6 = builder4.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder8 = builder6.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters9 = builder8.build();
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters10 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize0, true, false, false, parameters9);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters14 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize0, true, true, true);
        org.junit.Assert.assertTrue("'" + blockSize0 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize0.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(parameters9);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        boolean boolean2 = asiExtraField0.isDirectory();
        byte[] byteArray3 = asiExtraField0.getLocalFileDataData();
        boolean boolean4 = asiExtraField0.isDirectory();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[118, 104, -118, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream3 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters4 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters4.setWithZlibHeader(false);
        deflateParameters4.setWithZlibHeader(true);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream9 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) brotliCompressorInputStream3, deflateParameters4);
        brotliCompressorInputStream3.mark((int) (byte) 76);
        byte[] byteArray13 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean15 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray13, 3);
        boolean boolean17 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray13, (int) (byte) 53);
        boolean boolean19 = org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byteArray13, 0);
        org.apache.commons.compress.archivers.tar.TarFile tarFile21 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray13, "latest");
        // The following exception was thrown during execution in test generation
        try {
            int int24 = brotliCompressorInputStream3.read(byteArray13, 1, 67324752);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Buffer overflow: 67324753 > 2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        org.apache.commons.compress.archivers.zip.ZipMethod zipMethod1 = org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(0);
        org.junit.Assert.assertTrue("'" + zipMethod1 + "' != '" + org.apache.commons.compress.archivers.zip.ZipMethod.STORED + "'", zipMethod1.equals(org.apache.commons.compress.archivers.zip.ZipMethod.STORED));
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.attribute.FileTime fileTime3 = tarArchiveEntry2.getLastModifiedTime();
        boolean boolean4 = tarArchiveEntry2.isFile();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.nio.file.attribute.FileTime fileTime9 = null;
        tarArchiveEntry7.setCreationTime(fileTime9);
        int int11 = tarArchiveEntry7.getUserId();
        long long12 = tarArchiveEntry7.getRealSize();
        java.util.Date date13 = tarArchiveEntry7.getLastModifiedDate();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path17 = tarArchiveEntry16.getPath();
        java.nio.file.attribute.FileTime fileTime18 = null;
        tarArchiveEntry16.setCreationTime(fileTime18);
        int int20 = tarArchiveEntry16.getUserId();
        java.util.Date date21 = tarArchiveEntry16.getModTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry24 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path25 = tarArchiveEntry24.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry28 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path29 = tarArchiveEntry28.getPath();
        java.nio.file.attribute.FileTime fileTime30 = null;
        tarArchiveEntry28.setCreationTime(fileTime30);
        java.nio.file.attribute.FileTime fileTime32 = tarArchiveEntry28.getLastModifiedTime();
        tarArchiveEntry24.setLastAccessTime(fileTime32);
        tarArchiveEntry16.setModTime(fileTime32);
        boolean boolean35 = tarArchiveEntry7.equals(tarArchiveEntry16);
        long long36 = tarArchiveEntry7.getRealSize();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry39 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path40 = tarArchiveEntry39.getPath();
        java.nio.file.attribute.FileTime fileTime41 = null;
        tarArchiveEntry39.setCreationTime(fileTime41);
        java.nio.file.attribute.FileTime fileTime43 = tarArchiveEntry39.getLastModifiedTime();
        boolean boolean44 = tarArchiveEntry39.isSparse();
        long long45 = tarArchiveEntry39.getRealSize();
        boolean boolean46 = tarArchiveEntry7.isDescendent(tarArchiveEntry39);
        boolean boolean47 = tarArchiveEntry39.isCharacterDevice();
        boolean boolean48 = tarArchiveEntry2.isDescendent(tarArchiveEntry39);
        tarArchiveEntry2.setUserId(32768);
        org.junit.Assert.assertNotNull(fileTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Jun 19 23:21:13 CEST 2023");
        org.junit.Assert.assertNull(path17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Jun 19 23:21:13 CEST 2023");
        org.junit.Assert.assertNull(path25);
        org.junit.Assert.assertNull(path29);
        org.junit.Assert.assertNotNull(fileTime32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNull(path40);
        org.junit.Assert.assertNotNull(fileTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        long long2 = zipArchiveOutputStream1.getBytesWritten();
        zipArchiveOutputStream1.setEncoding("deflate64");
        zipArchiveOutputStream1.setComment(".bz2.lzma.lzma");
        java.lang.String str7 = zipArchiveOutputStream1.getEncoding();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "deflate64" + "'", str7, "deflate64");
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.lang.Object obj1 = x5455_ExtendedTimestamp0.clone();
        byte[] byteArray2 = x5455_ExtendedTimestamp0.getCentralDirectoryData();
        java.util.Date date3 = x5455_ExtendedTimestamp0.getCreateJavaTime();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNull(date3);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField0 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW;
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry2 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData3 = jarArchiveEntry2.getUnparseableExtraFieldData();
        jarArchiveEntry2.setCompressedSize((long) 64);
        int int6 = jarArchiveEntry2.getRawFlag();
        jarArchiveEntry2.setExternalAttributes((long) (byte) 51);
        byte[] byteArray10 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean12 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray10, 3);
        boolean boolean14 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray10, 3);
        jarArchiveEntry2.setExtra(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = unparseableExtraField0.onUnparseableExtraField(byteArray10, 263, 29, false, 65536);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: Bad extra field starting at 263.  Block length of 65536 bytes exceeds remaining data of 25 bytes.");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(unparseableExtraField0);
        org.junit.Assert.assertNull(unparseableExtraFieldData3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        char[] charArray5 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile6 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2, charArray5);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarFile tarFile8 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel2);
        java.io.File file9 = null;
        expander0.expand(tarFile8, file9);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray12 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel13 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray12);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel13);
        char[] charArray21 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile22 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel13, charArray21);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile23 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel13);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray24 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel25 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray24);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile26 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel25);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream27 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel25);
        char[] charArray28 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile29 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel25, charArray28);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile30 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel13, charArray28);
        java.io.File file31 = null;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer32 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("!<arch>\n", seekableByteChannel13, file31, closeableConsumer32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: !<arch>? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray12);
        org.junit.Assert.assertNotNull(seekableByteChannel13);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[4, a,  , a, #, 4]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray24);
        org.junit.Assert.assertNotNull(seekableByteChannel25);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertNotNull(closeableConsumer32);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        java.nio.file.Path path0 = null;
        java.nio.file.LinkOption[] linkOptionArray2 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry3 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(path0, "org.apache.commons.compress.MemoryLimitException: 7 kb of memory would be needed; limit was 11 kb. If the file is not corrupt, consider increasing the memory limit.", linkOptionArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(linkOptionArray2);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setRemoteDeviceMaj((long) 'a');
        int int6 = cpioArchiveEntry2.getAlignmentBoundary();
        long long7 = cpioArchiveEntry2.getRemoteDeviceMaj();
        boolean boolean8 = cpioArchiveEntry2.isDirectory();
        boolean boolean9 = cpioArchiveEntry2.isBlockDevice();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        long long4 = zipArchiveInputStream1.getUncompressedCount();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream9 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 100, (int) (byte) 0, "ZipLong value: 808471376", false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ZipLong value: 808471376");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder0 = org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder2 = builder0.withTryToRecoverBrokenArchives(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        int int6 = deflateCompressorInputStream5.available();
        int int7 = deflateCompressorInputStream5.available();
        long long8 = deflateCompressorInputStream5.getCompressedCount();
        long long9 = deflateCompressorInputStream5.getUncompressedCount();
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream6 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize8 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder12 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder14 = builder12.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder16 = builder14.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters17 = builder16.build();
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters18 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize8, true, false, false, parameters17);
        int int19 = parameters17.getNiceBackReferenceLength();
        int int20 = parameters17.getMaxCandidates();
        org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream snappyCompressorOutputStream21 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream6, 18L, parameters17);
        snappyCompressorOutputStream21.write((int) (short) 8);
        // The following exception was thrown during execution in test generation
        try {
            snappyCompressorOutputStream21.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + blockSize8 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize8.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(parameters17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 512 + "'", int20 == 512);
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        java.io.File file0 = null;
        java.io.File file1 = null;
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream2);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream7 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream3, 29, "070702");
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream8 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream7);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path12 = tarArchiveEntry11.getPath();
        java.nio.file.attribute.FileTime fileTime13 = null;
        tarArchiveEntry11.setCreationTime(fileTime13);
        int int15 = tarArchiveEntry11.getUserId();
        long long16 = tarArchiveEntry11.getRealSize();
        boolean boolean17 = tarArchiveEntry11.isBlockDevice();
        java.lang.String str18 = tarArchiveEntry11.getGroupName();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = tarArchiveEntry11.getExtraPaxHeaders();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream20 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) cpioArchiveInputStream7, strMap19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(file0, file1, strMap19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.util.Date date2 = x000A_NTFS0.getCreateJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path6 = tarArchiveEntry5.getPath();
        java.nio.file.attribute.FileTime fileTime7 = null;
        tarArchiveEntry5.setCreationTime(fileTime7);
        int int9 = tarArchiveEntry5.getUserId();
        java.util.Date date10 = tarArchiveEntry5.getModTime();
        x000A_NTFS0.setCreateJavaTime(date10);
        java.util.Date date12 = x000A_NTFS0.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger13 = x000A_NTFS0.getAccessTime();
        java.lang.String str14 = x000A_NTFS0.toString();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong16 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray17 = zipLong16.getBytes();
        boolean boolean19 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray17, 32768);
        boolean boolean21 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray17, 0);
        // The following exception was thrown during execution in test generation
        try {
            x000A_NTFS0.parseFromLocalFileData(byteArray17, 10240, 29127);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10244");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNull(date2);
        org.junit.Assert.assertNull(path6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Jun 19 23:21:14 CEST 2023");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Jun 19 23:21:14 CEST 2023");
        org.junit.Assert.assertNotNull(zipEightByteInteger13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:21:14.769Z] " + "'", str14, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:21:14.769Z] ");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("snappy-raw");
        int int2 = jarArchiveEntry1.getPlatform();
        java.nio.file.attribute.FileTime fileTime3 = jarArchiveEntry1.getLastAccessTime();
        jarArchiveEntry1.setSize(1687209540L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(fileTime3);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, (int) (short) 4, 512, "pass", false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        tarArchiveEntry9.setGroupId(4096);
        java.nio.file.Path path12 = tarArchiveEntry9.getPath();
        int int13 = tarArchiveEntry9.getMode();
        java.io.InputStream inputStream14 = tarFile7.getInputStream(tarArchiveEntry9);
        tarArchiveEntry9.setGroupId(4);
        java.lang.String str17 = tarArchiveEntry9.getLinkName();
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 33188 + "'", int13 == 33188);
        org.junit.Assert.assertNotNull(inputStream14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField0 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField();
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix1 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        java.lang.Object obj2 = null;
        boolean boolean3 = x7875_NewUnix1.equals(obj2);
        byte[] byteArray4 = x7875_NewUnix1.getLocalFileDataData();
        unicodeCommentExtraField0.setUnicodeName(byteArray4);
        unicodeCommentExtraField0.setNameCRC32((long) (byte) 88);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort8 = unicodeCommentExtraField0.getHeaderId();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 2, -24, 3, 2, -24, 3]");
        org.junit.Assert.assertNotNull(zipShort8);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile3 = new org.apache.commons.compress.archivers.zip.ZipFile(file0, "latest", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        int int5 = jarArchiveEntry1.getRawFlag();
        jarArchiveEntry1.setExternalAttributes((long) (byte) 51);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource8 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry1.setCommentSource(commentSource8);
        jarArchiveEntry1.setTime((long) 16);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path15 = tarArchiveEntry14.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path19 = tarArchiveEntry18.getPath();
        java.nio.file.attribute.FileTime fileTime20 = null;
        tarArchiveEntry18.setCreationTime(fileTime20);
        java.nio.file.attribute.FileTime fileTime22 = tarArchiveEntry18.getLastModifiedTime();
        tarArchiveEntry14.setLastAccessTime(fileTime22);
        boolean boolean24 = tarArchiveEntry14.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime25 = tarArchiveEntry14.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry26 = jarArchiveEntry1.setLastAccessTime(fileTime25);
        long long27 = jarArchiveEntry1.getCrc();
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + commentSource8 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD + "'", commentSource8.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNull(path15);
        org.junit.Assert.assertNull(path19);
        org.junit.Assert.assertNotNull(fileTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fileTime25);
        org.junit.Assert.assertNotNull(zipEntry26);
        org.junit.Assert.assertEquals(zipEntry26.toString(), "bzip2");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        byte byte2 = tarArchiveEntry1.getLinkFlag();
        tarArchiveEntry1.setNames("ustar\000", "");
        boolean boolean6 = tarArchiveEntry1.isGNULongNameEntry();
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 48 + "'", byte2 == (byte) 48);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setRemoteDeviceMaj((long) 'a');
        int int6 = cpioArchiveEntry2.getAlignmentBoundary();
        long long7 = cpioArchiveEntry2.getRemoteDeviceMaj();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry10 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path11 = tarArchiveEntry10.getPath();
        java.nio.file.attribute.FileTime fileTime12 = null;
        tarArchiveEntry10.setCreationTime(fileTime12);
        int int14 = tarArchiveEntry10.getUserId();
        java.util.Date date15 = tarArchiveEntry10.getModTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path19 = tarArchiveEntry18.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path23 = tarArchiveEntry22.getPath();
        java.nio.file.attribute.FileTime fileTime24 = null;
        tarArchiveEntry22.setCreationTime(fileTime24);
        java.nio.file.attribute.FileTime fileTime26 = tarArchiveEntry22.getLastModifiedTime();
        tarArchiveEntry18.setLastAccessTime(fileTime26);
        tarArchiveEntry10.setModTime(fileTime26);
        cpioArchiveEntry2.setTime(fileTime26);
        long long30 = cpioArchiveEntry2.getInode();
        cpioArchiveEntry2.setNumberOfLinks((long) 21);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNull(path11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Jun 19 23:21:15 CEST 2023");
        org.junit.Assert.assertNull(path19);
        org.junit.Assert.assertNull(path23);
        org.junit.Assert.assertNotNull(fileTime26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier1 = null;
        parallelScatterZipCreator0.addArchiveEntry(zipArchiveEntryRequestSupplier1);
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream4, strMap5);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date10 = cpioArchiveEntry9.getLastModifiedDate();
        cpioArchiveEntry9.setRemoteDeviceMin((long) 12);
        boolean boolean13 = zipArchiveOutputStream4.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry9);
        long long14 = zipArchiveOutputStream4.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            parallelScatterZipCreator0.writeTo(zipArchiveOutputStream4);
            org.junit.Assert.fail("Expected exception of type java.util.concurrent.ExecutionException; message: java.lang.NullPointerException");
        } catch (java.util.concurrent.ExecutionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream2 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
        java.lang.String str3 = org.apache.commons.compress.archivers.ArchiveStreamFactory.detect((java.io.InputStream) pack200CompressorInputStream2);
        int int4 = pack200CompressorInputStream2.available();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zip" + "'", str3, "zip");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 29 + "'", int4 == 29);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.file.Path path2 = null;
        java.nio.file.Path path3 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 52.", path2, path3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        java.lang.String str1 = org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename("dump");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dump.lzma" + "'", str1, "dump.lzma");
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        java.util.concurrent.ExecutorService executorService1 = null;
        java.nio.file.Path path2 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier3 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path2);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator4 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService1, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier3);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore5 = defaultBackingStoreSupplier3.get();
        java.util.concurrent.ExecutorService executorService6 = null;
        java.nio.file.Path path7 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier8 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path7);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator9 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService6, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier8);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore10 = defaultBackingStoreSupplier8.get();
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore11 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore12 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor13 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore12);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream14 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore11, streamCompressor13);
        long long15 = streamCompressor13.getTotalBytesWritten();
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream16 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore10, streamCompressor13);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream17 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore5, streamCompressor13);
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor18 = org.apache.commons.compress.archivers.zip.StreamCompressor.create((int) (short) 8, scatterGatherBackingStore5);
        java.io.InputStream inputStream19 = scatterGatherBackingStore5.getInputStream();
        org.junit.Assert.assertNotNull(scatterGatherBackingStore5);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore10);
        org.junit.Assert.assertNotNull(streamCompressor13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(streamCompressor18);
        org.junit.Assert.assertNotNull(inputStream19);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        boolean boolean5 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray3, 32768);
        boolean boolean7 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray3, 0);
        boolean boolean9 = org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byteArray3, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(16877L, byteArray3, 16384, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 16877=40755 will not fit in octal number buffer of length 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        short short4 = cpioArchiveEntry2.getFormat();
        long long5 = cpioArchiveEntry2.getGID();
        long long6 = cpioArchiveEntry2.getRemoteDeviceMaj();
        int int7 = cpioArchiveEntry2.getDataPadCount();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 1 + "'", short4 == (short) 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy5 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream4, pack200Strategy5);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream8 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream4, true);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = jarArchiveInputStream4.getNextEntry();
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) jarArchiveInputStream4, (int) (short) 2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream14 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) cpioArchiveInputStream11, 0, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: blockSize must be bigger than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy5);
        org.junit.Assert.assertNull(archiveEntry9);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField1 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField2 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean8 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray6, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior10 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray6, false, extraFieldParsingBehavior10);
        boolean boolean13 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray6, 32768);
        unrecognizedExtraField2.setLocalFileDataData(byteArray6);
        unrecognizedExtraField1.setCentralDirectoryData(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes((long) (byte) 49, byteArray6, 0, 96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 93");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong2);
        byte[] byteArray5 = zipLong2.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray5, (int) (byte) 88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 88");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1, -1]");
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream17 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.setLevel((int) (byte) 120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid compression level: 120");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator3 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier2);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry5 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long6 = jarArchiveEntry5.getDataOffset();
        int int7 = jarArchiveEntry5.getInternalAttributes();
        byte[] byteArray8 = jarArchiveEntry5.getRawName();
        jarArchiveEntry5.setMethod((int) (byte) 54);
        long long11 = jarArchiveEntry5.getTime();
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier12 = null;
        java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable13 = parallelScatterZipCreator3.createCallable((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry5, inputStreamSupplier12);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker14 = new org.apache.commons.compress.archivers.zip.JarMarker();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort15 = jarMarker14.getCentralDirectoryLength();
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveEntry5.removeExtraField(zipShort15);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(scatterZipOutputStreamCallable13);
        org.junit.Assert.assertNotNull(zipShort15);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        int int5 = jarArchiveEntry1.getRawFlag();
        jarArchiveEntry1.setMethod(9);
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream8);
        zipArchiveInputStream9.mark((int) (byte) -1);
        long long13 = zipArchiveInputStream9.skip((long) 16877);
        java.nio.channels.SeekableByteChannel seekableByteChannel14 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel14);
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream17 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream15, strMap16);
        byte[] byteArray18 = new byte[] {};
        pack200CompressorOutputStream17.write(byteArray18);
        int int22 = zipArchiveInputStream9.read(byteArray18, (int) (short) -1, (int) (byte) 50);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField24 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray25 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray18, false, unparseableExtraField24);
        jarArchiveEntry1.setExtraFields(zipExtraFieldArray25);
        jarArchiveEntry1.setVersionRequired(21);
        int int29 = jarArchiveEntry1.getMethod();
        int int30 = jarArchiveEntry1.getMethod();
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(zipExtraFieldArray25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        org.apache.commons.compress.archivers.zip.ZipMethod zipMethod0 = org.apache.commons.compress.archivers.zip.ZipMethod.ENHANCED_DEFLATED;
        org.junit.Assert.assertTrue("'" + zipMethod0 + "' != '" + org.apache.commons.compress.archivers.zip.ZipMethod.ENHANCED_DEFLATED + "'", zipMethod0.equals(org.apache.commons.compress.archivers.zip.ZipMethod.ENHANCED_DEFLATED));
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 488);
        boolean boolean6 = tarArchiveInputStream5.markSupported();
        tarArchiveInputStream5.reset();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = tarArchiveInputStream5.read();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.file.Path path1 = null;
        java.nio.file.Path path2 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand(path1, path2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarFile tarFile4 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.nio.file.attribute.FileTime fileTime9 = null;
        tarArchiveEntry7.setCreationTime(fileTime9);
        long long11 = tarArchiveEntry7.getSize();
        java.io.InputStream inputStream12 = tarFile4.getInputStream(tarArchiveEntry7);
        java.nio.file.Path path13 = null;
        expander0.expand(tarFile4, path13);
        java.io.InputStream inputStream15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream15);
        zipArchiveInputStream16.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream20 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream16, 488);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream21 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream20);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream24 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream20, 67324752, "snappy-raw");
        java.io.File file25 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand((java.io.InputStream) tarArchiveInputStream24, file25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, 60012, 32768, "apkm", true);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray8 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel9 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray8);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel9);
        char[] charArray17 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile18 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel9, charArray17);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile19 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray17);
        java.nio.file.Path path20 = null;
        java.nio.file.LinkOption linkOption22 = null;
        java.nio.file.LinkOption[] linkOptionArray23 = new java.nio.file.LinkOption[] { linkOption22 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry24 = sevenZOutputFile19.createArchiveEntry(path20, "", linkOptionArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(seekableByteChannelArray8);
        org.junit.Assert.assertNotNull(seekableByteChannel9);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, a,  , a, #, 4]");
        org.junit.Assert.assertNotNull(linkOptionArray23);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean3 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray1, 3);
        boolean boolean5 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray1, (int) (byte) 53);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray1, false);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byteArray1, 476, (int) (byte) 77);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 476");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.lang.String str4 = tarArchiveEntry2.getName();
        boolean boolean5 = tarArchiveEntry2.isFile();
        boolean boolean6 = tarArchiveEntry2.isGNULongLinkEntry();
        byte[] byteArray7 = null;
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding9 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("pack200.bz2");
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveEntry2.parseTarHeader(byteArray7, zipEncoding9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deflate64" + "'", str4, "deflate64");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zipEncoding9);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        byte byte2 = tarArchiveEntry1.getLinkFlag();
        int int3 = tarArchiveEntry1.getDevMinor();
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList4 = tarArchiveEntry1.getSparseHeaders();
        long long5 = tarArchiveEntry1.getLongGroupId();
        long long6 = tarArchiveEntry1.getDataOffset();
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 48 + "'", byte2 == (byte) 48);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(tarArchiveStructSparseList4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        org.apache.commons.compress.MemoryLimitException memoryLimitException2 = new org.apache.commons.compress.MemoryLimitException((long) 'a', 508);
        int int3 = memoryLimitException2.getMemoryLimitInKb();
        org.apache.commons.compress.archivers.dump.InvalidFormatException invalidFormatException5 = new org.apache.commons.compress.archivers.dump.InvalidFormatException((long) '4');
        memoryLimitException2.addSuppressed((java.lang.Throwable) invalidFormatException5);
        java.lang.String str7 = invalidFormatException5.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 508 + "'", int3 == 508);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 52." + "'", str7, "org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 52.");
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        org.apache.commons.compress.archivers.zip.ZipMethod zipMethod1 = org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(2048);
        org.junit.Assert.assertNull(zipMethod1);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort0 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray1 = zipShort0.getBytes();
        boolean boolean3 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray1, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray1, true);
        byte[] byteArray6 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(zipExtraFieldArray5);
        org.junit.Assert.assertNotNull(zipShort0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode0 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT;
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry2 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField3 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry2.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField3);
        byte[] byteArray5 = jarArchiveEntry2.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField6 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry2.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField6);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort8 = resourceAlignmentExtraField6.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = extraFieldParsingMode0.createExtraField(zipShort8);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField10 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray11 = unrecognizedExtraField10.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = unrecognizedExtraField10.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(zipShort12);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byteArray16, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort19 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField23 = extraFieldParsingMode0.fill(zipExtraField13, byteArray16, 5, 52, false);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: Failed to parse corrupt ZIP extra field of type 0");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode0 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT + "'", extraFieldParsingMode0.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT));
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipShort8);
        org.junit.Assert.assertNotNull(zipExtraField9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(zipShort12);
        org.junit.Assert.assertNotNull(zipExtraField13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x0017_StrongEncryptionHeader0.getLocalFileDataLength();
        byte[] byteArray3 = zipShort2.getBytes();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0]");
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile3 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        long long10 = tarArchiveEntry6.getSize();
        java.io.InputStream inputStream11 = tarFile3.getInputStream(tarArchiveEntry6);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(inputStream11);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream13 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) pack200CompressorInputStream12);
        deflateCompressorInputStream13.close();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = deflateCompressorInputStream13.available();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(file0, "LZ4 Parameters with BlockSize M1, withContentChecksum true, withBlockChecksum true, withBlockDependency false");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy3 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
        java.lang.String str4 = unicodeExtraFieldPolicy3.toString();
        zipArchiveOutputStream1.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy3);
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry6 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        boolean boolean7 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) arjArchiveEntry6);
        java.lang.String str8 = zipArchiveOutputStream1.getEncoding();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "never" + "'", str4, "never");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTF8" + "'", str8, "UTF8");
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        cpioArchiveOutputStream17.flush();
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path10 = tarArchiveEntry9.getPath();
        java.nio.file.attribute.FileTime fileTime11 = null;
        tarArchiveEntry9.setCreationTime(fileTime11);
        java.nio.file.attribute.FileTime fileTime13 = tarArchiveEntry9.getLastModifiedTime();
        tarArchiveEntry9.setNames(" \000", "UTF8");
        boolean boolean17 = tarArchiveInputStream3.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry9);
        org.apache.commons.compress.compressors.snappy.FramedSnappyDialect framedSnappyDialect19 = org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE;
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream20 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream((java.io.InputStream) tarArchiveInputStream3, (int) (byte) 1, framedSnappyDialect19);
        int int21 = framedSnappyCompressorInputStream20.getCount();
        java.nio.channels.SeekableByteChannel seekableByteChannel22 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream23 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel22);
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream25 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream23, strMap24);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream26 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream25);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer27 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap28 = packer27.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream29 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream26, (java.util.Map<java.lang.String, java.lang.String>) strMap28);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField30 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField31 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean37 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray35, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior39 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray40 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray35, false, extraFieldParsingBehavior39);
        boolean boolean42 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray35, 32768);
        unrecognizedExtraField31.setLocalFileDataData(byteArray35);
        unrecognizedExtraField30.setCentralDirectoryData(byteArray35);
        pack200CompressorOutputStream29.write(byteArray35);
        boolean boolean47 = org.apache.commons.compress.compressors.xz.XZUtils.matches(byteArray35, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = framedSnappyCompressorInputStream20.read(byteArray35, (-1), 10240);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertNull(path10);
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + framedSnappyDialect19 + "' != '" + org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE + "'", framedSnappyDialect19.equals(org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(packer27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream2 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
        pack200CompressorInputStream2.mark((int) '4');
        boolean boolean5 = pack200CompressorInputStream2.markSupported();
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream7 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) pack200CompressorInputStream2, "pack.deflate.hint");
        boolean boolean8 = pack200CompressorInputStream2.markSupported();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 29, "070702");
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream5);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path10 = tarArchiveEntry9.getPath();
        java.nio.file.attribute.FileTime fileTime11 = null;
        tarArchiveEntry9.setCreationTime(fileTime11);
        int int13 = tarArchiveEntry9.getUserId();
        long long14 = tarArchiveEntry9.getRealSize();
        boolean boolean15 = tarArchiveEntry9.isBlockDevice();
        java.lang.String str16 = tarArchiveEntry9.getGroupName();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = tarArchiveEntry9.getExtraPaxHeaders();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) cpioArchiveInputStream5, strMap17);
        cpioArchiveInputStream5.close();
        org.junit.Assert.assertNull(path10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = x5455_ExtendedTimestamp0.getAccessTime();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong3 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray4 = zipLong3.getBytes();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong3);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = x5455_ExtendedTimestamp0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong7 = x5455_ExtendedTimestamp0.getModifyTime();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp8 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong9 = x5455_ExtendedTimestamp8.getAccessTime();
        byte[] byteArray10 = x5455_ExtendedTimestamp8.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path14 = tarArchiveEntry13.getPath();
        java.nio.file.attribute.FileTime fileTime15 = null;
        tarArchiveEntry13.setCreationTime(fileTime15);
        java.nio.file.attribute.FileTime fileTime17 = tarArchiveEntry13.getLastModifiedTime();
        x5455_ExtendedTimestamp8.setAccessFileTime(fileTime17);
        boolean boolean19 = x5455_ExtendedTimestamp8.isBit1_accessTimePresent();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong20 = x5455_ExtendedTimestamp8.getAccessTime();
        boolean boolean21 = x5455_ExtendedTimestamp8.isBit1_accessTimePresent();
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry22 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry22.setHasWindowsAttributes(false);
        sevenZArchiveEntry22.setHasLastModifiedDate(false);
        boolean boolean27 = sevenZArchiveEntry22.getHasCrc();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry30 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path31 = tarArchiveEntry30.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry34 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path35 = tarArchiveEntry34.getPath();
        java.nio.file.attribute.FileTime fileTime36 = null;
        tarArchiveEntry34.setCreationTime(fileTime36);
        java.nio.file.attribute.FileTime fileTime38 = tarArchiveEntry34.getLastModifiedTime();
        tarArchiveEntry30.setLastAccessTime(fileTime38);
        boolean boolean40 = tarArchiveEntry30.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime41 = tarArchiveEntry30.getLastModifiedTime();
        sevenZArchiveEntry22.setCreationTime(fileTime41);
        x5455_ExtendedTimestamp8.setModifyFileTime(fileTime41);
        x5455_ExtendedTimestamp0.setAccessFileTime(fileTime41);
        org.junit.Assert.assertNull(zipLong1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(zipLong7);
        org.junit.Assert.assertNull(zipLong9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0]");
        org.junit.Assert.assertNull(path14);
        org.junit.Assert.assertNotNull(fileTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(zipLong20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(path31);
        org.junit.Assert.assertNull(path35);
        org.junit.Assert.assertNotNull(fileTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(fileTime41);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray6 = zipLong5.getBytes();
        long long7 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray6);
        int int10 = zipArchiveInputStream1.read(byteArray6, 0, (int) (byte) 51);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1020L + "'", long7 == 1020L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile2 = new org.apache.commons.compress.archivers.zip.ZipFile(file0, "pack.modification.time");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        boolean boolean2 = asiExtraField0.isDirectory();
        asiExtraField0.setLinkedFile("error");
        byte[] byteArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            asiExtraField0.parseFromCentralDirectoryData(byteArray5, (int) (byte) 77, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode0 = org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded;
        org.junit.Assert.assertTrue("'" + zip64Mode0 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded + "'", zip64Mode0.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded));
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray7 = zipShort6.getBytes();
        boolean boolean9 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray7, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray7, true);
        gzipCompressorOutputStream5.write(byteArray7);
        closeableConsumer0.accept((java.io.Closeable) gzipCompressorOutputStream5);
        byte[] byteArray15 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) 7);
        gzipCompressorOutputStream5.write(byteArray15);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream18 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) gzipCompressorOutputStream5, 49152);
        // The following exception was thrown during execution in test generation
        try {
            gzipCompressorOutputStream5.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[7, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator3 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier2.get();
        java.util.concurrent.ExecutorService executorService5 = null;
        java.nio.file.Path path6 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier7 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path6);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator8 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService5, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier7);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore9 = defaultBackingStoreSupplier7.get();
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore10 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore11 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor12 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore11);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream13 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore10, streamCompressor12);
        long long14 = streamCompressor12.getTotalBytesWritten();
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream15 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore9, streamCompressor12);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream16 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore4, streamCompressor12);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter zipEntryWriter17 = scatterZipOutputStream16.zipEntryWriter();
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter zipEntryWriter18 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter(scatterZipOutputStream16);
        zipEntryWriter18.close();
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore9);
        org.junit.Assert.assertNotNull(streamCompressor12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(zipEntryWriter17);
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        int int1 = gzipParameters0.getCompressionLevel();
        gzipParameters0.setOperatingSystem((int) ' ');
        java.lang.String str4 = gzipParameters0.getFilename();
        gzipParameters0.setCompressionLevel(6);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        long long1 = org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(1687209634L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1902610384000L + "'", long1 == 1902610384000L);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setVolume((int) (byte) 120);
        java.lang.String str3 = dumpArchiveEntry0.getSimpleName();
        java.nio.channels.SeekableByteChannel seekableByteChannel4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        boolean boolean7 = zipArchiveOutputStream5.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date11 = cpioArchiveEntry10.getLastModifiedDate();
        cpioArchiveEntry10.setRemoteDeviceMaj((long) 'a');
        int int14 = cpioArchiveEntry10.getAlignmentBoundary();
        boolean boolean15 = zipArchiveOutputStream5.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry10);
        cpioArchiveEntry10.setDeviceMin((long) 26128);
        boolean boolean18 = cpioArchiveEntry10.isSocket();
        java.util.Date date19 = cpioArchiveEntry10.getLastModifiedDate();
        dumpArchiveEntry0.setAccessTime(date19);
        long long21 = dumpArchiveEntry0.getOffset();
        int int22 = dumpArchiveEntry0.getGeneration();
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE tYPE23 = dumpArchiveEntry0.getType();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + tYPE23 + "' != '" + org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN + "'", tYPE23.equals(org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN));
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField2);
        java.nio.file.attribute.FileTime fileTime4 = jarArchiveEntry1.getLastAccessTime();
        java.nio.file.attribute.FileTime fileTime5 = jarArchiveEntry1.getLastAccessTime();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp6 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong8 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray9 = zipLong8.getBytes();
        x5455_ExtendedTimestamp6.setModifyTime(zipLong8);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path14 = tarArchiveEntry13.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path18 = tarArchiveEntry17.getPath();
        java.nio.file.attribute.FileTime fileTime19 = null;
        tarArchiveEntry17.setCreationTime(fileTime19);
        java.nio.file.attribute.FileTime fileTime21 = tarArchiveEntry17.getLastModifiedTime();
        tarArchiveEntry13.setLastAccessTime(fileTime21);
        x5455_ExtendedTimestamp6.setModifyFileTime(fileTime21);
        boolean boolean24 = jarArchiveEntry1.equals((java.lang.Object) fileTime21);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode25 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS26 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger27 = x000A_NTFS26.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel28 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream29 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream31 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream29, strMap30);
        byte[] byteArray32 = new byte[] {};
        pack200CompressorOutputStream31.write(byteArray32);
        x000A_NTFS26.parseFromCentralDirectoryData(byteArray32, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort37 = x000A_NTFS26.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField38 = extraFieldParsingMode25.createExtraField(zipShort37);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField39 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray40 = unrecognizedExtraField39.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort41 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray42 = zipShort41.getBytes();
        java.lang.Object obj43 = zipShort41.clone();
        unrecognizedExtraField39.setHeaderId(zipShort41);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField45 = extraFieldParsingMode25.createExtraField(zipShort41);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray46 = jarArchiveEntry1.getExtraFields((org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode25);
        java.io.InputStream inputStream47 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream48 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream47);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream50 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream48, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy51 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap52 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream53 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream48, pack200Strategy51, strMap52);
        int int54 = pack200CompressorInputStream53.read();
        java.io.InputStream inputStream55 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream56 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream55);
        zipArchiveInputStream56.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream59 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream56);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy60 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream61 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream59, pack200Strategy60);
        java.nio.channels.SeekableByteChannel seekableByteChannel62 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream63 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel62);
        java.util.Map<java.lang.String, java.lang.String> strMap64 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream65 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream63, strMap64);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream66 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream65);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer67 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap68 = packer67.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream69 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream66, (java.util.Map<java.lang.String, java.lang.String>) strMap68);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream70 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream53, pack200Strategy60, (java.util.Map<java.lang.String, java.lang.String>) strMap68);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer71 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap72 = packer71.properties();
        org.apache.commons.compress.compressors.FileNameUtil fileNameUtil74 = new org.apache.commons.compress.compressors.FileNameUtil((java.util.Map<java.lang.String, java.lang.String>) strMap72, ".lzma");
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream75 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream53, (java.util.Map<java.lang.String, java.lang.String>) strMap72);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream76 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream53);
        byte[] byteArray78 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) 7);
        int int79 = pack200CompressorInputStream53.read(byteArray78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField84 = extraFieldParsingMode25.onUnparseableExtraField(byteArray78, (int) (byte) 75, 75, true, 84446);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertNull(fileTime5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNull(path14);
        org.junit.Assert.assertNull(path18);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode25 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode25.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipEightByteInteger27);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(zipShort37);
        org.junit.Assert.assertNotNull(zipExtraField38);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(zipShort41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[30, -95]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "ZipShort value: 41246");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "ZipShort value: 41246");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "ZipShort value: 41246");
        org.junit.Assert.assertNotNull(zipExtraField45);
        org.junit.Assert.assertNotNull(zipExtraFieldArray46);
        org.junit.Assert.assertNotNull(pack200Strategy51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 80 + "'", int54 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy60);
        org.junit.Assert.assertNotNull(packer67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(packer71);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[7, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray2 = zipLong1.getBytes();
        org.apache.commons.compress.archivers.tar.TarFile tarFile4 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray2, "pack.unknown.attribute");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, -1, -1, -1]");
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong2);
        boolean boolean5 = x5455_ExtendedTimestamp0.isBit2_createTimePresent();
        byte[] byteArray6 = x5455_ExtendedTimestamp0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong7 = x5455_ExtendedTimestamp0.getAccessTime();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNull(zipLong7);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS1 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str2 = x000A_NTFS1.toString();
        java.lang.String str3 = x000A_NTFS1.toString();
        java.util.Date date4 = x000A_NTFS1.getModifyJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.nio.file.attribute.FileTime fileTime9 = null;
        tarArchiveEntry7.setCreationTime(fileTime9);
        java.nio.file.attribute.FileTime fileTime11 = tarArchiveEntry7.getLastModifiedTime();
        tarArchiveEntry7.setMode((int) (short) 2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path17 = tarArchiveEntry16.getPath();
        java.nio.file.attribute.FileTime fileTime18 = null;
        tarArchiveEntry16.setCreationTime(fileTime18);
        int int20 = tarArchiveEntry16.getUserId();
        java.util.Date date21 = tarArchiveEntry16.getModTime();
        tarArchiveEntry7.setModTime(date21);
        x000A_NTFS1.setCreateJavaTime(date21);
        sevenZArchiveEntry0.setLastModifiedDate(date21);
        long long25 = org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(date21);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str2, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str3, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNull(date4);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertNotNull(fileTime11);
        org.junit.Assert.assertNull(path17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Jun 19 23:21:19 CEST 2023");
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 133316832791720000L + "'", long25 == 133316832791720000L);
    }
}
