package org.apache.commons.compress.randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 488);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream5);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream7 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) tarArchiveInputStream5);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream5.getNextEntry();
        org.junit.Assert.assertNull(archiveEntry8);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("0\000");
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        int int5 = jarArchiveEntry1.getRawFlag();
        jarArchiveEntry1.setExternalAttributes((long) (byte) 51);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource8 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry1.setCommentSource(commentSource8);
        jarArchiveEntry1.setTime((long) 16);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path15 = tarArchiveEntry14.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path19 = tarArchiveEntry18.getPath();
        java.nio.file.attribute.FileTime fileTime20 = null;
        tarArchiveEntry18.setCreationTime(fileTime20);
        java.nio.file.attribute.FileTime fileTime22 = tarArchiveEntry18.getLastModifiedTime();
        tarArchiveEntry14.setLastAccessTime(fileTime22);
        boolean boolean24 = tarArchiveEntry14.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime25 = tarArchiveEntry14.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry26 = jarArchiveEntry1.setLastAccessTime(fileTime25);
        java.nio.file.attribute.FileTime fileTime27 = jarArchiveEntry1.getLastAccessTime();
        int int28 = jarArchiveEntry1.getUnixMode();
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + commentSource8 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD + "'", commentSource8.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNull(path15);
        org.junit.Assert.assertNull(path19);
        org.junit.Assert.assertNotNull(fileTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(fileTime25);
        org.junit.Assert.assertNotNull(zipEntry26);
        org.junit.Assert.assertEquals(zipEntry26.toString(), "bzip2");
        org.junit.Assert.assertNotNull(fileTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray4 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel5 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel5);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile7 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel5);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray8 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel9 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray8);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel9);
        org.apache.commons.compress.archivers.tar.TarFile tarFile11 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel9);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray12 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel13 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray12);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile14 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel13);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel13);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray16 = new java.nio.channels.SeekableByteChannel[] { seekableByteChannel1, seekableByteChannel5, seekableByteChannel9, seekableByteChannel13 };
        java.nio.channels.SeekableByteChannel seekableByteChannel17 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray16);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray19 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel20 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray19);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile21 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel20);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream22 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel20);
        char[] charArray23 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile24 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel20, charArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile25 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel17, "0x7875 Zip Extra Field: UID=1000 GID=1000", charArray23);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(seekableByteChannelArray4);
        org.junit.Assert.assertNotNull(seekableByteChannel5);
        org.junit.Assert.assertNotNull(seekableByteChannelArray8);
        org.junit.Assert.assertNotNull(seekableByteChannel9);
        org.junit.Assert.assertNotNull(seekableByteChannelArray12);
        org.junit.Assert.assertNotNull(seekableByteChannel13);
        org.junit.Assert.assertNotNull(seekableByteChannelArray16);
        org.junit.Assert.assertNotNull(seekableByteChannel17);
        org.junit.Assert.assertNotNull(seekableByteChannelArray19);
        org.junit.Assert.assertNotNull(seekableByteChannel20);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[]");
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        char[] charArray10 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile11 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2, charArray10);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS12 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger13 = x000A_NTFS12.getModifyTime();
        java.util.Date date14 = x000A_NTFS12.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger15 = x000A_NTFS12.getModifyTime();
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod16 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64;
        boolean boolean17 = zipEightByteInteger15.equals((java.lang.Object) sevenZMethod16);
        sevenZOutputFile11.setContentCompression(sevenZMethod16);
        java.io.File file19 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create(sevenZOutputFile11, file19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[4, a,  , a, #, 4]");
        org.junit.Assert.assertNotNull(zipEightByteInteger13);
        org.junit.Assert.assertNull(date14);
        org.junit.Assert.assertNotNull(zipEightByteInteger15);
        org.junit.Assert.assertTrue("'" + sevenZMethod16 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64 + "'", sevenZMethod16.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        java.nio.file.Path path0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(path0, 1687209590L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream7 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 257, "UTF8");
        cpioArchiveInputStream7.close();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry9 = cpioArchiveInputStream7.getNextCPIOEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        java.nio.channels.SeekableByteChannel seekableByteChannel5 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream8 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream6, strMap7);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream9 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream8);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer10 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap11 = packer10.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream9, (java.util.Map<java.lang.String, java.lang.String>) strMap11);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField13 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField14 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean20 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray18, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior22 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray23 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray18, false, extraFieldParsingBehavior22);
        boolean boolean25 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray18, 32768);
        unrecognizedExtraField14.setLocalFileDataData(byteArray18);
        unrecognizedExtraField13.setCentralDirectoryData(byteArray18);
        pack200CompressorOutputStream12.write(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream4.write(byteArray18, 345, 255);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(packer10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.lang.String str3 = zipArchiveOutputStream2.getEncoding();
        boolean boolean4 = zipArchiveOutputStream2.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry7 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date8 = cpioArchiveEntry7.getLastModifiedDate();
        cpioArchiveEntry7.setRemoteDeviceMaj((long) 'a');
        int int11 = cpioArchiveEntry7.getAlignmentBoundary();
        boolean boolean12 = zipArchiveOutputStream2.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry7);
        zipArchiveOutputStream2.setComment("pack.code.attribute.");
        java.io.InputStream inputStream15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream15);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream16, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy19 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream21 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream16, pack200Strategy19, strMap20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, pack200Strategy19, strMap22);
        java.io.File file24 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create((org.apache.commons.compress.archivers.ArchiveOutputStream) zipArchiveOutputStream2, file24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTF8" + "'", str3, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(pack200Strategy19);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry3 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField4 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry3.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField4);
        byte[] byteArray6 = jarArchiveEntry3.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField7 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry3.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField7);
        byte[] byteArray9 = resourceAlignmentExtraField7.getLocalFileDataData();
        int int12 = zipArchiveInputStream1.read(byteArray9, 1000, 493);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipLong zipLong13 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMaj((long) 'a');
        int int10 = cpioArchiveEntry6.getAlignmentBoundary();
        boolean boolean11 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        cpioArchiveEntry6.setDeviceMin((long) 26128);
        cpioArchiveEntry6.setRemoteDeviceMin((long) 26128);
        long long16 = cpioArchiveEntry6.getDeviceMin();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 26128L + "'", long16 == 26128L);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray4 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile5 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray4);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField7 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong9 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray10 = zipLong9.getBytes();
        boolean boolean12 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray10, 32768);
        boolean boolean14 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray10, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode16 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray10, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode16);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock20 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray10, 488, (int) (short) 2);
        unicodePathExtraField7.setUnicodeName(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile22 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:19:20.457Z] ", byteArray10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode16 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode16.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        int int1 = dumpArchiveEntry0.getGroupId();
        java.util.Date date2 = null;
        // The following exception was thrown during execution in test generation
        try {
            dumpArchiveEntry0.setCreationTime(date2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        boolean boolean2 = asiExtraField0.isDirectory();
        boolean boolean3 = asiExtraField0.isDirectory();
        int int4 = asiExtraField0.getGroupId();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray6 = zipShort5.getBytes();
        boolean boolean8 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray6, (int) 'a');
        boolean boolean10 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray6, (int) (byte) 88);
        // The following exception was thrown during execution in test generation
        try {
            asiExtraField0.parseFromLocalFileData(byteArray6, 4, (int) (byte) 83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        boolean boolean1 = org.apache.commons.compress.archivers.zip.ZipUtil.isDosTime(1687209497L);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField0 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = null;
        unrecognizedExtraField0.setHeaderId(zipShort1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = unrecognizedExtraField0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray6 = zipLong5.getBytes();
        boolean boolean8 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray6, 32768);
        boolean boolean10 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray6, 0);
        unrecognizedExtraField0.setCentralDirectoryData(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger13 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byteArray6, 2162688);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2162695");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray4 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile5 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray4);
        org.apache.commons.compress.archivers.tar.TarFile tarFile6 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray7 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel8 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray7);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile9 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel8);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel8);
        char[] charArray11 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile12 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel8, charArray11);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile13 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray11);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField14 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean20 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray18, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior22 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray23 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray18, false, extraFieldParsingBehavior22);
        boolean boolean25 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray18, 32768);
        unrecognizedExtraField14.setLocalFileDataData(byteArray18);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort27 = unrecognizedExtraField14.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort28 = unrecognizedExtraField14.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS29 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger30 = x000A_NTFS29.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel31 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream32 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel31);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream34 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream32, strMap33);
        byte[] byteArray35 = new byte[] {};
        pack200CompressorOutputStream34.write(byteArray35);
        x000A_NTFS29.parseFromCentralDirectoryData(byteArray35, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort40 = x000A_NTFS29.getHeaderId();
        byte[] byteArray41 = x000A_NTFS29.getLocalFileDataData();
        unrecognizedExtraField14.setLocalFileDataData(byteArray41);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort43 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray44 = zipShort43.getBytes();
        boolean boolean46 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray44, (int) 'a');
        org.apache.commons.compress.archivers.tar.TarFile tarFile47 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray44);
        unrecognizedExtraField14.setCentralDirectoryData(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            sevenZOutputFile13.write(byteArray44, 257, 488);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current 7z entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray7);
        org.junit.Assert.assertNotNull(seekableByteChannel8);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zipShort27);
        org.junit.Assert.assertNotNull(zipShort28);
        org.junit.Assert.assertNotNull(zipEightByteInteger30);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(zipShort40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipShort43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile3 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        long long10 = tarArchiveEntry6.getSize();
        java.io.InputStream inputStream11 = tarFile3.getInputStream(tarArchiveEntry6);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(inputStream11);
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream lZMACompressorInputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream((java.io.InputStream) pack200CompressorInputStream12, 26625);
        long long15 = pack200CompressorInputStream12.getBytesRead();
        pack200CompressorInputStream12.close();
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream3 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters4 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters4.setWithZlibHeader(false);
        deflateParameters4.setWithZlibHeader(true);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream9 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) brotliCompressorInputStream3, deflateParameters4);
        brotliCompressorInputStream3.mark((int) (byte) 76);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = brotliCompressorInputStream3.read();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Brotli stream decoding failed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        int int10 = tarArchiveOutputStream6.getCount();
        tarArchiveOutputStream6.setBigNumberMode(1);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer13 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap14 = packer13.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream15 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) tarArchiveOutputStream6, (java.util.Map<java.lang.String, java.lang.String>) strMap14);
        java.nio.channels.SeekableByteChannel seekableByteChannel16 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream17 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel16);
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream19 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream17, strMap18);
        byte[] byteArray20 = new byte[] {};
        pack200CompressorOutputStream19.write(byteArray20);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior23 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray24 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray20, true, extraFieldParsingBehavior23);
        pack200CompressorOutputStream15.write(byteArray20);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(packer13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray24);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.io.File file2 = null;
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("false", file2, file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.lang.String str1 = org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename("LZ4 Parameters with BlockSize null, withContentChecksum false, withBlockChecksum false, withBlockDependency true");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "LZ4 Parameters with BlockSize null, withContentChecksum false, withBlockChecksum false, withBlockDependency true.xz" + "'", str1, "LZ4 Parameters with BlockSize null, withContentChecksum false, withBlockChecksum false, withBlockDependency true.xz");
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray4 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile5 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray4);
        org.apache.commons.compress.archivers.tar.TarFile tarFile6 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray7 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel8 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray7);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile9 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel8);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel8);
        char[] charArray11 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile12 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel8, charArray11);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile13 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray11);
        java.io.InputStream inputStream14 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream14);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream16 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream15);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream17 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream15);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = tarArchiveInputStream17.getCurrentEntry();
        // The following exception was thrown during execution in test generation
        try {
            sevenZOutputFile13.write((java.io.InputStream) tarArchiveInputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray7);
        org.junit.Assert.assertNotNull(seekableByteChannel8);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNull(tarArchiveEntry18);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        framedSnappyCompressorOutputStream4.finish();
        framedSnappyCompressorOutputStream4.finish();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream4, "pack.class.attribute.");
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream8.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Trying to close non-existent entry");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        java.nio.file.Path path3 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("error", seekableByteChannel2, path3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: error");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry2 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long3 = arArchiveEntry2.getLastModified();
        int int4 = arArchiveEntry2.getUserId();
        long long5 = arArchiveEntry2.getLength();
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters6 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters6.setDeflateStrategy((int) (short) 3);
        int int9 = gzipParameters6.getDeflateStrategy();
        gzipParameters6.setModificationTime((long) 60012);
        boolean boolean12 = arArchiveEntry2.equals((java.lang.Object) 60012);
        int int13 = arArchiveEntry2.getMode();
        int int14 = arArchiveEntry2.getGroupId();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1687209613L + "'", long3 == 1687209613L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 12L + "'", long5 == 12L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 33188 + "'", int13 == 33188);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit0 = new org.apache.commons.compress.archivers.zip.GeneralPurposeBit();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry2 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray4 = jarArchiveEntry2.getExtraFields(true);
        boolean boolean5 = jarArchiveEntry2.isUnixSymlink();
        boolean boolean6 = generalPurposeBit0.equals((java.lang.Object) boolean5);
        java.nio.channels.SeekableByteChannel seekableByteChannel7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream10 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream8, strMap9);
        java.lang.Class<?> wildcardClass11 = zipArchiveOutputStream8.getClass();
        boolean boolean12 = generalPurposeBit0.equals((java.lang.Object) zipArchiveOutputStream8);
        generalPurposeBit0.useStrongEncryption(true);
        org.junit.Assert.assertNotNull(zipExtraFieldArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField1 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean7 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray5, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior9 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray5, false, extraFieldParsingBehavior9);
        boolean boolean12 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray5, 32768);
        unrecognizedExtraField1.setLocalFileDataData(byteArray5);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort14 = unrecognizedExtraField1.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort15 = unrecognizedExtraField1.getLocalFileDataLength();
        byte[] byteArray16 = unrecognizedExtraField1.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes((long) (byte) 103, byteArray16, (int) (short) -1, 67324752);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 67324748");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zipShort14);
        org.junit.Assert.assertNotNull(zipShort15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 1, 1]");
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        java.lang.String str0 = org.apache.commons.compress.java.util.jar.Pack200.Packer.STRIP;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "strip" + "'", str0, "strip");
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean4 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray2, 3);
        boolean boolean6 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray2, (int) (byte) 53);
        boolean boolean8 = org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byteArray2, 0);
        org.apache.commons.compress.archivers.tar.TarFile tarFile10 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray2, "latest");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipShort.putShort((int) (byte) 2, byteArray2, 75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 75");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm1 = x0016_CertificateIdForCentralDirectory0.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm2 = x0016_CertificateIdForCentralDirectory0.getHashAlgorithm();
        byte[] byteArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            x0016_CertificateIdForCentralDirectory0.parseFromCentralDirectoryData(byteArray3, 16384, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(hashAlgorithm1);
        org.junit.Assert.assertNull(hashAlgorithm2);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory1 = new org.apache.commons.compress.compressors.CompressorStreamFactory(false);
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory4 = new org.apache.commons.compress.compressors.CompressorStreamFactory(false);
        java.io.InputStream inputStream6 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream7 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream6);
        zipArchiveInputStream7.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream7);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy11 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream10, pack200Strategy11);
        org.apache.commons.compress.compressors.CompressorInputStream compressorInputStream14 = compressorStreamFactory4.createCompressorInputStream("zstd", (java.io.InputStream) pack200CompressorInputStream12, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.CompressorInputStream compressorInputStream16 = compressorStreamFactory1.createCompressorInputStream("LZ4 Parameters with BlockSize M1, withContentChecksum true, withBlockChecksum false, withBlockDependency false", (java.io.InputStream) pack200CompressorInputStream12, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.compressors.CompressorException; message: Compressor: LZ4 Parameters with BlockSize M1, withContentChecksum true, withBlockChecksum false, withBlockDependency false not found.");
        } catch (org.apache.commons.compress.compressors.CompressorException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy11);
        org.junit.Assert.assertNotNull(compressorInputStream14);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        java.io.File file0 = null;
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes(1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(file0, byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1, 0]");
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean4 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray2, 3);
        boolean boolean6 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray2, (int) (byte) 53);
        long long9 = org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byteArray2, 1, 476);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField10 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField(".bz2", byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray2, (int) (byte) 83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField0 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        boolean boolean5 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray3, 32768);
        boolean boolean7 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray3, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode9 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray3, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode9);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock13 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray3, 488, (int) (short) 2);
        unicodePathExtraField0.setUnicodeName(byteArray3);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField16 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray3, false, unparseableExtraField16);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: Bad extra field starting at 0.  Block length of 65535 bytes exceeds remaining data of 0 bytes.");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode9 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode9.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
        org.junit.Assert.assertNotNull(unparseableExtraField16);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream6 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize8 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder12 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder14 = builder12.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder16 = builder14.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters17 = builder16.build();
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters18 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize8, true, false, false, parameters17);
        int int19 = parameters17.getNiceBackReferenceLength();
        int int20 = parameters17.getMaxCandidates();
        org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream snappyCompressorOutputStream21 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream6, 18L, parameters17);
        framedSnappyCompressorOutputStream6.finish();
        org.junit.Assert.assertTrue("'" + blockSize8 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize8.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(parameters17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 512 + "'", int20 == 512);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer2 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream4, strMap5);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream7 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream6);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort8 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray9 = zipShort8.getBytes();
        boolean boolean11 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray9, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray9, true);
        gzipCompressorOutputStream7.write(byteArray9);
        closeableConsumer2.accept((java.io.Closeable) gzipCompressorOutputStream7);
        org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream lZMACompressorOutputStream16 = new org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream7);
        lZMACompressorOutputStream16.flush();
        java.io.File file18 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("apkm", (java.io.OutputStream) lZMACompressorOutputStream16, file18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: apkm not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer2);
        org.junit.Assert.assertNotNull(zipShort8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry10 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        int int11 = arjArchiveEntry10.getHostOs();
        boolean boolean12 = arjArchiveEntry10.isDirectory();
        org.apache.commons.compress.archivers.examples.Expander expander13 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray14 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray14);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile16 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel15);
        org.apache.commons.compress.archivers.tar.TarFile tarFile17 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel15);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry20 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path21 = tarArchiveEntry20.getPath();
        java.nio.file.attribute.FileTime fileTime22 = null;
        tarArchiveEntry20.setCreationTime(fileTime22);
        long long24 = tarArchiveEntry20.getSize();
        java.io.InputStream inputStream25 = tarFile17.getInputStream(tarArchiveEntry20);
        java.nio.file.Path path26 = null;
        expander13.expand(tarFile17, path26);
        boolean boolean28 = arjArchiveEntry10.equals((java.lang.Object) tarFile17);
        java.nio.file.Path path29 = null;
        expander0.expand(tarFile17, path29);
        org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile31 = null;
        java.nio.file.Path path32 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand(sevenZFile31, path32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(seekableByteChannelArray14);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNull(path21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry4 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry4.setVolume((int) (byte) 120);
        boolean boolean7 = dumpArchiveEntry4.isDeleted();
        boolean boolean8 = dumpArchiveEntry4.isFile();
        // The following exception was thrown during execution in test generation
        try {
            sevenZOutputFile3.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) dumpArchiveEntry4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.dump.DumpArchiveEntry cannot be cast to org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort0 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray1 = zipShort0.getBytes();
        boolean boolean3 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray1, (int) 'a');
        boolean boolean5 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray1, (int) (byte) 88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byteArray1, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, 26625, 511, "pack.effort", true);
        org.apache.commons.compress.archivers.tar.TarFile tarFile8 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, "apk");
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        boolean boolean3 = jarArchiveEntry1.isStreamContiguous();
        long long4 = jarArchiveEntry1.getDataOffset();
        boolean boolean5 = jarArchiveEntry1.isUnixSymlink();
        java.nio.file.attribute.FileTime fileTime6 = jarArchiveEntry1.getLastAccessTime();
        java.lang.String str7 = jarArchiveEntry1.getName();
        java.util.jar.Attributes attributes8 = jarArchiveEntry1.getManifestAttributes();
        jarArchiveEntry1.setAlignment(4);
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(fileTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bzip2" + "'", str7, "bzip2");
        org.junit.Assert.assertNull(attributes8);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMaj((long) 'a');
        int int10 = cpioArchiveEntry6.getAlignmentBoundary();
        boolean boolean11 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        zipArchiveOutputStream1.setComment("pack.code.attribute.");
        java.io.InputStream inputStream14 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream14);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream15, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy18 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream20 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream15, pack200Strategy18, strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, pack200Strategy18, strMap21);
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            pack200CompressorOutputStream22.write(byteArray24, (int) (short) 1, 21);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pack200Strategy18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 33, 0]");
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        java.util.concurrent.ExecutorService executorService0 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier scatterGatherBackingStoreSupplier1 = null;
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator2 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, scatterGatherBackingStoreSupplier1);
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel3);
        java.lang.String str5 = zipArchiveOutputStream4.getEncoding();
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream6 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream4);
        java.lang.String str7 = jarArchiveOutputStream6.getEncoding();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream8 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream6);
        // The following exception was thrown during execution in test generation
        try {
            parallelScatterZipCreator2.writeTo((org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream) jarArchiveOutputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTF8" + "'", str5, "UTF8");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        java.io.File file1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) (byte) -1, file1, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        long long7 = tarArchiveEntry2.getRealSize();
        boolean boolean8 = tarArchiveEntry2.isBlockDevice();
        java.lang.String str9 = tarArchiveEntry2.getGroupName();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = tarArchiveEntry2.getExtraPaxHeaders();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp11 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = x5455_ExtendedTimestamp11.getAccessTime();
        byte[] byteArray13 = x5455_ExtendedTimestamp11.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path17 = tarArchiveEntry16.getPath();
        java.nio.file.attribute.FileTime fileTime18 = null;
        tarArchiveEntry16.setCreationTime(fileTime18);
        java.nio.file.attribute.FileTime fileTime20 = tarArchiveEntry16.getLastModifiedTime();
        x5455_ExtendedTimestamp11.setAccessFileTime(fileTime20);
        tarArchiveEntry2.setCreationTime(fileTime20);
        boolean boolean23 = tarArchiveEntry2.isFIFO();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(zipLong12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0]");
        org.junit.Assert.assertNull(path17);
        org.junit.Assert.assertNotNull(fileTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        int int1 = dumpArchiveEntry0.getNlink();
        long long2 = dumpArchiveEntry0.getOffset();
        boolean boolean3 = dumpArchiveEntry0.isFile();
        java.lang.String str4 = dumpArchiveEntry0.toString();
        dumpArchiveEntry0.setOffset((long) (byte) -1);
        int int7 = dumpArchiveEntry0.getGeneration();
        boolean boolean8 = dumpArchiveEntry0.isChrDev();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        boolean boolean3 = jarArchiveEntry1.isStreamContiguous();
        long long4 = jarArchiveEntry1.getDataOffset();
        boolean boolean5 = jarArchiveEntry1.isUnixSymlink();
        java.nio.file.attribute.FileTime fileTime6 = jarArchiveEntry1.getLastAccessTime();
        boolean boolean7 = jarArchiveEntry1.isStreamContiguous();
        java.util.Date date8 = jarArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp9 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong10 = x5455_ExtendedTimestamp9.getAccessTime();
        byte[] byteArray11 = x5455_ExtendedTimestamp9.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path15 = tarArchiveEntry14.getPath();
        java.nio.file.attribute.FileTime fileTime16 = null;
        tarArchiveEntry14.setCreationTime(fileTime16);
        java.nio.file.attribute.FileTime fileTime18 = tarArchiveEntry14.getLastModifiedTime();
        x5455_ExtendedTimestamp9.setAccessFileTime(fileTime18);
        java.util.zip.ZipEntry zipEntry20 = jarArchiveEntry1.setLastModifiedTime(fileTime18);
        java.lang.String str21 = zipEntry20.getComment();
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(fileTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNull(zipLong10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0]");
        org.junit.Assert.assertNull(path15);
        org.junit.Assert.assertNotNull(fileTime18);
        org.junit.Assert.assertNotNull(zipEntry20);
        org.junit.Assert.assertEquals(zipEntry20.toString(), "bzip2");
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.util.concurrent.ExecutorService executorService1 = null;
        java.nio.file.Path path2 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier3 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path2);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator4 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService1, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator6 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier3, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Compression level is expected between -1~9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        int int7 = pack200CompressorInputStream6.read();
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream8);
        zipArchiveInputStream9.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream9);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy13 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream12, pack200Strategy13);
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream16, strMap17);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream19 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream18);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer20 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap21 = packer20.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream19, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, pack200Strategy13, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream24 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream25 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = deflate64CompressorInputStream25.read();
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: Truncated Deflate64 Stream");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 80 + "'", int7 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy13);
        org.junit.Assert.assertNotNull(packer20);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        int int2 = zipArchiveOutputStream1.getCount();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry5 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long6 = arArchiveEntry5.getLastModified();
        long long7 = arArchiveEntry5.getLength();
        boolean boolean8 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) arArchiveEntry5);
        long long9 = arArchiveEntry5.getSize();
        java.lang.String str10 = arArchiveEntry5.getName();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1687209615L + "'", long6 == 1687209615L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 12L + "'", long7 == 12L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 12L + "'", long9 == 12L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "lzma" + "'", str10, "lzma");
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        boolean boolean1 = org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename("hi!");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.apache.commons.compress.MemoryLimitException memoryLimitException2 = new org.apache.commons.compress.MemoryLimitException((long) 5, (int) (byte) 52);
        int int3 = memoryLimitException2.getMemoryLimitInKb();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField5 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong7 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray8 = zipLong7.getBytes();
        boolean boolean10 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray8, 32768);
        boolean boolean12 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray8, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode14 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray8, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode14);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock18 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray8, 488, (int) (short) 2);
        unicodePathExtraField5.setUnicodeName(byteArray8);
        pack200CompressorOutputStream3.write(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            pack200CompressorOutputStream3.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode14 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode14.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.util.Set<java.lang.String> strSet1 = archiveStreamFactory0.getInputStreamArchiveNames();
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream4, strMap5);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date10 = cpioArchiveEntry9.getLastModifiedDate();
        cpioArchiveEntry9.setRemoteDeviceMin((long) 12);
        boolean boolean13 = zipArchiveOutputStream4.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry9);
        long long14 = zipArchiveOutputStream4.getBytesWritten();
        zipArchiveOutputStream4.setMethod(0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream18 = archiveStreamFactory0.createArchiveOutputStream("pack.unknown.attribute", (java.io.OutputStream) zipArchiveOutputStream4, "pack.class.attribute.");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: pack.unknown.attribute not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setRemoteDeviceMaj((long) 'a');
        boolean boolean6 = cpioArchiveEntry2.isBlockDevice();
        boolean boolean7 = cpioArchiveEntry2.isRegularFile();
        long long8 = cpioArchiveEntry2.getSize();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 52L + "'", long8 == 52L);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        byte[] byteArray2 = x0017_StrongEncryptionHeader0.getCentralDirectoryData();
        long long3 = x0017_StrongEncryptionHeader0.getRecordCount();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = x0017_StrongEncryptionHeader0.getHeaderId();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS5 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger6 = x000A_NTFS5.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream10 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream8, strMap9);
        byte[] byteArray11 = new byte[] {};
        pack200CompressorOutputStream10.write(byteArray11);
        x000A_NTFS5.parseFromCentralDirectoryData(byteArray11, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort16 = x000A_NTFS5.getHeaderId();
        byte[] byteArray17 = x000A_NTFS5.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort18 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray17);
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseFromLocalFileData(byteArray17, 36864, 26625);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNotNull(zipEightByteInteger6);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(zipShort16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        java.lang.String str1 = org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename("LZ4 Parameters with BlockSize null, withContentChecksum false, withBlockChecksum false, withBlockDependency true.xz");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "LZ4 Parameters with BlockSize null, withContentChecksum false, withBlockChecksum false, withBlockDependency true.xz" + "'", str1, "LZ4 Parameters with BlockSize null, withContentChecksum false, withBlockChecksum false, withBlockDependency true.xz");
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters0.setDeflateStrategy((int) (short) 3);
        int int3 = gzipParameters0.getDeflateStrategy();
        gzipParameters0.setFilename("ustar ");
        java.lang.String str6 = gzipParameters0.getFilename();
        int int7 = gzipParameters0.getCompressionLevel();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ustar " + "'", str6, "ustar ");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField0 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = unicodeCommentExtraField0.getLocalFileDataLength();
        byte[] byteArray2 = unicodeCommentExtraField0.getCentralDirectoryData();
        byte[] byteArray3 = unicodeCommentExtraField0.getLocalFileDataData();
        byte[] byteArray5 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean7 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray5, 3);
        // The following exception was thrown during execution in test generation
        try {
            unicodeCommentExtraField0.parseFromLocalFileData(byteArray5, 8192, 4096);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8192");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray2 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray2);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel3);
        org.apache.commons.compress.archivers.tar.TarFile tarFile9 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel3, (int) (short) 4, 512, "pass", false);
        org.apache.commons.compress.archivers.tar.TarFile tarFile14 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel3, 11, (int) (byte) 4, "keep", true);
        java.nio.file.Path path15 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("070702", seekableByteChannel3, path15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 070702");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray2);
        org.junit.Assert.assertNotNull(seekableByteChannel3);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm1 = x0017_StrongEncryptionHeader0.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField6 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(0, false, 9);
        byte[] byteArray7 = resourceAlignmentExtraField6.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseFromLocalFileData(byteArray7, 5, 4096);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader is too short, only 0 bytes, expected at least 9");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(hashAlgorithm1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        java.nio.file.Path path5 = null;
        java.nio.file.LinkOption[] linkOptionArray7 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = cpioArchiveOutputStream4.createArchiveEntry(path5, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ", linkOptionArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(linkOptionArray7);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry2 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long3 = arArchiveEntry2.getLastModified();
        boolean boolean4 = arArchiveEntry2.isDirectory();
        long long5 = arArchiveEntry2.getSize();
        long long6 = arArchiveEntry2.getLength();
        boolean boolean7 = arArchiveEntry2.isDirectory();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1687209616L + "'", long3 == 1687209616L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 12L + "'", long5 == 12L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 12L + "'", long6 == 12L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setRemoteDeviceMaj((long) 'a');
        boolean boolean6 = cpioArchiveEntry2.isBlockDevice();
        boolean boolean7 = cpioArchiveEntry2.isDirectory();
        long long8 = cpioArchiveEntry2.getDeviceMaj();
        long long9 = cpioArchiveEntry2.getUID();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        boolean boolean2 = asiExtraField0.isDirectory();
        asiExtraField0.setLinkedFile("error");
        asiExtraField0.setMode(345);
        asiExtraField0.setMode((int) (short) -1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.apache.commons.compress.java.util.jar.Pack200.Unpacker unpacker0 = org.apache.commons.compress.java.util.jar.Pack200.newUnpacker();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2, 488);
        java.util.jar.JarOutputStream jarOutputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            unpacker0.unpack((java.io.InputStream) tarArchiveInputStream6, jarOutputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Must specify both input and output streams");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(unpacker0);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        int int0 = org.apache.commons.compress.archivers.tar.TarConstants.ATIMELEN_XSTAR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 12 + "'", int0 == 12);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        int int0 = org.apache.commons.compress.archivers.tar.TarConstants.FORMAT_POSIX;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 3 + "'", int0 == 3);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream2, true);
        int int5 = tarArchiveInputStream4.getRecordSize();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry7 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData8 = jarArchiveEntry7.getUnparseableExtraFieldData();
        jarArchiveEntry7.setCompressedSize((long) 64);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature11 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException12 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature11);
        boolean boolean13 = jarArchiveEntry7.equals((java.lang.Object) unsupportedZipFeatureException12);
        boolean boolean14 = tarArchiveInputStream4.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry7);
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveEntry7.setAlignment(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid value for alignment, must be power of two and no bigger than 65535 but is 6");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 512 + "'", int5 == 512);
        org.junit.Assert.assertNull(unparseableExtraFieldData8);
        org.junit.Assert.assertNotNull(feature11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        java.io.File file0 = null;
        char[] charArray6 = new char[] { 'a', '#', 'a', '#', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile7 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(file0, charArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "a#a# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "a#a# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[a, #, a, #,  ]");
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy5 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream4, pack200Strategy5);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry7 = jarArchiveInputStream4.getNextJarEntry();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream8 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream4);
        int int9 = pack200CompressorInputStream8.read();
        org.junit.Assert.assertNotNull(pack200Strategy5);
        org.junit.Assert.assertNull(jarArchiveEntry7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 80 + "'", int9 == 80);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory0 = new org.apache.commons.compress.compressors.CompressorStreamFactory();
        java.lang.Boolean boolean1 = compressorStreamFactory0.getDecompressUntilEOF();
        org.junit.Assert.assertNull(boolean1);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) -1, "0x5455 Zip Extra Field: Flags=0 ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown header type -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        java.nio.file.Path path0 = null;
        java.nio.file.LinkOption[] linkOptionArray2 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry3 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry(path0, "LZ4 Parameters with BlockSize M1, withContentChecksum true, withBlockChecksum false, withBlockDependency false", linkOptionArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(linkOptionArray2);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile3 = new org.apache.commons.compress.archivers.zip.ZipFile(file0, "pack.modification.time", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder0 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder2 = builder0.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder4 = builder2.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder6 = builder2.withMinBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder8 = builder6.withNiceBackReferenceLength(8);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder9 = builder8.tunedForCompressionRatio();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet1 = org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.find(32768);
        org.junit.Assert.assertNotNull(pERMISSIONSet1);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setChksum(0L);
        boolean boolean6 = cpioArchiveEntry2.isSocket();
        cpioArchiveEntry2.setRemoteDeviceMaj(1687209545L);
        long long9 = cpioArchiveEntry2.getSize();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(file0, "tar\000");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        long long2 = x0017_StrongEncryptionHeader0.getRecordCount();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = x0017_StrongEncryptionHeader0.getHeaderId();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(zipShort3);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator3 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier2.get();
        java.util.concurrent.ExecutorService executorService5 = null;
        java.nio.file.Path path6 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier7 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path6);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator8 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService5, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier7);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore9 = defaultBackingStoreSupplier7.get();
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore10 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore11 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor12 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore11);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream13 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore10, streamCompressor12);
        long long14 = streamCompressor12.getTotalBytesWritten();
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream15 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore9, streamCompressor12);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream16 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore4, streamCompressor12);
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField20 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(3, false, 1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort21 = resourceAlignmentExtraField20.getHeaderId();
        byte[] byteArray22 = resourceAlignmentExtraField20.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            scatterGatherBackingStore4.writeOut(byteArray22, 420, (int) (short) 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore9);
        org.junit.Assert.assertNotNull(streamCompressor12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(zipShort21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[3, 0]");
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.apache.commons.compress.archivers.dump.InvalidFormatException invalidFormatException1 = new org.apache.commons.compress.archivers.dump.InvalidFormatException((long) '4');
        java.lang.String str2 = invalidFormatException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 52." + "'", str2, "org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 52.");
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean4 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray2, 3);
        boolean boolean6 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray2, (int) (byte) 53);
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            jarMarker0.parseFromCentralDirectoryData(byteArray2, 65535, 16877);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: JarMarker doesn't expect any data");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jarMarker0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        java.io.File file4 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create(sevenZOutputFile3, file4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry8 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path9 = tarArchiveEntry8.getPath();
        java.nio.file.attribute.FileTime fileTime10 = null;
        tarArchiveEntry8.setCreationTime(fileTime10);
        int int12 = tarArchiveEntry8.getUserId();
        java.util.Date date13 = tarArchiveEntry8.getModTime();
        int int14 = tarArchiveEntry8.getUserId();
        int int15 = tarArchiveEntry8.getMode();
        // The following exception was thrown during execution in test generation
        try {
            arArchiveOutputStream5.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(path9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Jun 19 23:20:17 CEST 2023");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 33188 + "'", int15 == 33188);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 29, "070702");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry6 = zipArchiveInputStream1.getNextZipEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature2 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        java.lang.String str3 = feature2.toString();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry5 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long6 = jarArchiveEntry5.getDataOffset();
        byte[] byteArray7 = jarArchiveEntry5.getRawName();
        jarArchiveEntry5.setInternalAttributes(1024);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException10 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature2, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry5);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry12 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField13 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry12.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField13);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException15 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature2, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry12);
        byte[] byteArray16 = jarArchiveEntry12.getCentralDirectoryExtra();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile17 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, byteArray16);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(feature2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "data descriptor" + "'", str3, "data descriptor");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[30, -95, 2, 0, 0, 0]");
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.apache.commons.compress.archivers.ArchiveException archiveException1 = new org.apache.commons.compress.archivers.ArchiveException("0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:19:20.457Z] ");
        java.lang.String str2 = archiveException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.compress.archivers.ArchiveException: 0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:19:20.457Z] " + "'", str2, "org.apache.commons.compress.archivers.ArchiveException: 0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:19:20.457Z] ");
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 29, "070702");
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream5);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path10 = tarArchiveEntry9.getPath();
        java.nio.file.attribute.FileTime fileTime11 = null;
        tarArchiveEntry9.setCreationTime(fileTime11);
        int int13 = tarArchiveEntry9.getUserId();
        long long14 = tarArchiveEntry9.getRealSize();
        boolean boolean15 = tarArchiveEntry9.isBlockDevice();
        java.lang.String str16 = tarArchiveEntry9.getGroupName();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = tarArchiveEntry9.getExtraPaxHeaders();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) cpioArchiveInputStream5, strMap17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream gzipCompressorInputStream20 = new org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream((java.io.InputStream) cpioArchiveInputStream5, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Input is not in the .gz format");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray2 = zipLong1.getBytes();
        boolean boolean4 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray2, 32768);
        boolean boolean6 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray2, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode8 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray9 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray2, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode8);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock12 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray2, 488, (int) (short) 2);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType blockType13 = literalBlock12.getType();
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType blockType14 = literalBlock12.getType();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode8 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode8.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray9);
        org.junit.Assert.assertTrue("'" + blockType13 + "' != '" + org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.LITERAL + "'", blockType13.equals(org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.LITERAL));
        org.junit.Assert.assertTrue("'" + blockType14 + "' != '" + org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.LITERAL + "'", blockType14.equals(org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Block.BlockType.LITERAL));
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry0 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        int int1 = arjArchiveEntry0.getHostOs();
        int int2 = arjArchiveEntry0.getUnixMode();
        int int3 = arjArchiveEntry0.getHostOs();
        boolean boolean4 = arjArchiveEntry0.isHostOsUnix();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT;
        java.util.Set<java.lang.String> strSet1 = archiveStreamFactory0.getOutputStreamArchiveNames();
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.archivers.ArchiveStreamProvider> strMap2 = archiveStreamFactory0.getArchiveOutputStreamProviders();
        org.junit.Assert.assertNotNull(archiveStreamFactory0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strMap2);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray7 = zipShort6.getBytes();
        boolean boolean9 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray7, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray7, true);
        gzipCompressorOutputStream5.write(byteArray7);
        closeableConsumer0.accept((java.io.Closeable) gzipCompressorOutputStream5);
        org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream lZMACompressorOutputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream5);
        lZMACompressorOutputStream14.flush();
        lZMACompressorOutputStream14.flush();
        lZMACompressorOutputStream14.finish();
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Block size must be a multiple of 512 bytes. Attempt to use set size of 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.util.Date date2 = x000A_NTFS0.getCreateJavaTime();
        byte[] byteArray3 = x000A_NTFS0.getCentralDirectoryData();
        java.util.Date date4 = x000A_NTFS0.getCreateJavaTime();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNull(date2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(date4);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.util.Date date2 = x000A_NTFS0.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger3 = x000A_NTFS0.getModifyTime();
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod4 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64;
        boolean boolean5 = zipEightByteInteger3.equals((java.lang.Object) sevenZMethod4);
        java.lang.Object obj6 = null;
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration sevenZMethodConfiguration7 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration(sevenZMethod4, obj6);
        java.lang.Object obj8 = sevenZMethodConfiguration7.getOptions();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNull(date2);
        org.junit.Assert.assertNotNull(zipEightByteInteger3);
        org.junit.Assert.assertTrue("'" + sevenZMethod4 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64 + "'", sevenZMethod4.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = x000A_NTFS0.getHeaderId();
        byte[] byteArray12 = x000A_NTFS0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS13 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger14 = x000A_NTFS13.getModifyTime();
        java.util.Date date15 = x000A_NTFS13.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger16 = x000A_NTFS13.getModifyTime();
        byte[] byteArray17 = x000A_NTFS13.getCentralDirectoryData();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry19 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData20 = jarArchiveEntry19.getUnparseableExtraFieldData();
        jarArchiveEntry19.setCompressedSize((long) 64);
        int int23 = jarArchiveEntry19.getRawFlag();
        jarArchiveEntry19.setExternalAttributes((long) (byte) 51);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource26 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry19.setCommentSource(commentSource26);
        jarArchiveEntry19.setTime((long) 16);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry32 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path33 = tarArchiveEntry32.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry36 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path37 = tarArchiveEntry36.getPath();
        java.nio.file.attribute.FileTime fileTime38 = null;
        tarArchiveEntry36.setCreationTime(fileTime38);
        java.nio.file.attribute.FileTime fileTime40 = tarArchiveEntry36.getLastModifiedTime();
        tarArchiveEntry32.setLastAccessTime(fileTime40);
        boolean boolean42 = tarArchiveEntry32.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime43 = tarArchiveEntry32.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry44 = jarArchiveEntry19.setLastAccessTime(fileTime43);
        x000A_NTFS13.setCreateFileTime(fileTime43);
        x000A_NTFS0.setModifyFileTime(fileTime43);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry49 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path50 = tarArchiveEntry49.getPath();
        java.nio.file.attribute.FileTime fileTime51 = null;
        tarArchiveEntry49.setCreationTime(fileTime51);
        java.nio.file.attribute.FileTime fileTime53 = tarArchiveEntry49.getLastModifiedTime();
        boolean boolean54 = tarArchiveEntry49.isSparse();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry57 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.attribute.FileTime fileTime58 = tarArchiveEntry57.getLastModifiedTime();
        tarArchiveEntry49.setModTime(fileTime58);
        x000A_NTFS0.setModifyFileTime(fileTime58);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort61 = x000A_NTFS0.getCentralDirectoryLength();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipShort11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipEightByteInteger14);
        org.junit.Assert.assertNull(date15);
        org.junit.Assert.assertNotNull(zipEightByteInteger16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(unparseableExtraFieldData20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + commentSource26 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD + "'", commentSource26.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNull(path33);
        org.junit.Assert.assertNull(path37);
        org.junit.Assert.assertNotNull(fileTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(fileTime43);
        org.junit.Assert.assertNotNull(zipEntry44);
        org.junit.Assert.assertEquals(zipEntry44.toString(), "bzip2");
        org.junit.Assert.assertNull(path50);
        org.junit.Assert.assertNotNull(fileTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(fileTime58);
        org.junit.Assert.assertNotNull(zipShort61);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMaj((long) 'a');
        int int10 = cpioArchiveEntry6.getAlignmentBoundary();
        boolean boolean11 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        zipArchiveOutputStream1.setComment("pack.code.attribute.");
        java.io.InputStream inputStream14 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream14);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream15, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy18 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream20 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream15, pack200Strategy18, strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, pack200Strategy18, strMap21);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pack200Strategy18);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setChksum(0L);
        boolean boolean6 = cpioArchiveEntry2.isSocket();
        cpioArchiveEntry2.setRemoteDeviceMaj(1687209545L);
        long long9 = cpioArchiveEntry2.getDeviceMaj();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.lang.Object obj1 = x5455_ExtendedTimestamp0.clone();
        byte[] byteArray2 = x5455_ExtendedTimestamp0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding4 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("lzma");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray2, zipEncoding4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNotNull(zipEncoding4);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore0 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore1 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor2 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore1);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream3 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore0, streamCompressor2);
        long long4 = streamCompressor2.getTotalBytesWritten();
        streamCompressor2.close();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong7 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray8 = zipLong7.getBytes();
        boolean boolean10 = org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byteArray8, 1024);
        // The following exception was thrown during execution in test generation
        try {
            streamCompressor2.writeCounted(byteArray8, 100, 76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(streamCompressor2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long2 = jarArchiveEntry1.getDataOffset();
        int int3 = jarArchiveEntry1.getInternalAttributes();
        java.nio.file.attribute.FileTime fileTime4 = jarArchiveEntry1.getCreationTime();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(fileTime4);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMaj((long) 'a');
        int int10 = cpioArchiveEntry6.getAlignmentBoundary();
        boolean boolean11 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        cpioArchiveEntry6.setDeviceMin((long) 26128);
        cpioArchiveEntry6.setRemoteDeviceMin((long) 26128);
        long long16 = cpioArchiveEntry6.getTime();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream6.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod0 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE;
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration sevenZMethodConfiguration1 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration(sevenZMethod0);
        java.lang.Object obj2 = null;
        boolean boolean3 = sevenZMethodConfiguration1.equals(obj2);
        org.junit.Assert.assertTrue("'" + sevenZMethod0 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE + "'", sevenZMethod0.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = sevenZArchiveEntry0.getLastModifiedDate();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The entry doesn't have this timestamp");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod0 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream4, "snappy-framed");
        tarArchiveOutputStream7.setAddPaxHeadersForNonAsciiNames(false);
        int int10 = tarArchiveOutputStream7.getRecordSize();
        int int11 = tarArchiveOutputStream7.getCount();
        tarArchiveOutputStream7.setAddPaxHeadersForNonAsciiNames(true);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry15 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData16 = jarArchiveEntry15.getUnparseableExtraFieldData();
        boolean boolean17 = jarArchiveEntry15.isStreamContiguous();
        long long18 = jarArchiveEntry15.getDataOffset();
        boolean boolean19 = jarArchiveEntry15.isUnixSymlink();
        java.nio.file.attribute.FileTime fileTime20 = jarArchiveEntry15.getLastAccessTime();
        boolean boolean21 = jarArchiveEntry15.isDirectory();
        jarArchiveEntry15.setVersionMadeBy(40960);
        java.io.InputStream inputStream24 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream25 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream24);
        zipArchiveInputStream25.mark((int) (byte) -1);
        long long29 = zipArchiveInputStream25.skip((long) 16877);
        java.nio.channels.SeekableByteChannel seekableByteChannel30 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream31 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream33 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream31, strMap32);
        byte[] byteArray34 = new byte[] {};
        pack200CompressorOutputStream33.write(byteArray34);
        int int38 = zipArchiveInputStream25.read(byteArray34, (int) (short) -1, (int) (byte) 50);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField40 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray41 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray34, false, unparseableExtraField40);
        byte[] byteArray42 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(zipExtraFieldArray41);
        jarArchiveEntry15.setExtraFields(zipExtraFieldArray41);
        boolean boolean44 = tarArchiveOutputStream7.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry15);
        jarArchiveEntry15.setCrc((long) 65536);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration sevenZMethodConfiguration47 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration(sevenZMethod0, (java.lang.Object) 65536);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The BCJ_IA64_FILTER method doesn't support options of type class java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + sevenZMethod0 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER + "'", sevenZMethod0.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 512 + "'", int10 == 512);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(unparseableExtraFieldData16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(fileTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(zipExtraFieldArray41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMaj((long) 'a');
        int int10 = cpioArchiveEntry6.getAlignmentBoundary();
        boolean boolean11 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        zipArchiveOutputStream1.setComment("pack.code.attribute.");
        java.io.InputStream inputStream14 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream14);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream15, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy18 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream20 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream15, pack200Strategy18, strMap19);
        java.util.Map<java.lang.String, java.lang.String> strMap21 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, pack200Strategy18, strMap21);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(pack200Strategy18);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        long long5 = zipArchiveInputStream1.skip((long) 16877);
        java.nio.channels.SeekableByteChannel seekableByteChannel6 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream7 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel6);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream9 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream7, strMap8);
        byte[] byteArray10 = new byte[] {};
        pack200CompressorOutputStream9.write(byteArray10);
        int int14 = zipArchiveInputStream1.read(byteArray10, (int) (short) -1, (int) (byte) 50);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField16 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray10, true, unparseableExtraField16);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray10, (int) (byte) 103);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT;
        archiveStreamFactory0.setEntryEncoding("data descriptor");
        java.util.Set<java.lang.String> strSet3 = archiveStreamFactory0.getOutputStreamArchiveNames();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray5 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel6 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray5);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile7 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel6);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel6);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream11 = archiveStreamFactory0.createArchiveOutputStream("", (java.io.OutputStream) zipArchiveOutputStream9, "lzma");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver:  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(archiveStreamFactory0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(seekableByteChannelArray5);
        org.junit.Assert.assertNotNull(seekableByteChannel6);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        byte byte2 = tarArchiveEntry1.getLinkFlag();
        tarArchiveEntry1.setGroupName("LZ4 Parameters with BlockSize null, withContentChecksum false, withBlockChecksum false, withBlockDependency true");
        java.util.Date date5 = tarArchiveEntry1.getModTime();
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 48 + "'", byte2 == (byte) 48);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Jun 19 23:20:19 CEST 2023");
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry("a\000");
        long long2 = zipArchiveEntry1.getCrc();
        java.lang.String str3 = zipArchiveEntry1.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "a\000" + "'", str3, "a\000");
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        java.nio.file.attribute.FileTime fileTime10 = tarArchiveEntry6.getLastModifiedTime();
        tarArchiveEntry2.setLastAccessTime(fileTime10);
        boolean boolean12 = tarArchiveEntry2.isGNULongNameEntry();
        long long13 = tarArchiveEntry2.getLongUserId();
        tarArchiveEntry2.setDevMinor(25461);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder0 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder2 = builder0.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder4 = builder2.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters5 = builder4.build();
        int int6 = parameters5.getLazyMatchingThreshold();
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.Callback callback7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.lz77support.LZ77Compressor lZ77Compressor8 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor(parameters5, callback7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: callback");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(parameters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        int int10 = tarArchiveOutputStream6.getCount();
        tarArchiveOutputStream6.setBigNumberMode(1);
        tarArchiveOutputStream6.setLongFileMode(61440);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6, (short) (byte) 2, (int) (byte) 52);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry19 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData20 = jarArchiveEntry19.getUnparseableExtraFieldData();
        jarArchiveEntry19.setCompressedSize((long) 64);
        int int23 = jarArchiveEntry19.getRawFlag();
        jarArchiveEntry19.setExternalAttributes((long) (byte) 51);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource26 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry19.setCommentSource(commentSource26);
        jarArchiveEntry19.setTime((long) 16);
        jarArchiveEntry19.setDiskNumberStart((long) 16384);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream17.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.jar.JarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(unparseableExtraFieldData20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + commentSource26 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD + "'", commentSource26.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD));
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        long long7 = pack200CompressorInputStream6.getBytesRead();
        long long9 = pack200CompressorInputStream6.skip(1687209505L);
        boolean boolean10 = pack200CompressorInputStream6.markSupported();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) pack200CompressorInputStream6, "bzip2");
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean16 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray14, 3);
        boolean boolean18 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray14, (int) (byte) 53);
        boolean boolean20 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray14, (int) ' ');
        org.apache.commons.compress.archivers.tar.TarFile tarFile21 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = pack200CompressorInputStream6.read(byteArray14, 5, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 29L + "'", long9 == 29L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str1 = x000A_NTFS0.toString();
        java.lang.String str2 = x000A_NTFS0.toString();
        java.lang.String str3 = x000A_NTFS0.toString();
        byte[] byteArray4 = x000A_NTFS0.getCentralDirectoryData();
        int int6 = org.apache.commons.compress.archivers.zip.ZipShort.getValue(byteArray4, 21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger(byteArray4, 96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 103");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str1, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str2, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str3, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        boolean boolean2 = asiExtraField0.isDirectory();
        asiExtraField0.setLinkedFile("error");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField8 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(0, false, 9);
        byte[] byteArray9 = resourceAlignmentExtraField8.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            asiExtraField0.parseFromCentralDirectoryData(byteArray9, 24576, 16877);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24576");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        deflateCompressorOutputStream16.flush();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream18 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) deflateCompressorOutputStream16);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean24 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray22, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior26 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray27 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray22, false, extraFieldParsingBehavior26);
        // The following exception was thrown during execution in test generation
        try {
            deflateCompressorOutputStream16.write(byteArray22, 2147483647, 131);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray27);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray1 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        byte[] byteArray2 = zip64ExtendedInformationExtraField0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger3 = zip64ExtendedInformationExtraField0.getSize();
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField5 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (short) 100);
        byte[] byteArray6 = resourceAlignmentExtraField5.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = resourceAlignmentExtraField5.getCentralDirectoryLength();
        byte[] byteArray8 = resourceAlignmentExtraField5.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            zip64ExtendedInformationExtraField0.parseFromCentralDirectoryData(byteArray8, 49152, (int) (byte) 49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNull(zipEightByteInteger3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 0]");
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100, 0]");
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64");
        java.nio.file.attribute.FileTime fileTime2 = tarArchiveEntry1.getCreationTime();
        int int3 = tarArchiveEntry1.getDevMajor();
        org.junit.Assert.assertNull(fileTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        byte[] byteArray1 = x0017_StrongEncryptionHeader0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS3 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger4 = x000A_NTFS3.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel5 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel5);
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream8 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream6, strMap7);
        byte[] byteArray9 = new byte[] {};
        pack200CompressorOutputStream8.write(byteArray9);
        x000A_NTFS3.parseFromCentralDirectoryData(byteArray9, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort14 = x000A_NTFS3.getHeaderId();
        byte[] byteArray15 = x000A_NTFS3.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort16 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseFromLocalFileData(byteArray15, 476, (int) (byte) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(byteArray1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipEightByteInteger4);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(zipShort14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes(26625);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry tarArchiveSparseEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry(byteArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[1, 104]");
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        boolean boolean2 = asiExtraField0.isDirectory();
        asiExtraField0.setLinkedFile("error");
        asiExtraField0.setLinkedFile("pack.effort");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = asiExtraField0.getCentralDirectoryLength();
        byte[] byteArray8 = zipShort7.getBytes();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[25, 0]");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        boolean boolean1 = org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename("zip");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        int int0 = org.apache.commons.compress.archivers.dump.DumpArchiveConstants.TP_SIZE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1024 + "'", int0 == 1024);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        int int0 = org.apache.commons.compress.archivers.tar.TarArchiveEntry.MAX_NAMELEN;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 31 + "'", int0 == 31);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream4 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
        int int5 = zipArchiveInputStream1.read();
        zipArchiveInputStream1.close();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        long long5 = zipArchiveInputStream1.skip((long) 16877);
        java.nio.channels.SeekableByteChannel seekableByteChannel6 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream7 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel6);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream9 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream7, strMap8);
        byte[] byteArray10 = new byte[] {};
        pack200CompressorOutputStream9.write(byteArray10);
        int int14 = zipArchiveInputStream1.read(byteArray10, (int) (short) -1, (int) (byte) 50);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path18 = tarArchiveEntry17.getPath();
        java.nio.file.attribute.FileTime fileTime19 = null;
        tarArchiveEntry17.setCreationTime(fileTime19);
        java.nio.file.attribute.FileTime fileTime21 = tarArchiveEntry17.getLastModifiedTime();
        boolean boolean22 = zipArchiveInputStream1.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry17);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry25 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path26 = tarArchiveEntry25.getPath();
        java.nio.file.attribute.FileTime fileTime27 = null;
        tarArchiveEntry25.setCreationTime(fileTime27);
        int int29 = tarArchiveEntry25.getUserId();
        long long30 = tarArchiveEntry25.getRealSize();
        java.util.Date date31 = tarArchiveEntry25.getLastModifiedDate();
        boolean boolean32 = tarArchiveEntry25.isLink();
        java.lang.String str33 = tarArchiveEntry25.getName();
        boolean boolean34 = tarArchiveEntry17.isDescendent(tarArchiveEntry25);
        boolean boolean35 = tarArchiveEntry25.isFIFO();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(path18);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(path26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Mon Jun 19 23:20:20 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "deflate64" + "'", str33, "deflate64");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder0 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder2 = builder0.withMaxMemoryLimitInKb(508);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder4 = builder0.withTryToRecoverBrokenArchives(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        int int7 = pack200CompressorInputStream6.read();
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream8);
        zipArchiveInputStream9.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream9);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy13 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream12, pack200Strategy13);
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream16, strMap17);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream19 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream18);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer20 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap21 = packer20.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream19, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, pack200Strategy13, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters24 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters24.setWithZlibHeader(false);
        int int27 = deflateParameters24.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream28 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, deflateParameters24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.arj.ArjArchiveInputStream arjArchiveInputStream30 = new org.apache.commons.compress.archivers.arj.ArjArchiveInputStream((java.io.InputStream) pack200CompressorInputStream6, "BackReference with offset 88 and length 100");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: null");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 80 + "'", int7 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy13);
        org.junit.Assert.assertNotNull(packer20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS11 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger12 = x000A_NTFS11.getModifyTime();
        java.util.Date date13 = x000A_NTFS11.getCreateJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path17 = tarArchiveEntry16.getPath();
        java.nio.file.attribute.FileTime fileTime18 = null;
        tarArchiveEntry16.setCreationTime(fileTime18);
        int int20 = tarArchiveEntry16.getUserId();
        java.util.Date date21 = tarArchiveEntry16.getModTime();
        x000A_NTFS11.setCreateJavaTime(date21);
        java.util.Date date23 = x000A_NTFS11.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger24 = x000A_NTFS11.getAccessTime();
        x000A_NTFS0.setModifyTime(zipEightByteInteger24);
        java.util.Date date26 = x000A_NTFS0.getAccessJavaTime();
        java.util.Date date27 = x000A_NTFS0.getCreateJavaTime();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger12);
        org.junit.Assert.assertNull(date13);
        org.junit.Assert.assertNull(path17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Mon Jun 19 23:20:20 CEST 2023");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Mon Jun 19 23:20:20 CEST 2023");
        org.junit.Assert.assertNotNull(zipEightByteInteger24);
        org.junit.Assert.assertNull(date26);
        org.junit.Assert.assertNull(date27);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray5 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel6 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray5);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream7 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel6);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile8 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel6);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray9 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel10 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray9);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile11 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel10);
        org.apache.commons.compress.archivers.tar.TarFile tarFile12 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel10);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray13 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel14 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray13);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile15 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel14);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel14);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray17 = new java.nio.channels.SeekableByteChannel[] { seekableByteChannel2, seekableByteChannel6, seekableByteChannel10, seekableByteChannel14 };
        java.nio.channels.SeekableByteChannel seekableByteChannel18 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray17);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile19 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel18);
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod20 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2;
        sevenZOutputFile19.setContentCompression(sevenZMethod20);
        java.nio.file.Path path22 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create(sevenZOutputFile19, path22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNotNull(seekableByteChannelArray5);
        org.junit.Assert.assertNotNull(seekableByteChannel6);
        org.junit.Assert.assertNotNull(seekableByteChannelArray9);
        org.junit.Assert.assertNotNull(seekableByteChannel10);
        org.junit.Assert.assertNotNull(seekableByteChannelArray13);
        org.junit.Assert.assertNotNull(seekableByteChannel14);
        org.junit.Assert.assertNotNull(seekableByteChannelArray17);
        org.junit.Assert.assertNotNull(seekableByteChannel18);
        org.junit.Assert.assertTrue("'" + sevenZMethod20 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2 + "'", sevenZMethod20.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2));
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField0 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = unicodePathExtraField0.getLocalFileDataLength();
        byte[] byteArray2 = unicodePathExtraField0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = unicodePathExtraField0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraFieldNoDefault(zipShort3);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNull(zipExtraField4);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile4 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("BackReference with offset 84446 and length 508", (byte) 0, false);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        java.lang.String str0 = org.apache.commons.compress.java.util.jar.Pack200.Packer.KEEP_FILE_ORDER;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "pack.keep.file.order" + "'", str0, "pack.keep.file.order");
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarFile tarFile2 = new org.apache.commons.compress.archivers.tar.TarFile(file0, "z");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        java.nio.file.attribute.FileTime fileTime6 = tarArchiveEntry2.getLastModifiedTime();
        long long7 = tarArchiveEntry2.getLongGroupId();
        boolean boolean8 = tarArchiveEntry2.isGNULongLinkEntry();
        boolean boolean9 = tarArchiveEntry2.isOldGNUSparse();
        tarArchiveEntry2.setGroupId((long) 67324752);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertNotNull(fileTime6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters0.setDeflateStrategy((int) (short) 3);
        int int3 = gzipParameters0.getDeflateStrategy();
        gzipParameters0.setFilename("ustar ");
        java.lang.String str6 = gzipParameters0.getFilename();
        int int7 = gzipParameters0.getBufferSize();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ustar " + "'", str6, "ustar ");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 512 + "'", int7 == 512);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        long long3 = cpioArchiveEntry2.getMode();
        cpioArchiveEntry2.setChksum(1L);
        boolean boolean6 = cpioArchiveEntry2.isBlockDevice();
        long long7 = cpioArchiveEntry2.getInode();
        long long8 = cpioArchiveEntry2.getDeviceMin();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32768L + "'", long3 == 32768L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        // The following exception was thrown during execution in test generation
        try {
            int int4 = tarArchiveInputStream3.available();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        long long7 = tarArchiveEntry2.getRealSize();
        java.lang.String str8 = tarArchiveEntry2.getName();
        long long9 = tarArchiveEntry2.getLongGroupId();
        boolean boolean10 = tarArchiveEntry2.isStreamContiguous();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deflate64" + "'", str8, "deflate64");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMaj((long) 'a');
        int int10 = cpioArchiveEntry6.getAlignmentBoundary();
        boolean boolean11 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        cpioArchiveEntry6.setDeviceMin((long) 26128);
        cpioArchiveEntry6.setRemoteDeviceMin((long) 26128);
        cpioArchiveEntry6.setGID((long) (byte) 120);
        boolean boolean18 = cpioArchiveEntry6.isBlockDevice();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes(0L);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes("apkm", byteArray2, (int) (short) 3, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 0]");
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path10 = tarArchiveEntry9.getPath();
        java.nio.file.attribute.FileTime fileTime11 = null;
        tarArchiveEntry9.setCreationTime(fileTime11);
        java.nio.file.attribute.FileTime fileTime13 = tarArchiveEntry9.getLastModifiedTime();
        tarArchiveEntry9.setNames(" \000", "UTF8");
        boolean boolean17 = tarArchiveInputStream3.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry9);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream18 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream3);
        int int19 = tarArchiveInputStream3.getRecordSize();
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertNull(path10);
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 512 + "'", int19 == 512);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        org.apache.commons.compress.changes.ChangeSet changeSet0 = new org.apache.commons.compress.changes.ChangeSet();
        changeSet0.deleteDir("hi!");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry3 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry3.setHasWindowsAttributes(false);
        sevenZArchiveEntry3.setHasLastModifiedDate(false);
        boolean boolean8 = sevenZArchiveEntry3.getHasCrc();
        java.io.InputStream inputStream9 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream9);
        zipArchiveInputStream10.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream13 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream10);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy14 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream15 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream13, pack200Strategy14);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) pack200CompressorInputStream15);
        changeSet0.add((org.apache.commons.compress.archivers.ArchiveEntry) sevenZArchiveEntry3, (java.io.InputStream) tarArchiveInputStream16);
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            sevenZArchiveEntry3.setContentMethods(sevenZMethodConfigurationArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(pack200Strategy14);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        int int0 = org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs.DOS;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        deflateCompressorOutputStream16.write(511);
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream blockLZ4CompressorOutputStream19 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream((java.io.OutputStream) deflateCompressorOutputStream16);
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField20 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        byte[] byteArray21 = asiExtraField20.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            blockLZ4CompressorOutputStream19.write(byteArray21, (int) (byte) 50, (int) (byte) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[118, 104, -118, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        tarArchiveEntry2.setMode(131);
        boolean boolean6 = tarArchiveEntry2.isCharacterDevice();
        tarArchiveEntry2.setDevMinor(257);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        tarArchiveEntry1.setGroupId((long) (short) 2);
        int int4 = tarArchiveEntry1.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.lang.String str9 = tarArchiveEntry7.getName();
        boolean boolean10 = tarArchiveEntry7.isFile();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp11 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = x5455_ExtendedTimestamp11.getAccessTime();
        byte[] byteArray13 = x5455_ExtendedTimestamp11.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path17 = tarArchiveEntry16.getPath();
        java.nio.file.attribute.FileTime fileTime18 = null;
        tarArchiveEntry16.setCreationTime(fileTime18);
        java.nio.file.attribute.FileTime fileTime20 = tarArchiveEntry16.getLastModifiedTime();
        x5455_ExtendedTimestamp11.setAccessFileTime(fileTime20);
        tarArchiveEntry7.setLastModifiedTime(fileTime20);
        tarArchiveEntry1.setLastModifiedTime(fileTime20);
        java.lang.String str24 = tarArchiveEntry1.getName();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "deflate64" + "'", str9, "deflate64");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(zipLong12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0]");
        org.junit.Assert.assertNull(path17);
        org.junit.Assert.assertNotNull(fileTime20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "`\n" + "'", str24, "`\n");
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        java.lang.String str0 = org.apache.commons.compress.archivers.cpio.CpioConstants.MAGIC_NEW;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "070701" + "'", str0, "070701");
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("data descriptor");
        tarArchiveEntry1.setGroupName("\000\000.xz");
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong2);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG;
        long long6 = zipLong5.getValue();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong5);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray8 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel9 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray8);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel9);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel9);
        boolean boolean12 = x5455_ExtendedTimestamp0.equals((java.lang.Object) seekableByteChannel9);
        boolean boolean13 = x5455_ExtendedTimestamp0.isBit1_accessTimePresent();
        java.nio.file.attribute.FileTime fileTime14 = x5455_ExtendedTimestamp0.getCreateFileTime();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(zipLong5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 33639248L + "'", long6 == 33639248L);
        org.junit.Assert.assertNotNull(seekableByteChannelArray8);
        org.junit.Assert.assertNotNull(seekableByteChannel9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(fileTime14);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        int int0 = org.apache.commons.compress.archivers.dump.DumpArchiveConstants.HIGH_DENSITY_NTREC;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 32 + "'", int0 == 32);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        byte[] byteArray6 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray6);
        cpioArchiveOutputStream4.write(byteArray6, (int) (short) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream4.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Trying to close non-existent entry");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 0]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray7);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm1 = x0017_StrongEncryptionHeader0.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm3 = x0017_StrongEncryptionHeader0.getHashAlgorithm();
        byte[] byteArray5 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean7 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray5, 3);
        boolean boolean9 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray5, (int) (byte) 53);
        boolean boolean11 = org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byteArray5, 0);
        org.apache.commons.compress.archivers.tar.TarFile tarFile13 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray5, "latest");
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseFromLocalFileData(byteArray5, 4096, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(hashAlgorithm1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNull(hashAlgorithm3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory0 = new org.apache.commons.compress.compressors.CompressorStreamFactory();
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.compressors.CompressorStreamProvider> strMap1 = compressorStreamFactory0.getCompressorInputStreamProviders();
        java.lang.Boolean boolean2 = compressorStreamFactory0.getDecompressUntilEOF();
        java.io.InputStream inputStream4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream4);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream5);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream5);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry8 = tarArchiveInputStream7.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream9 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream7);
        int int10 = deflateCompressorInputStream9.available();
        long long11 = deflateCompressorInputStream9.getUncompressedCount();
        int int12 = deflateCompressorInputStream9.available();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.CompressorInputStream compressorInputStream14 = compressorStreamFactory0.createCompressorInputStream("tar", (java.io.InputStream) deflateCompressorInputStream9, false);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.compressors.CompressorException; message: Compressor: tar not found.");
        } catch (org.apache.commons.compress.compressors.CompressorException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(tarArchiveEntry8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setBigNumberMode(4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path12 = tarArchiveEntry11.getPath();
        boolean boolean13 = tarArchiveEntry11.isCheckSumOK();
        tarArchiveOutputStream6.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry11);
        java.util.Date date15 = tarArchiveEntry11.getModTime();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp16 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong17 = x5455_ExtendedTimestamp16.getAccessTime();
        byte[] byteArray18 = x5455_ExtendedTimestamp16.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding19 = null;
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveEntry11.writeEntryHeader(byteArray18, zipEncoding19, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Jun 19 23:20:22 CEST 2023");
        org.junit.Assert.assertNull(zipLong17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0]");
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        long long5 = zipArchiveInputStream1.skip((long) 16877);
        java.nio.channels.SeekableByteChannel seekableByteChannel6 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream7 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel6);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream9 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream7, strMap8);
        byte[] byteArray10 = new byte[] {};
        pack200CompressorOutputStream9.write(byteArray10);
        int int14 = zipArchiveInputStream1.read(byteArray10, (int) (short) -1, (int) (byte) 50);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path18 = tarArchiveEntry17.getPath();
        java.nio.file.attribute.FileTime fileTime19 = null;
        tarArchiveEntry17.setCreationTime(fileTime19);
        java.nio.file.attribute.FileTime fileTime21 = tarArchiveEntry17.getLastModifiedTime();
        boolean boolean22 = zipArchiveInputStream1.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry17);
        zipArchiveInputStream1.mark((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream26 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream is not in the BZip2 format");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(path18);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray1 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField2 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = zip64ExtendedInformationExtraField2.getLocalFileDataData();
        byte[] byteArray4 = zip64ExtendedInformationExtraField2.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            zip64ExtendedInformationExtraField0.parseFromCentralDirectoryData(byteArray4, 29, 75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile3 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        long long10 = tarArchiveEntry6.getSize();
        java.io.InputStream inputStream11 = tarFile3.getInputStream(tarArchiveEntry6);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(inputStream11);
        org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream lZMACompressorInputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream((java.io.InputStream) pack200CompressorInputStream12, 26625);
        long long15 = lZMACompressorInputStream14.getCompressedCount();
        lZMACompressorInputStream14.close();
        lZMACompressorInputStream14.close();
        long long18 = lZMACompressorInputStream14.getCompressedCount();
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(inputStream11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 18L + "'", long15 == 18L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 18L + "'", long18 == 18L);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setVolume((int) (byte) 120);
        java.lang.String str3 = dumpArchiveEntry0.getSimpleName();
        dumpArchiveEntry0.setUserId(11);
        int int6 = dumpArchiveEntry0.getVolume();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 120 + "'", int6 == 120);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream4, "snappy-framed");
        tarArchiveOutputStream7.setAddPaxHeadersForNonAsciiNames(false);
        int int10 = tarArchiveOutputStream7.getRecordSize();
        int int11 = tarArchiveOutputStream7.getCount();
        tarArchiveOutputStream7.setBigNumberMode(1);
        tarArchiveOutputStream7.setLongFileMode(61440);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream18 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream7, (short) (byte) 2, (int) (byte) 52);
        java.io.File file19 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create((org.apache.commons.compress.archivers.ArchiveOutputStream) tarArchiveOutputStream7, file19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 512 + "'", int10 == 512);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream2 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) pack200CompressorInputStream2, 155, "pack.class.attribute.");
        pack200CompressorInputStream2.close();
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        int int1 = gzipParameters0.getDeflateStrategy();
        gzipParameters0.setDeflateStrategy(64);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm0 = org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.NONE;
        int int1 = hashAlgorithm0.getCode();
        org.junit.Assert.assertTrue("'" + hashAlgorithm0 + "' != '" + org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.NONE + "'", hashAlgorithm0.equals(org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.NONE));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        org.apache.commons.compress.archivers.dump.InvalidFormatException invalidFormatException1 = new org.apache.commons.compress.archivers.dump.InvalidFormatException((long) (short) 4);
        java.lang.String str2 = invalidFormatException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 4." + "'", str2, "org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 4.");
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        byte byte0 = org.apache.commons.compress.archivers.tar.TarConstants.LF_CONTIG;
        org.junit.Assert.assertTrue("'" + byte0 + "' != '" + (byte) 55 + "'", byte0 == (byte) 55);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder0 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder1 = builder0.tunedForSpeed();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder3 = builder0.withMaxOffset(67324752);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        byte[] byteArray4 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean6 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray4, 49152);
        // The following exception was thrown during execution in test generation
        try {
            sevenZOutputFile2.write(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current 7z entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT;
        archiveStreamFactory0.setEntryEncoding("data descriptor");
        java.nio.channels.SeekableByteChannel seekableByteChannel4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel4);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream5, strMap6);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream8 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream7);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream7, "snappy-framed");
        tarArchiveOutputStream10.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream14 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream10, "deflate64");
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream14);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream17 = archiveStreamFactory0.createArchiveOutputStream("jar", (java.io.OutputStream) jarArchiveOutputStream15, "error");
        archiveOutputStream17.flush();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream20 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream17, "");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(archiveStreamFactory0);
        org.junit.Assert.assertNotNull(archiveOutputStream17);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        long long7 = tarArchiveEntry2.getRealSize();
        java.util.Date date8 = tarArchiveEntry2.getLastModifiedDate();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path12 = tarArchiveEntry11.getPath();
        java.nio.file.attribute.FileTime fileTime13 = null;
        tarArchiveEntry11.setCreationTime(fileTime13);
        int int15 = tarArchiveEntry11.getUserId();
        java.util.Date date16 = tarArchiveEntry11.getModTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry19 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path20 = tarArchiveEntry19.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path24 = tarArchiveEntry23.getPath();
        java.nio.file.attribute.FileTime fileTime25 = null;
        tarArchiveEntry23.setCreationTime(fileTime25);
        java.nio.file.attribute.FileTime fileTime27 = tarArchiveEntry23.getLastModifiedTime();
        tarArchiveEntry19.setLastAccessTime(fileTime27);
        tarArchiveEntry11.setModTime(fileTime27);
        boolean boolean30 = tarArchiveEntry2.equals(tarArchiveEntry11);
        long long31 = tarArchiveEntry2.getSize();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Jun 19 23:20:23 CEST 2023");
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Jun 19 23:20:23 CEST 2023");
        org.junit.Assert.assertNull(path20);
        org.junit.Assert.assertNull(path24);
        org.junit.Assert.assertNotNull(fileTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        java.nio.file.attribute.FileTime fileTime6 = tarArchiveEntry2.getLastModifiedTime();
        long long7 = tarArchiveEntry2.getLongGroupId();
        java.lang.String str8 = tarArchiveEntry2.getLinkName();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertNotNull(fileTime6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream gzipCompressorInputStream3 = new org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream((java.io.InputStream) arArchiveInputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current ar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        int int1 = dumpArchiveEntry0.getNlink();
        int int2 = dumpArchiveEntry0.getUserId();
        dumpArchiveEntry0.setDeleted(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy5 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream4, pack200Strategy5);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) pack200CompressorInputStream6);
        tarArchiveInputStream7.close();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream lZMACompressorInputStream9 = new org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream((java.io.InputStream) tarArchiveInputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy5);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        int int7 = pack200CompressorInputStream6.read();
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream8);
        zipArchiveInputStream9.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream9);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy13 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream12, pack200Strategy13);
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream16, strMap17);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream19 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream18);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer20 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap21 = packer20.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream19, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, pack200Strategy13, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters24 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters24.setWithZlibHeader(false);
        int int27 = deflateParameters24.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream28 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, deflateParameters24);
        deflateParameters24.setWithZlibHeader(true);
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 80 + "'", int7 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy13);
        org.junit.Assert.assertNotNull(packer20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long2 = jarArchiveEntry1.getDataOffset();
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest zipArchiveEntryRequest4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry1, inputStreamSupplier3);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = jarArchiveEntry1.getExtraFields();
        byte[] byteArray6 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(zipExtraFieldArray5);
        byte[] byteArray7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNotNull(zipArchiveEntryRequest4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long2 = jarArchiveEntry1.getDataOffset();
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest zipArchiveEntryRequest4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry1, inputStreamSupplier3);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = jarArchiveEntry1.getExtraFields();
        int int6 = jarArchiveEntry1.getInternalAttributes();
        jarArchiveEntry1.setRawFlag(0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNotNull(zipArchiveEntryRequest4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        java.nio.file.attribute.FileTime fileTime10 = tarArchiveEntry6.getLastModifiedTime();
        tarArchiveEntry2.setLastAccessTime(fileTime10);
        java.lang.String str12 = tarArchiveEntry2.getName();
        java.lang.String str13 = tarArchiveEntry2.getGroupName();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS14 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger15 = x000A_NTFS14.getModifyTime();
        java.nio.file.attribute.FileTime fileTime16 = x000A_NTFS14.getCreateFileTime();
        byte[] byteArray17 = x000A_NTFS14.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding19 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("lz4-block");
        boolean boolean21 = zipEncoding19.canEncode("pack.modification.time");
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveEntry2.parseTarHeader(byteArray17, zipEncoding19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "deflate64" + "'", str12, "deflate64");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(zipEightByteInteger15);
        org.junit.Assert.assertNull(fileTime16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipEncoding19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        java.lang.String str1 = org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename("0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0x5455 Zip Extra Field: Flags=0 .gz" + "'", str1, "0x5455 Zip Extra Field: Flags=0 .gz");
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str1 = x000A_NTFS0.toString();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger2 = x000A_NTFS0.getAccessTime();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry4 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long5 = jarArchiveEntry4.getDataOffset();
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit6 = null;
        jarArchiveEntry4.setGeneralPurposeBit(generalPurposeBit6);
        byte[] byteArray8 = jarArchiveEntry4.getCentralDirectoryExtra();
        long long9 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            x000A_NTFS0.parseFromCentralDirectoryData(byteArray8, (int) (short) 12, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str1, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNotNull(zipEightByteInteger2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        zipArchiveInputStream1.close();
        java.io.InputStream inputStream6 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream7 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream6);
        zipArchiveInputStream7.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream7);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream13 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream7, 257, "UTF8");
        byte[] byteArray15 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes(504);
        int int18 = zipArchiveInputStream7.read(byteArray15, 420, 4);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy19 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY;
        java.io.InputStream inputStream20 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream21 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream20);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream23 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream21, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy24 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream26 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream21, pack200Strategy24, strMap25);
        int int27 = pack200CompressorInputStream26.read();
        java.io.InputStream inputStream28 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream29 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream28);
        zipArchiveInputStream29.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream32 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream29);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy33 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream34 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream32, pack200Strategy33);
        java.nio.channels.SeekableByteChannel seekableByteChannel35 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream36 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel35);
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream38 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream36, strMap37);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream39 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream38);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer40 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap41 = packer40.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream42 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream39, (java.util.Map<java.lang.String, java.lang.String>) strMap41);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream43 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream26, pack200Strategy33, (java.util.Map<java.lang.String, java.lang.String>) strMap41);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer44 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap45 = packer44.properties();
        org.apache.commons.compress.compressors.FileNameUtil fileNameUtil47 = new org.apache.commons.compress.compressors.FileNameUtil((java.util.Map<java.lang.String, java.lang.String>) strMap45, ".lzma");
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream48 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream26, (java.util.Map<java.lang.String, java.lang.String>) strMap45);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream49 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream7, pack200Strategy19, (java.util.Map<java.lang.String, java.lang.String>) strMap45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream50 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy19);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: The stream is closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-8, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(pack200Strategy19);
        org.junit.Assert.assertNotNull(pack200Strategy24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 80 + "'", int27 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy33);
        org.junit.Assert.assertNotNull(packer40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(packer44);
        org.junit.Assert.assertNotNull(strMap45);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, (int) (short) 4, 512, "pass", false);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder9 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions10 = builder9.build();
        int int11 = sevenZFileOptions10.getMaxMemoryLimitInKb();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile12 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, "pack.code.attribute.", sevenZFileOptions10);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(sevenZFileOptions10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2147483647 + "'", int11 == 2147483647);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream(outputStream0, "snappy-framed");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField3 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean9 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray7, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior11 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray7, false, extraFieldParsingBehavior11);
        boolean boolean14 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray7, 32768);
        unrecognizedExtraField3.setLocalFileDataData(byteArray7);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort16 = unrecognizedExtraField3.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort17 = unrecognizedExtraField3.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS18 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger19 = x000A_NTFS18.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel20 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream21 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel20);
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream21, strMap22);
        byte[] byteArray24 = new byte[] {};
        pack200CompressorOutputStream23.write(byteArray24);
        x000A_NTFS18.parseFromCentralDirectoryData(byteArray24, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort29 = x000A_NTFS18.getHeaderId();
        byte[] byteArray30 = x000A_NTFS18.getLocalFileDataData();
        unrecognizedExtraField3.setLocalFileDataData(byteArray30);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort32 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray33 = zipShort32.getBytes();
        boolean boolean35 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray33, (int) 'a');
        org.apache.commons.compress.archivers.tar.TarFile tarFile36 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray33);
        unrecognizedExtraField3.setCentralDirectoryData(byteArray33);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField38 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray39 = unrecognizedExtraField38.getLocalFileDataData();
        java.io.InputStream inputStream40 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream41 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream40);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream43 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream41, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy44 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap45 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream46 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream41, pack200Strategy44, strMap45);
        long long47 = pack200CompressorInputStream46.getBytesRead();
        long long49 = pack200CompressorInputStream46.skip(1687209505L);
        int int50 = pack200CompressorInputStream46.available();
        byte[] byteArray52 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean54 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray52, 3);
        boolean boolean56 = org.apache.commons.compress.compressors.xz.XZUtils.matches(byteArray52, (int) (short) 2);
        int int57 = pack200CompressorInputStream46.read(byteArray52);
        unrecognizedExtraField38.setCentralDirectoryData(byteArray52);
        unrecognizedExtraField3.setCentralDirectoryData(byteArray52);
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveOutputStream2.write(byteArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(zipShort16);
        org.junit.Assert.assertNotNull(zipShort17);
        org.junit.Assert.assertNotNull(zipEightByteInteger19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(zipShort29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipShort32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(pack200Strategy44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 29L + "'", long49 == 29L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarFile tarFile4 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.nio.file.attribute.FileTime fileTime9 = null;
        tarArchiveEntry7.setCreationTime(fileTime9);
        long long11 = tarArchiveEntry7.getSize();
        java.io.InputStream inputStream12 = tarFile4.getInputStream(tarArchiveEntry7);
        java.nio.file.Path path13 = null;
        expander0.expand(tarFile4, path13);
        java.io.InputStream inputStream16 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream17 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream16);
        zipArchiveInputStream17.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream17, 488);
        boolean boolean22 = tarArchiveInputStream21.markSupported();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = tarArchiveInputStream21.getNextTarEntry();
        java.io.File file24 = null;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer25 = org.apache.commons.compress.archivers.examples.CloseableConsumer.CLOSING_CONSUMER;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("ZipLong value: 4294967295", (java.io.InputStream) tarArchiveInputStream21, file24, closeableConsumer25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 4294967295 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(tarArchiveEntry23);
        org.junit.Assert.assertNotNull(closeableConsumer25);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setRemoteDeviceMin((long) 12);
        java.util.Date date6 = cpioArchiveEntry2.getLastModifiedDate();
        long long7 = cpioArchiveEntry2.getInode();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.xz.XZCompressorInputStream xZCompressorInputStream3 = new org.apache.commons.compress.compressors.xz.XZCompressorInputStream(inputStream0, true, 84446);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        int int1 = dumpArchiveEntry0.getNlink();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.lang.String str4 = zipArchiveOutputStream3.getEncoding();
        boolean boolean5 = zipArchiveOutputStream3.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date9 = cpioArchiveEntry8.getLastModifiedDate();
        cpioArchiveEntry8.setRemoteDeviceMaj((long) 'a');
        int int12 = cpioArchiveEntry8.getAlignmentBoundary();
        boolean boolean13 = zipArchiveOutputStream3.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry8);
        cpioArchiveEntry8.setDeviceMin((long) 26128);
        boolean boolean16 = cpioArchiveEntry8.isSocket();
        java.util.Date date17 = cpioArchiveEntry8.getLastModifiedDate();
        dumpArchiveEntry0.setAccessTime(date17);
        dumpArchiveEntry0.setVolume(25461);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "UTF8" + "'", str4, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy3 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
        java.lang.String str4 = unicodeExtraFieldPolicy3.toString();
        zipArchiveOutputStream1.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy3);
        long long6 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry8 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData9 = jarArchiveEntry8.getUnparseableExtraFieldData();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy10 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
        boolean boolean11 = jarArchiveEntry8.equals((java.lang.Object) unicodeExtraFieldPolicy10);
        jarArchiveEntry8.setTime(1687209510L);
        int int14 = jarArchiveEntry8.getVersionMadeBy();
        byte[] byteArray15 = jarArchiveEntry8.getRawName();
        long long16 = jarArchiveEntry8.getExternalAttributes();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "never" + "'", str4, "never");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNull(unparseableExtraFieldData9);
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        byte byte4 = tarArchiveEntry3.getLinkFlag();
        tarArchiveEntry3.setModTime((long) (byte) 76);
        tarArchiveEntry3.setGroupId(64);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry[] tarArchiveEntryArray9 = tarArchiveEntry3.getDirectoryEntries();
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry3);
        byte[] byteArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.writePreamble(byteArray11, 49152, 155);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 48 + "'", byte4 == (byte) 48);
        org.junit.Assert.assertNotNull(tarArchiveEntryArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setDeleted(false);
        dumpArchiveEntry0.setDeleted(false);
        int int5 = dumpArchiveEntry0.getVolume();
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet6 = dumpArchiveEntry0.getPermissions();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(pERMISSIONSet6);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory1 = new org.apache.commons.compress.compressors.CompressorStreamFactory(true);
        java.util.Set<java.lang.String> strSet2 = compressorStreamFactory1.getInputStreamCompressorNames();
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.compressors.CompressorStreamProvider> strMap3 = compressorStreamFactory1.getCompressorOutputStreamProviders();
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        zipArchiveOutputStream1.setFallbackToUTF8(false);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream16 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream14, 65535);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: blockSize(65535) > 9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        long long3 = cpioArchiveEntry2.getMode();
        cpioArchiveEntry2.setSize((long) (short) 2);
        long long6 = cpioArchiveEntry2.getDeviceMaj();
        long long7 = cpioArchiveEntry2.getRemoteDeviceMaj();
        cpioArchiveEntry2.setDeviceMaj(1687209571L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32768L + "'", long3 == 32768L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong2);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = zip64ExtendedInformationExtraField0.getDiskStartNumber();
        int int6 = zipLong5.getIntValue();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(zipLong5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData0 = new org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = unparseableExtraFieldData0.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = unparseableExtraFieldData0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = unparseableExtraFieldData0.getLocalFileDataLength();
        java.lang.String str4 = zipShort3.toString();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ZipShort value: 0" + "'", str4, "ZipShort value: 0");
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str1 = x000A_NTFS0.toString();
        java.lang.String str2 = x000A_NTFS0.toString();
        java.util.Date date3 = x000A_NTFS0.getModifyJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path7 = tarArchiveEntry6.getPath();
        java.nio.file.attribute.FileTime fileTime8 = null;
        tarArchiveEntry6.setCreationTime(fileTime8);
        java.nio.file.attribute.FileTime fileTime10 = tarArchiveEntry6.getLastModifiedTime();
        tarArchiveEntry6.setMode((int) (short) 2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry15 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path16 = tarArchiveEntry15.getPath();
        java.nio.file.attribute.FileTime fileTime17 = null;
        tarArchiveEntry15.setCreationTime(fileTime17);
        int int19 = tarArchiveEntry15.getUserId();
        java.util.Date date20 = tarArchiveEntry15.getModTime();
        tarArchiveEntry6.setModTime(date20);
        x000A_NTFS0.setCreateJavaTime(date20);
        java.nio.file.attribute.FileTime fileTime23 = null;
        x000A_NTFS0.setModifyFileTime(fileTime23);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str1, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str2, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNull(date3);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertNotNull(fileTime10);
        org.junit.Assert.assertNull(path16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Jun 19 23:20:26 CEST 2023");
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        java.nio.file.Path path11 = null;
        java.nio.file.Path path12 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("pack.class.attribute.", path11, path12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField0 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW;
        int int1 = unparseableExtraField0.getKey();
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField2 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong4 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray5 = zipLong4.getBytes();
        boolean boolean7 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray5, 32768);
        boolean boolean9 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray5, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode11 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray12 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray5, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode11);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock15 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray5, 488, (int) (short) 2);
        unicodePathExtraField2.setUnicodeName(byteArray5);
        byte[] byteArray18 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean20 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray18, 3);
        boolean boolean22 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray18, (int) (byte) 53);
        long long25 = org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byteArray18, 1, 476);
        boolean boolean27 = org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byteArray18, 16877);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray18);
        unicodePathExtraField2.setUnicodeName(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField34 = unparseableExtraField0.onUnparseableExtraField(byteArray18, 131, 32768, false, 77);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: Bad extra field starting at 131.  Block length of 77 bytes exceeds remaining data of 32764 bytes.");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(unparseableExtraField0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode11 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode11.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        boolean boolean2 = asiExtraField0.isDirectory();
        asiExtraField0.setLinkedFile("error");
        asiExtraField0.setMode(345);
        java.lang.String str7 = asiExtraField0.getLinkedFile();
        java.lang.Object obj8 = asiExtraField0.clone();
        boolean boolean9 = asiExtraField0.isDirectory();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "error" + "'", str7, "error");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.apache.commons.compress.archivers.ArchiveException archiveException1 = new org.apache.commons.compress.archivers.ArchiveException(".bz2.lzma");
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray2 = zipLong1.getBytes();
        long long3 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray2, 148);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 148");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1020L + "'", long3 == 1020L);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory0 = org.apache.commons.compress.compressors.CompressorStreamFactory.getSingleton();
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.compressors.CompressorStreamProvider> strMap1 = compressorStreamFactory0.getCompressorOutputStreamProviders();
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.compressors.CompressorStreamProvider> strMap2 = compressorStreamFactory0.getCompressorInputStreamProviders();
        org.junit.Assert.assertNotNull(compressorStreamFactory0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNotNull(strMap2);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) 7);
        boolean boolean3 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray1, 256);
        boolean boolean5 = org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byteArray1, 255);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byteArray1, 64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 71");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[7, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField3 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(3, false, 1);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray5 = zipShort4.getBytes();
        boolean boolean7 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray5, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            resourceAlignmentExtraField3.parseFromLocalFileData(byteArray5, 26121, 0);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: Too short content for ResourceAlignmentExtraField (0xa11e): 0");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit2 = org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byteArray0, (int) (byte) 77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        java.nio.file.Path path0 = null;
        java.nio.file.LinkOption[] linkOptionArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry3 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry(path0, "keep", linkOptionArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField5 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong7 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray8 = zipLong7.getBytes();
        boolean boolean10 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray8, 32768);
        boolean boolean12 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray8, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode14 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray8, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode14);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock18 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray8, 488, (int) (short) 2);
        unicodePathExtraField5.setUnicodeName(byteArray8);
        pack200CompressorOutputStream3.write(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveStructSparse tarArchiveStructSparse22 = org.apache.commons.compress.archivers.tar.TarUtils.parseSparse(byteArray8, 508);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 508");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode14 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode14.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        org.apache.commons.compress.changes.ChangeSet changeSet0 = new org.apache.commons.compress.changes.ChangeSet();
        changeSet0.deleteDir("lz4-block");
        changeSet0.delete("");
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier1 = null;
        parallelScatterZipCreator0.addArchiveEntry(zipArchiveEntryRequestSupplier1);
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel3);
        java.lang.String str5 = zipArchiveOutputStream4.getEncoding();
        boolean boolean6 = zipArchiveOutputStream4.isSeekable();
        zipArchiveOutputStream4.flush();
        java.lang.String str8 = zipArchiveOutputStream4.getEncoding();
        // The following exception was thrown during execution in test generation
        try {
            parallelScatterZipCreator0.writeTo(zipArchiveOutputStream4);
            org.junit.Assert.fail("Expected exception of type java.util.concurrent.ExecutionException; message: java.lang.NullPointerException");
        } catch (java.util.concurrent.ExecutionException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTF8" + "'", str5, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTF8" + "'", str8, "UTF8");
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setRemoteDeviceMaj((long) 'a');
        boolean boolean6 = cpioArchiveEntry2.isBlockDevice();
        boolean boolean7 = cpioArchiveEntry2.isDirectory();
        int int8 = cpioArchiveEntry2.getAlignmentBoundary();
        boolean boolean9 = cpioArchiveEntry2.isRegularFile();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE cOMPRESSION_TYPE1 = org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(1000);
        org.junit.Assert.assertNull(cOMPRESSION_TYPE1);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMaj((long) 'a');
        int int10 = cpioArchiveEntry6.getAlignmentBoundary();
        boolean boolean11 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        cpioArchiveEntry6.setDeviceMin((long) 26128);
        java.util.Date date14 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setSize(1687209540L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        // The following exception was thrown during execution in test generation
        try {
            byte byte1 = org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(67324752);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can only convert non-negative integers between [0,255] to byte: [67324752]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField1 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (short) 100);
        byte[] byteArray2 = resourceAlignmentExtraField1.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = resourceAlignmentExtraField1.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = resourceAlignmentExtraField1.getHeaderId();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 0]");
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipShort4);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator3 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier2.get();
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore5 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore6 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor7 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore6);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream8 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore5, streamCompressor7);
        long long9 = streamCompressor7.getTotalBytesWritten();
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream10 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore4, streamCompressor7);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker11 = new org.apache.commons.compress.archivers.zip.JarMarker();
        byte[] byteArray12 = jarMarker11.getLocalFileDataData();
        byte[] byteArray13 = jarMarker11.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            scatterGatherBackingStore4.writeOut(byteArray13, 0, 65536);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
        org.junit.Assert.assertNotNull(streamCompressor7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters0.setDeflateStrategy((int) (short) 3);
        int int3 = gzipParameters0.getDeflateStrategy();
        gzipParameters0.setBufferSize(128);
        int int6 = gzipParameters0.getDeflateStrategy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer0 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap1 = packer0.properties();
        org.apache.commons.compress.compressors.FileNameUtil fileNameUtil3 = new org.apache.commons.compress.compressors.FileNameUtil((java.util.Map<java.lang.String, java.lang.String>) strMap1, ".lzma");
        java.lang.String str5 = fileNameUtil3.getUncompressedFilename("error");
        boolean boolean7 = fileNameUtil3.isCompressedFilename("data descriptor");
        java.lang.String str9 = fileNameUtil3.getCompressedFilename("cpio");
        java.lang.String str11 = fileNameUtil3.getCompressedFilename("pack.method.attribute.");
        org.junit.Assert.assertNotNull(packer0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "error" + "'", str5, "error");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cpio.lzma" + "'", str9, "cpio.lzma");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "pack.method.attribute..lzma" + "'", str11, "pack.method.attribute..lzma");
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry10 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        int int11 = arjArchiveEntry10.getHostOs();
        boolean boolean12 = arjArchiveEntry10.isDirectory();
        org.apache.commons.compress.archivers.examples.Expander expander13 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray14 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray14);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile16 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel15);
        org.apache.commons.compress.archivers.tar.TarFile tarFile17 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel15);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry20 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path21 = tarArchiveEntry20.getPath();
        java.nio.file.attribute.FileTime fileTime22 = null;
        tarArchiveEntry20.setCreationTime(fileTime22);
        long long24 = tarArchiveEntry20.getSize();
        java.io.InputStream inputStream25 = tarFile17.getInputStream(tarArchiveEntry20);
        java.nio.file.Path path26 = null;
        expander13.expand(tarFile17, path26);
        boolean boolean28 = arjArchiveEntry10.equals((java.lang.Object) tarFile17);
        java.nio.file.Path path29 = null;
        expander0.expand(tarFile17, path29);
        java.io.InputStream inputStream31 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream32 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream31);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream32, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy35 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream37 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream32, pack200Strategy35, strMap36);
        int int38 = pack200CompressorInputStream37.read();
        java.io.InputStream inputStream39 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream40 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream39);
        zipArchiveInputStream40.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream43 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream40);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy44 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream45 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream43, pack200Strategy44);
        java.nio.channels.SeekableByteChannel seekableByteChannel46 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream47 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel46);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream49 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream47, strMap48);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream50 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream49);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer51 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap52 = packer51.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream53 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream50, (java.util.Map<java.lang.String, java.lang.String>) strMap52);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream54 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream37, pack200Strategy44, (java.util.Map<java.lang.String, java.lang.String>) strMap52);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream55 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) pack200CompressorInputStream37);
        java.io.File file56 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand((java.io.InputStream) deflate64CompressorInputStream55, file56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(seekableByteChannelArray14);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNull(path21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(pack200Strategy35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 80 + "'", int38 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy44);
        org.junit.Assert.assertNotNull(packer51);
        org.junit.Assert.assertNotNull(strMap52);
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long2 = jarArchiveEntry1.getDataOffset();
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest zipArchiveEntryRequest4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry1, inputStreamSupplier3);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = jarArchiveEntry1.getExtraFields();
        int int6 = jarArchiveEntry1.getInternalAttributes();
        long long7 = jarArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = jarArchiveEntry1.getExtraFields();
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveEntry1.setAlignment((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid value for alignment, must be power of two and no bigger than 65535 but is 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNotNull(zipArchiveEntryRequest4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        java.lang.String str1 = org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename("error");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "error" + "'", str1, "error");
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry5 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField6 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry5.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField6);
        byte[] byteArray8 = jarArchiveEntry5.getCentralDirectoryExtra();
        int int9 = jarArchiveEntry5.getVersionMadeBy();
        java.lang.Object obj10 = jarArchiveEntry5.clone();
        boolean boolean11 = jarArchiveEntry5.isDirectory();
        long long12 = jarArchiveEntry5.getExternalAttributes();
        java.io.InputStream inputStream13 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream13);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = tarArchiveInputStream16.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream18 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream16);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream19 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream16);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream20 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream19);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.addRawArchiveEntry((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry5, (java.io.InputStream) cpioArchiveInputStream19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "bzip2");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "bzip2");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "bzip2");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNull(tarArchiveEntry17);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker1 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        byte[] byteArray2 = jarMarker1.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray2, false, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField8 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("pack.keep.file.order", byteArray2, (int) (short) 4, 80);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jarMarker1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode4 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT + "'", extraFieldParsingMode4.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT));
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = x000A_NTFS0.getAccessTime();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS12 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger13 = x000A_NTFS12.getModifyTime();
        java.util.Date date14 = x000A_NTFS12.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger15 = x000A_NTFS12.getModifyTime();
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod16 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64;
        boolean boolean17 = zipEightByteInteger15.equals((java.lang.Object) sevenZMethod16);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry19 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData20 = jarArchiveEntry19.getUnparseableExtraFieldData();
        boolean boolean21 = jarArchiveEntry19.isStreamContiguous();
        long long22 = jarArchiveEntry19.getDataOffset();
        boolean boolean23 = jarArchiveEntry19.isUnixSymlink();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS24 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger25 = x000A_NTFS24.getModifyTime();
        java.util.Date date26 = x000A_NTFS24.getCreateJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry29 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path30 = tarArchiveEntry29.getPath();
        java.nio.file.attribute.FileTime fileTime31 = null;
        tarArchiveEntry29.setCreationTime(fileTime31);
        int int33 = tarArchiveEntry29.getUserId();
        java.util.Date date34 = tarArchiveEntry29.getModTime();
        x000A_NTFS24.setCreateJavaTime(date34);
        java.util.Date date36 = x000A_NTFS24.getCreateJavaTime();
        jarArchiveEntry19.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) x000A_NTFS24);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger38 = x000A_NTFS24.getModifyTime();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry41 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date42 = cpioArchiveEntry41.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong43 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date42);
        byte[] byteArray44 = zipLong43.getBytes();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField45 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger11, zipEightByteInteger15, zipEightByteInteger38, zipLong43);
        java.nio.channels.SeekableByteChannel seekableByteChannel46 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream47 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel46);
        java.lang.String str48 = zipArchiveOutputStream47.getEncoding();
        boolean boolean49 = zipArchiveOutputStream47.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry52 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date53 = cpioArchiveEntry52.getLastModifiedDate();
        cpioArchiveEntry52.setRemoteDeviceMaj((long) 'a');
        int int56 = cpioArchiveEntry52.getAlignmentBoundary();
        boolean boolean57 = zipArchiveOutputStream47.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry52);
        cpioArchiveEntry52.setDeviceMin((long) 26128);
        cpioArchiveEntry52.setRemoteDeviceMin((long) 26128);
        boolean boolean62 = zipEightByteInteger38.equals((java.lang.Object) 26128);
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger11);
        org.junit.Assert.assertNotNull(zipEightByteInteger13);
        org.junit.Assert.assertNull(date14);
        org.junit.Assert.assertNotNull(zipEightByteInteger15);
        org.junit.Assert.assertTrue("'" + sevenZMethod16 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64 + "'", sevenZMethod16.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(unparseableExtraFieldData20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger25);
        org.junit.Assert.assertNull(date26);
        org.junit.Assert.assertNull(path30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Mon Jun 19 23:20:27 CEST 2023");
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Mon Jun 19 23:20:27 CEST 2023");
        org.junit.Assert.assertNotNull(zipEightByteInteger38);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(zipLong43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 33, 0]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTF8" + "'", str48, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        byte[] byteArray1 = x7875_NewUnix0.getCentralDirectoryData();
        long long2 = x7875_NewUnix0.getGID();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry4 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData5 = jarArchiveEntry4.getUnparseableExtraFieldData();
        boolean boolean6 = jarArchiveEntry4.isStreamContiguous();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = jarArchiveEntry4.getExtraField(zipShort7);
        byte[] byteArray9 = zipShort7.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            x7875_NewUnix0.parseFromLocalFileData(byteArray9, (int) '4', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1000L + "'", long2 == 1000L);
        org.junit.Assert.assertNull(unparseableExtraFieldData5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertNull(zipExtraField8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[117, 99]");
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setRemoteDeviceMaj((long) 'a');
        int int6 = cpioArchiveEntry2.getAlignmentBoundary();
        cpioArchiveEntry2.setNumberOfLinks((long) 131);
        cpioArchiveEntry2.setGID((long) 420);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        java.nio.file.Path path0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile3 = new org.apache.commons.compress.archivers.zip.ZipFile(path0, "cpio", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream4.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream10);
        zipArchiveInputStream11.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream11, 488);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream16 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream15);
        java.nio.file.Path path17 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) tarArchiveInputStream15, path17);
        java.io.File file19 = null;
        java.io.File file20 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand(file19, file20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray3 = new java.nio.channels.SeekableByteChannel[] { seekableByteChannel1 };
        java.util.ArrayList<java.nio.channels.SeekableByteChannel> seekableByteChannelList4 = new java.util.ArrayList<java.nio.channels.SeekableByteChannel>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.nio.channels.SeekableByteChannel>) seekableByteChannelList4, seekableByteChannelArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel zipSplitReadOnlySeekableByteChannel6 = new org.apache.commons.compress.archivers.zip.ZipSplitReadOnlySeekableByteChannel((java.util.List<java.nio.channels.SeekableByteChannel>) seekableByteChannelList4);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: The first ZIP split segment does not begin with split ZIP file signature");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(seekableByteChannelArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        java.nio.file.Path path0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(path0, 1687209613L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters0.setDeflateStrategy((int) (short) 3);
        int int3 = gzipParameters0.getDeflateStrategy();
        gzipParameters0.setBufferSize(32768);
        gzipParameters0.setOperatingSystem(2048);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream2 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.dump.DumpArchiveInputStream dumpArchiveInputStream4 = new org.apache.commons.compress.archivers.dump.DumpArchiveInputStream((java.io.InputStream) pack200CompressorInputStream2, "pack.keep.file.order");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: unexpected EOF");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x5455_ExtendedTimestamp0.getLocalFileDataLength();
        byte byte2 = x5455_ExtendedTimestamp0.getFlags();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong3 = x5455_ExtendedTimestamp0.getAccessTime();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong4 = x5455_ExtendedTimestamp0.getCreateTime();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 0 + "'", byte2 == (byte) 0);
        org.junit.Assert.assertNull(zipLong3);
        org.junit.Assert.assertNull(zipLong4);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger2 = x000A_NTFS0.getModifyTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger3 = x000A_NTFS0.getAccessTime();
        java.util.Date date4 = x000A_NTFS0.getModifyJavaTime();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(zipEightByteInteger2);
        org.junit.Assert.assertNotNull(zipEightByteInteger3);
        org.junit.Assert.assertNull(date4);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature0 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD;
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry2 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData3 = jarArchiveEntry2.getUnparseableExtraFieldData();
        jarArchiveEntry2.setCompressedSize((long) 64);
        int int6 = jarArchiveEntry2.getRawFlag();
        jarArchiveEntry2.setExternalAttributes((long) (byte) 51);
        java.lang.Object obj9 = jarArchiveEntry2.clone();
        jarArchiveEntry2.setSize((long) 345);
        jarArchiveEntry2.setVersionRequired((int) (short) 2);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException14 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature0, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry2);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry16 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData17 = jarArchiveEntry16.getUnparseableExtraFieldData();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy18 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
        boolean boolean19 = jarArchiveEntry16.equals((java.lang.Object) unicodeExtraFieldPolicy18);
        jarArchiveEntry16.setTime(1687209510L);
        int int22 = jarArchiveEntry16.getVersionMadeBy();
        byte[] byteArray23 = jarArchiveEntry16.getRawName();
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException24 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature0, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry16);
        org.junit.Assert.assertNotNull(feature0);
        org.junit.Assert.assertNull(unparseableExtraFieldData3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "bzip2");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "bzip2");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "bzip2");
        org.junit.Assert.assertNull(unparseableExtraFieldData17);
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(byteArray23);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry5 = zipArchiveInputStream1.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(0L);
        // The following exception was thrown during execution in test generation
        try {
            long long3 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byteArray1, 493);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 500");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 0, 33, 0]");
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 488);
        boolean boolean6 = tarArchiveInputStream5.markSupported();
        boolean boolean7 = tarArchiveInputStream5.markSupported();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream8 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) tarArchiveInputStream5);
        tarArchiveInputStream5.reset();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = tarArchiveInputStream5.read();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream10 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream((java.io.InputStream) jarArchiveInputStream5);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Not a framed Snappy stream");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean4 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray2, 3);
        boolean boolean6 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray2, (int) (byte) 53);
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, (int) ' ');
        boolean boolean10 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray2, 0);
        // The following exception was thrown during execution in test generation
        try {
            x7875_NewUnix0.parseFromLocalFileData(byteArray2, (int) '4', 4095);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean13 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray11, 3);
        boolean boolean15 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray11, (int) (byte) 53);
        boolean boolean17 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray11, (int) ' ');
        org.apache.commons.compress.archivers.tar.TarFile tarFile18 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray11);
        java.io.File file19 = null;
        expander0.expand(tarFile18, file19);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray22 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel23 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray22);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile24 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel23);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream25 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel23);
        char[] charArray26 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile27 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel23, charArray26);
        org.apache.commons.compress.archivers.tar.TarFile tarFile28 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel23);
        org.apache.commons.compress.archivers.tar.TarFile tarFile29 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel23);
        java.nio.file.Path path30 = null;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer31 = org.apache.commons.compress.archivers.examples.CloseableConsumer.CLOSING_CONSUMER;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("`\n", seekableByteChannel23, path30, closeableConsumer31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: `? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(seekableByteChannelArray22);
        org.junit.Assert.assertNotNull(seekableByteChannel23);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[]");
        org.junit.Assert.assertNotNull(closeableConsumer31);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField3 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(155, false, 464);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.compressors.snappy.FramedSnappyDialect framedSnappyDialect2 = org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE;
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream3 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream(inputStream0, framedSnappyDialect2);
        int int4 = framedSnappyCompressorInputStream3.available();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS5 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger6 = x000A_NTFS5.getModifyTime();
        java.util.Date date7 = x000A_NTFS5.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = x000A_NTFS5.getModifyTime();
        byte[] byteArray9 = x000A_NTFS5.getCentralDirectoryData();
        int int12 = framedSnappyCompressorInputStream3.read(byteArray9, 3, 0);
        long long14 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray9, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger16 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger(byteArray9, 4096);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4103");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + framedSnappyDialect2 + "' != '" + org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE + "'", framedSnappyDialect2.equals(org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(zipEightByteInteger6);
        org.junit.Assert.assertNull(date7);
        org.junit.Assert.assertNotNull(zipEightByteInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField2);
        byte[] byteArray4 = jarArchiveEntry1.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField5 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField5);
        jarArchiveEntry1.setCompressedSize((long) 75);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[30, -95, 2, 0, 0, 0]");
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField1 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(4096);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        zipArchiveOutputStream1.flush();
        java.lang.String str5 = zipArchiveOutputStream1.getEncoding();
        java.lang.String str6 = zipArchiveOutputStream1.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream1, (short) (byte) 2, 80);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream9.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Trying to close non-existent entry");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTF8" + "'", str5, "UTF8");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT;
        archiveStreamFactory0.setEntryEncoding("data descriptor");
        archiveStreamFactory0.setEntryEncoding("pass");
        java.util.Set<java.lang.String> strSet5 = archiveStreamFactory0.getInputStreamArchiveNames();
        java.nio.channels.SeekableByteChannel seekableByteChannel7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream10 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream8, strMap9);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream11 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream10);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream13 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream10, "snappy-framed");
        tarArchiveOutputStream13.setBigNumberMode(4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream16 = archiveStreamFactory0.createArchiveOutputStream("", (java.io.OutputStream) tarArchiveOutputStream13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver:  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(archiveStreamFactory0);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry10 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        int int11 = arjArchiveEntry10.getHostOs();
        boolean boolean12 = arjArchiveEntry10.isDirectory();
        org.apache.commons.compress.archivers.examples.Expander expander13 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray14 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray14);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile16 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel15);
        org.apache.commons.compress.archivers.tar.TarFile tarFile17 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel15);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry20 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path21 = tarArchiveEntry20.getPath();
        java.nio.file.attribute.FileTime fileTime22 = null;
        tarArchiveEntry20.setCreationTime(fileTime22);
        long long24 = tarArchiveEntry20.getSize();
        java.io.InputStream inputStream25 = tarFile17.getInputStream(tarArchiveEntry20);
        java.nio.file.Path path26 = null;
        expander13.expand(tarFile17, path26);
        boolean boolean28 = arjArchiveEntry10.equals((java.lang.Object) tarFile17);
        java.nio.file.Path path29 = null;
        expander0.expand(tarFile17, path29);
        org.apache.commons.compress.archivers.tar.TarFile tarFile31 = null;
        java.io.File file32 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand(tarFile31, file32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(seekableByteChannelArray14);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNull(path21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(inputStream25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm0 = org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA1;
        int int1 = hashAlgorithm0.getCode();
        org.junit.Assert.assertTrue("'" + hashAlgorithm0 + "' != '" + org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA1 + "'", hashAlgorithm0.equals(org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.SHA1));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32772 + "'", int1 == 32772);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        boolean boolean1 = org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename("ZipEightByteInteger value: 0");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField0 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        boolean boolean5 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray3, 32768);
        boolean boolean7 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray3, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode9 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray3, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode9);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock13 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray3, 488, (int) (short) 2);
        unicodePathExtraField0.setUnicodeName(byteArray3);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort15 = unicodePathExtraField0.getCentralDirectoryLength();
        java.io.InputStream inputStream16 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream17 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream16);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream17);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) pack200CompressorInputStream18, 155, "pack.class.attribute.");
        boolean boolean22 = zipShort15.equals((java.lang.Object) cpioArchiveInputStream21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry23 = cpioArchiveInputStream21.getNextCPIOEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Unknown magic [PK????]. Occurred at byte: 6");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode9 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode9.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
        org.junit.Assert.assertNotNull(zipShort15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        framedSnappyCompressorOutputStream4.finish();
        framedSnappyCompressorOutputStream4.finish();
        // The following exception was thrown during execution in test generation
        try {
            framedSnappyCompressorOutputStream4.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6, "deflate64");
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10, "apkm");
        long long13 = jarArchiveOutputStream10.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveOutputStream10.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

//    @Test
//    public void test1758() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest3.test1758");
//        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry6 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("pack200", (long) 64, (int) (short) 1, 488, 424935705, 46947589L);
//        long long7 = arArchiveEntry6.getSize();
//        java.util.Date date8 = arArchiveEntry6.getLastModifiedDate();
//        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 64L + "'", long7 == 64L);
//        org.junit.Assert.assertNotNull(date8);
//         org.junit.Assert.assertEquals(date8.toString(), "Mon Jun 28 09:59:49 CET 1971");
//    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray9 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray9);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS11 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger12 = x000A_NTFS11.getModifyTime();
        java.util.Date date13 = x000A_NTFS11.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger14 = x000A_NTFS11.getModifyTime();
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod15 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64;
        boolean boolean16 = zipEightByteInteger14.equals((java.lang.Object) sevenZMethod15);
        sevenZOutputFile10.setContentCompression(sevenZMethod15);
        // The following exception was thrown during execution in test generation
        try {
            sevenZOutputFile10.finish();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a,  , a, #, 4]");
        org.junit.Assert.assertNotNull(zipEightByteInteger12);
        org.junit.Assert.assertNull(date13);
        org.junit.Assert.assertNotNull(zipEightByteInteger14);
        org.junit.Assert.assertTrue("'" + sevenZMethod15 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64 + "'", sevenZMethod15.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray1 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byteArray1, 26625);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 257");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream4, "snappy-framed");
        tarArchiveOutputStream7.setBigNumberMode(4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path13 = tarArchiveEntry12.getPath();
        boolean boolean14 = tarArchiveEntry12.isCheckSumOK();
        tarArchiveOutputStream7.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry12);
        java.util.Date date16 = tarArchiveEntry12.getModTime();
        x5455_ExtendedTimestamp0.setAccessJavaTime(date16);
        org.junit.Assert.assertNull(path13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Jun 19 23:20:29 CEST 2023");
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(file0, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile3 = new org.apache.commons.compress.archivers.zip.ZipFile(file0, "deflate", true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 488);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream11 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream5, 16877, 128, "ZipLong value: 33639248", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ZipLong value: 33639248");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer0 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap1 = packer0.properties();
        org.apache.commons.compress.compressors.FileNameUtil fileNameUtil3 = new org.apache.commons.compress.compressors.FileNameUtil((java.util.Map<java.lang.String, java.lang.String>) strMap1, ".lzma");
        java.lang.String str5 = fileNameUtil3.getUncompressedFilename("error");
        java.lang.String str7 = fileNameUtil3.getUncompressedFilename("lz4-framed");
        java.lang.String str9 = fileNameUtil3.getCompressedFilename("");
        org.junit.Assert.assertNotNull(packer0);
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "error" + "'", str5, "error");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "lz4-framed" + "'", str7, "lz4-framed");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + ".lzma" + "'", str9, ".lzma");
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.compressors.snappy.FramedSnappyDialect framedSnappyDialect2 = org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE;
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream3 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream(inputStream0, framedSnappyDialect2);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) framedSnappyCompressorInputStream3, 100, 508);
        long long7 = framedSnappyCompressorInputStream3.getCompressedCount();
        // The following exception was thrown during execution in test generation
        try {
            framedSnappyCompressorInputStream3.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + framedSnappyDialect2 + "' != '" + org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE + "'", framedSnappyDialect2.equals(org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream5 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField6 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong8 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray9 = zipLong8.getBytes();
        boolean boolean11 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray9, 32768);
        boolean boolean13 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray9, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode15 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray9, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode15);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock19 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray9, 488, (int) (short) 2);
        unicodePathExtraField6.setUnicodeName(byteArray9);
        pack200CompressorOutputStream4.write(byteArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString((long) 511, byteArray9, 424935705, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 424935804");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode15 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode15.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        boolean boolean1 = org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename("z");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream3);
        long long8 = cpioArchiveInputStream6.skip((long) 40960);
        cpioArchiveInputStream6.close();
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime((long) 2);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 0, 33, 0]");
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str1 = x000A_NTFS0.toString();
        java.nio.file.attribute.FileTime fileTime2 = x000A_NTFS0.getModifyFileTime();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str1, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNull(fileTime2);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream3 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream2);
        long long4 = brotliCompressorInputStream3.getCompressedCount();
        java.lang.String str5 = brotliCompressorInputStream3.toString();
        java.lang.String str6 = brotliCompressorInputStream3.toString();
        java.io.InputStream inputStream7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream7);
        zipArchiveInputStream8.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream8);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy12 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream13 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream11, pack200Strategy12);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) pack200CompressorInputStream13);
        java.io.InputStream inputStream16 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream17 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream16);
        org.apache.commons.compress.compressors.snappy.FramedSnappyDialect framedSnappyDialect18 = org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE;
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream19 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream(inputStream16, framedSnappyDialect18);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream20 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream((java.io.InputStream) tarArchiveInputStream14, 11, framedSnappyDialect18);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream21 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream((java.io.InputStream) brotliCompressorInputStream3, framedSnappyDialect18);
        brotliCompressorInputStream3.mark(24576);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(pack200Strategy12);
        org.junit.Assert.assertTrue("'" + framedSnappyDialect18 + "' != '" + org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE + "'", framedSnappyDialect18.equals(org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE));
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        java.lang.String str1 = org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename("pack.class.attribute.");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "pack.class.attribute." + "'", str1, "pack.class.attribute.");
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry0 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        int int1 = arjArchiveEntry0.getHostOs();
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod2 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2;
        boolean boolean3 = arjArchiveEntry0.equals((java.lang.Object) sevenZMethod2);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + sevenZMethod2 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2 + "'", sevenZMethod2.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry3 = zipArchiveInputStream1.getNextZipEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream closed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE sEGMENT_TYPE0 = org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.INODE;
        org.junit.Assert.assertTrue("'" + sEGMENT_TYPE0 + "' != '" + org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.INODE + "'", sEGMENT_TYPE0.equals(org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.INODE));
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        // The following exception was thrown during execution in test generation
        try {
            deflateCompressorOutputStream16.close();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x5455_ExtendedTimestamp0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date5 = cpioArchiveEntry4.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong6 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date5);
        byte[] byteArray7 = zipLong6.getBytes();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong6);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder9 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder11 = builder9.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder13 = builder11.withLazyThreshold(6);
        boolean boolean14 = zipLong6.equals((java.lang.Object) builder11);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(zipLong6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 33, 0]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        java.nio.file.attribute.FileTime fileTime6 = tarArchiveEntry2.getLastModifiedTime();
        tarArchiveEntry2.setMode((int) (short) 2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path12 = tarArchiveEntry11.getPath();
        java.nio.file.attribute.FileTime fileTime13 = null;
        tarArchiveEntry11.setCreationTime(fileTime13);
        int int15 = tarArchiveEntry11.getUserId();
        java.util.Date date16 = tarArchiveEntry11.getModTime();
        tarArchiveEntry2.setModTime(date16);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList18 = tarArchiveEntry2.getSparseHeaders();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertNotNull(fileTime6);
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Jun 19 23:20:30 CEST 2023");
        org.junit.Assert.assertNull(tarArchiveStructSparseList18);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy5 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream4, pack200Strategy5);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry7 = jarArchiveInputStream4.getNextJarEntry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = org.apache.commons.compress.compressors.CompressorStreamFactory.detect((java.io.InputStream) jarArchiveInputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy5);
        org.junit.Assert.assertNull(jarArchiveEntry7);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray9 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray9);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile11 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile13 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, "pack.class.attribute.");
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a,  , a, #, 4]");
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        boolean boolean2 = asiExtraField0.isDirectory();
        boolean boolean3 = asiExtraField0.isDirectory();
        int int4 = asiExtraField0.getGroupId();
        boolean boolean5 = asiExtraField0.isDirectory();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = asiExtraField0.getHeaderId();
        asiExtraField0.setMode(3);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipShort6);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, 60012, 32768, "apkm", true);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile10 = new org.apache.commons.compress.archivers.zip.ZipFile(seekableByteChannel1, "pack.effort");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Error on ZipFile unknown archive");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        int int1 = dumpArchiveEntry0.getGroupId();
        boolean boolean2 = dumpArchiveEntry0.isDirectory();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        long long7 = pack200CompressorInputStream6.getBytesRead();
        long long9 = pack200CompressorInputStream6.skip(1687209505L);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField10 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField11 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean17 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray15, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior19 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray15, false, extraFieldParsingBehavior19);
        boolean boolean22 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray15, 32768);
        unrecognizedExtraField11.setLocalFileDataData(byteArray15);
        unrecognizedExtraField10.setCentralDirectoryData(byteArray15);
        boolean boolean26 = org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byteArray15, 4096);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = pack200CompressorInputStream6.read(byteArray15, 64, 65535);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 29L + "'", long9 == 29L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path10 = tarArchiveEntry9.getPath();
        java.nio.file.attribute.FileTime fileTime11 = null;
        tarArchiveEntry9.setCreationTime(fileTime11);
        java.nio.file.attribute.FileTime fileTime13 = tarArchiveEntry9.getLastModifiedTime();
        tarArchiveEntry9.setNames(" \000", "UTF8");
        boolean boolean17 = tarArchiveInputStream3.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry9);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream18 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream21 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream18, "apkm", true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = org.apache.commons.compress.archivers.ArchiveStreamFactory.detect((java.io.InputStream) zipArchiveInputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertNull(path10);
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry(file0, ".bz2.lzma");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        java.nio.file.Path path0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarFile tarFile2 = new org.apache.commons.compress.archivers.tar.TarFile(path0, "apkm.xz");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        framedSnappyCompressorOutputStream4.finish();
        framedSnappyCompressorOutputStream4.finish();
        framedSnappyCompressorOutputStream4.finish();
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream8 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong10 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray11 = zipLong10.getBytes();
        boolean boolean13 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray11, 32768);
        boolean boolean15 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray11, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode17 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray11, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode17);
        jarArchiveOutputStream8.writePreamble(byteArray11);
        byte[] byteArray21 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(1687209591L);
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveOutputStream8.write(byteArray21, (int) (byte) 52, 508);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode17 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode17.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 33, 0]");
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        byte byte2 = tarArchiveEntry1.getLinkFlag();
        int int3 = tarArchiveEntry1.getUserId();
        boolean boolean4 = tarArchiveEntry1.isFile();
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 48 + "'", byte2 == (byte) 48);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = x000A_NTFS0.getAccessTime();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS12 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger13 = x000A_NTFS12.getModifyTime();
        java.util.Date date14 = x000A_NTFS12.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger15 = x000A_NTFS12.getModifyTime();
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod16 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64;
        boolean boolean17 = zipEightByteInteger15.equals((java.lang.Object) sevenZMethod16);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry19 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData20 = jarArchiveEntry19.getUnparseableExtraFieldData();
        boolean boolean21 = jarArchiveEntry19.isStreamContiguous();
        long long22 = jarArchiveEntry19.getDataOffset();
        boolean boolean23 = jarArchiveEntry19.isUnixSymlink();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS24 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger25 = x000A_NTFS24.getModifyTime();
        java.util.Date date26 = x000A_NTFS24.getCreateJavaTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry29 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path30 = tarArchiveEntry29.getPath();
        java.nio.file.attribute.FileTime fileTime31 = null;
        tarArchiveEntry29.setCreationTime(fileTime31);
        int int33 = tarArchiveEntry29.getUserId();
        java.util.Date date34 = tarArchiveEntry29.getModTime();
        x000A_NTFS24.setCreateJavaTime(date34);
        java.util.Date date36 = x000A_NTFS24.getCreateJavaTime();
        jarArchiveEntry19.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) x000A_NTFS24);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger38 = x000A_NTFS24.getModifyTime();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry41 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date42 = cpioArchiveEntry41.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong43 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date42);
        byte[] byteArray44 = zipLong43.getBytes();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField45 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger11, zipEightByteInteger15, zipEightByteInteger38, zipLong43);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS46 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str47 = x000A_NTFS46.toString();
        java.lang.String str48 = x000A_NTFS46.toString();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger49 = x000A_NTFS46.getModifyTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger50 = x000A_NTFS46.getCreateTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry53 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path54 = tarArchiveEntry53.getPath();
        java.nio.file.attribute.FileTime fileTime55 = null;
        tarArchiveEntry53.setCreationTime(fileTime55);
        java.nio.file.attribute.FileTime fileTime57 = tarArchiveEntry53.getLastModifiedTime();
        tarArchiveEntry53.addPaxHeader("pack.modification.time", "lz4-block.xz");
        java.util.Date date61 = tarArchiveEntry53.getModTime();
        x000A_NTFS46.setCreateJavaTime(date61);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger63 = x000A_NTFS46.getCreateTime();
        zip64ExtendedInformationExtraField45.setRelativeHeaderOffset(zipEightByteInteger63);
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger11);
        org.junit.Assert.assertNotNull(zipEightByteInteger13);
        org.junit.Assert.assertNull(date14);
        org.junit.Assert.assertNotNull(zipEightByteInteger15);
        org.junit.Assert.assertTrue("'" + sevenZMethod16 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64 + "'", sevenZMethod16.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE64));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(unparseableExtraFieldData20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger25);
        org.junit.Assert.assertNull(date26);
        org.junit.Assert.assertNull(path30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Mon Jun 19 23:20:31 CEST 2023");
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Mon Jun 19 23:20:31 CEST 2023");
        org.junit.Assert.assertNotNull(zipEightByteInteger38);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(zipLong43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 33, 0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str47, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str48, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNotNull(zipEightByteInteger49);
        org.junit.Assert.assertNotNull(zipEightByteInteger50);
        org.junit.Assert.assertNull(path54);
        org.junit.Assert.assertNotNull(fileTime57);
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Mon Jun 19 23:20:31 CEST 2023");
        org.junit.Assert.assertNotNull(zipEightByteInteger63);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream2 = org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(file0, 29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        org.apache.commons.compress.changes.ChangeSet changeSet5 = new org.apache.commons.compress.changes.ChangeSet();
        changeSet5.deleteDir("hi!");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry9 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField10 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry9.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField10);
        java.nio.file.attribute.FileTime fileTime12 = jarArchiveEntry9.getLastAccessTime();
        java.io.InputStream inputStream13 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream13);
        zipArchiveInputStream14.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry18 = jarArchiveInputStream17.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry19 = jarArchiveInputStream17.getNextEntry();
        changeSet5.add((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry9, (java.io.InputStream) jarArchiveInputStream17);
        boolean boolean21 = zipArchiveOutputStream2.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry9);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize22 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M4;
        org.apache.commons.compress.compressors.lz77support.Parameters parameters26 = null;
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters27 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize22, true, true, true, parameters26);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters31 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize22, true, true, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream32 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, parameters31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNull(fileTime12);
        org.junit.Assert.assertNull(archiveEntry18);
        org.junit.Assert.assertNull(archiveEntry19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + blockSize22 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M4 + "'", blockSize22.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M4));
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT;
        archiveStreamFactory0.setEntryEncoding("data descriptor");
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.archivers.ArchiveStreamProvider> strMap3 = archiveStreamFactory0.getArchiveInputStreamProviders();
        java.util.Set<java.lang.String> strSet4 = archiveStreamFactory0.getInputStreamArchiveNames();
        java.io.InputStream inputStream6 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream7 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream6);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream9 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream7, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy10 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream12 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream7, pack200Strategy10, strMap11);
        int int13 = pack200CompressorInputStream12.read();
        java.io.InputStream inputStream14 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream14);
        zipArchiveInputStream15.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream15);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy19 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream20 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream18, pack200Strategy19);
        java.nio.channels.SeekableByteChannel seekableByteChannel21 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream22 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel21);
        java.util.Map<java.lang.String, java.lang.String> strMap23 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream24 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream22, strMap23);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream25 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream24);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer26 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap27 = packer26.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream28 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream25, (java.util.Map<java.lang.String, java.lang.String>) strMap27);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream29 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream12, pack200Strategy19, (java.util.Map<java.lang.String, java.lang.String>) strMap27);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream30 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) pack200CompressorInputStream12);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream31 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) pack200CompressorInputStream12);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) deflate64CompressorInputStream31);
        int int33 = cpioArchiveInputStream32.read();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream35 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.ArchiveException: 0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:19:20.457Z] ", (java.io.InputStream) cpioArchiveInputStream32, "LiteralBlock starting at 488 with length 2");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: 0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[2023-06-19T21:19:20.457Z]  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(archiveStreamFactory0);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(pack200Strategy10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 80 + "'", int13 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy19);
        org.junit.Assert.assertNotNull(packer26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        java.lang.String str1 = org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename("070702");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "070702" + "'", str1, "070702");
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry6 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField7 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry6.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField7);
        byte[] byteArray9 = jarArchiveEntry6.getCentralDirectoryExtra();
        gzipCompressorOutputStream4.write(byteArray9);
        gzipCompressorOutputStream4.flush();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp12 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong13 = x5455_ExtendedTimestamp12.getAccessTime();
        byte[] byteArray14 = x5455_ExtendedTimestamp12.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path18 = tarArchiveEntry17.getPath();
        java.nio.file.attribute.FileTime fileTime19 = null;
        tarArchiveEntry17.setCreationTime(fileTime19);
        java.nio.file.attribute.FileTime fileTime21 = tarArchiveEntry17.getLastModifiedTime();
        x5455_ExtendedTimestamp12.setAccessFileTime(fileTime21);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp23 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray26 = zipLong25.getBytes();
        x5455_ExtendedTimestamp23.setModifyTime(zipLong25);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong28 = org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG;
        long long29 = zipLong28.getValue();
        x5455_ExtendedTimestamp23.setModifyTime(zipLong28);
        x5455_ExtendedTimestamp12.setCreateTime(zipLong28);
        byte[] byteArray32 = x5455_ExtendedTimestamp12.getLocalFileDataData();
        gzipCompressorOutputStream4.write(byteArray32);
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField34 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int35 = asiExtraField34.getMode();
        byte[] byteArray36 = asiExtraField34.getLocalFileDataData();
        byte[] byteArray37 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray36);
        gzipCompressorOutputStream4.write(byteArray36);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertNull(zipLong13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0]");
        org.junit.Assert.assertNull(path18);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(zipLong28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 33639248L + "'", long29 == 33639248L);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[6, -96, -58, -112, 100, 80, 75, 1, 2]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, -118, 104, 118]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, -118, 104, 118]");
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime((long) 84446);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(26128L, byteArray2, 424935705, (int) (byte) 55);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 424935757");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 33, 0]");
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream3 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters4 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters4.setWithZlibHeader(false);
        deflateParameters4.setWithZlibHeader(true);
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream9 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) brotliCompressorInputStream3, deflateParameters4);
        brotliCompressorInputStream3.mark((int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray13 = zipShort12.getBytes();
        boolean boolean15 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray13, (int) 'a');
        org.apache.commons.compress.archivers.tar.TarFile tarFile16 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray13);
        boolean boolean18 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream.matches(byteArray13, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = brotliCompressorInputStream3.read(byteArray13);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Brotli stream decoding failed");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        java.io.File file0 = null;
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS1 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger2 = x000A_NTFS1.getModifyTime();
        java.nio.file.attribute.FileTime fileTime3 = x000A_NTFS1.getCreateFileTime();
        byte[] byteArray4 = x000A_NTFS1.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile5 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(file0, byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipEightByteInteger2);
        org.junit.Assert.assertNull(fileTime3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        sevenZArchiveEntry0.setHasLastModifiedDate(false);
        sevenZArchiveEntry0.setName("apk");
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream6 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize8 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder12 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder14 = builder12.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder16 = builder14.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters17 = builder16.build();
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters18 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize8, true, false, false, parameters17);
        int int19 = parameters17.getNiceBackReferenceLength();
        int int20 = parameters17.getMaxCandidates();
        org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream snappyCompressorOutputStream21 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream6, 18L, parameters17);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker22 = new org.apache.commons.compress.archivers.zip.JarMarker();
        byte[] byteArray23 = jarMarker22.getLocalFileDataData();
        byte[] byteArray24 = jarMarker22.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            snappyCompressorOutputStream21.write(byteArray24, 263, 26121);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + blockSize8 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize8.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(parameters17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 512 + "'", int20 == 512);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        boolean boolean1 = org.apache.commons.compress.archivers.zip.ZipUtil.isDosTime(0L);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream5 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        long long6 = deflate64CompressorInputStream5.getCompressedCount();
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean13 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray11, 3);
        boolean boolean15 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray11, (int) (byte) 53);
        boolean boolean17 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray11, (int) ' ');
        org.apache.commons.compress.archivers.tar.TarFile tarFile18 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray11);
        java.io.File file19 = null;
        expander0.expand(tarFile18, file19);
        java.io.InputStream inputStream22 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream23 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream22);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream23);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream25 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream24);
        long long26 = brotliCompressorInputStream25.getCompressedCount();
        java.lang.String str27 = brotliCompressorInputStream25.toString();
        java.lang.String str28 = brotliCompressorInputStream25.toString();
        java.io.InputStream inputStream29 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream29);
        zipArchiveInputStream30.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream33 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream30);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy34 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream35 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream33, pack200Strategy34);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream36 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) pack200CompressorInputStream35);
        java.io.InputStream inputStream38 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream39 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream38);
        org.apache.commons.compress.compressors.snappy.FramedSnappyDialect framedSnappyDialect40 = org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE;
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream41 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream(inputStream38, framedSnappyDialect40);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream42 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream((java.io.InputStream) tarArchiveInputStream36, 11, framedSnappyDialect40);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream43 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream((java.io.InputStream) brotliCompressorInputStream25, framedSnappyDialect40);
        java.io.File file44 = null;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer45 = org.apache.commons.compress.archivers.examples.CloseableConsumer.CLOSING_CONSUMER;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("070701", (java.io.InputStream) framedSnappyCompressorInputStream43, file44, closeableConsumer45);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: 070701 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(pack200Strategy34);
        org.junit.Assert.assertTrue("'" + framedSnappyDialect40 + "' != '" + org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE + "'", framedSnappyDialect40.equals(org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE));
        org.junit.Assert.assertNotNull(closeableConsumer45);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong2);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG;
        long long6 = zipLong5.getValue();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong5);
        java.util.Date date8 = x5455_ExtendedTimestamp0.getAccessJavaTime();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong9 = x5455_ExtendedTimestamp0.getCreateTime();
        byte byte10 = x5455_ExtendedTimestamp0.getFlags();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = x5455_ExtendedTimestamp0.getCentralDirectoryLength();
        x5455_ExtendedTimestamp0.setFlags((byte) 4);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(zipLong5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 33639248L + "'", long6 == 33639248L);
        org.junit.Assert.assertNull(date8);
        org.junit.Assert.assertNull(zipLong9);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 1 + "'", byte10 == (byte) 1);
        org.junit.Assert.assertNotNull(zipShort11);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray9 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray9);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile11 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile12 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder13 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions14 = builder13.build();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder16 = builder13.withMaxMemoryLimitInKb(4096);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions17 = builder13.build();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile18 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, sevenZFileOptions17);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a,  , a, #, 4]");
        org.junit.Assert.assertNotNull(sevenZFileOptions14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(sevenZFileOptions17);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray4 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile5 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray4);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray7 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel8 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray7);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile9 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel8);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel8);
        char[] charArray11 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile12 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel8, charArray11);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder13 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions14 = builder13.build();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder16 = builder13.withMaxMemoryLimitInKb(4096);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions17 = builder13.build();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions18 = builder13.build();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile19 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, "0x5455 Zip Extra Field: Flags=0 .gz", charArray11, sevenZFileOptions18);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray7);
        org.junit.Assert.assertNotNull(seekableByteChannel8);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(sevenZFileOptions14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(sevenZFileOptions17);
        org.junit.Assert.assertNotNull(sevenZFileOptions18);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 488);
        boolean boolean6 = tarArchiveInputStream5.markSupported();
        boolean boolean7 = tarArchiveInputStream5.markSupported();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream8 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) tarArchiveInputStream5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = jarArchiveInputStream8.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        zipArchiveOutputStream1.flush();
        java.lang.String str5 = zipArchiveOutputStream1.getEncoding();
        zipArchiveOutputStream1.flush();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream snappyCompressorOutputStream9 = new org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, (long) (byte) 83, 156);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: windowSize must be a power of two");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTF8" + "'", str5, "UTF8");
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        java.lang.String str1 = org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename("00");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "00.xz" + "'", str1, "00.xz");
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        int int0 = org.apache.commons.compress.archivers.cpio.CpioConstants.C_IROTH;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters0 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        int int1 = gzipParameters0.getDeflateStrategy();
        java.lang.String str2 = gzipParameters0.getComment();
        java.lang.String str3 = gzipParameters0.getComment();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField2 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int3 = asiExtraField2.getMode();
        byte[] byteArray4 = asiExtraField2.getLocalFileDataData();
        byte[] byteArray5 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseCentralDirectoryFormat(byteArray5, 493, 96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 493");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, -118, 104, 118]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -29, -118, 104, 118]");
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray9 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray9);
        java.nio.channels.SeekableByteChannel seekableByteChannel11 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream12 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel11);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream12, strMap13);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream15 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream14);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer16 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap17 = packer16.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream15, (java.util.Map<java.lang.String, java.lang.String>) strMap17);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField19 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField20 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean26 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray24, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior28 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray29 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray24, false, extraFieldParsingBehavior28);
        boolean boolean31 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray24, 32768);
        unrecognizedExtraField20.setLocalFileDataData(byteArray24);
        unrecognizedExtraField19.setCentralDirectoryData(byteArray24);
        pack200CompressorOutputStream18.write(byteArray24);
        java.io.InputStream inputStream35 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream36 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream35);
        zipArchiveInputStream36.mark((int) (byte) -1);
        long long40 = zipArchiveInputStream36.skip((long) 16877);
        java.nio.channels.SeekableByteChannel seekableByteChannel41 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream42 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel41);
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream44 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream42, strMap43);
        byte[] byteArray45 = new byte[] {};
        pack200CompressorOutputStream44.write(byteArray45);
        int int49 = zipArchiveInputStream36.read(byteArray45, (int) (short) -1, (int) (byte) 50);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField51 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray52 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray45, true, unparseableExtraField51);
        pack200CompressorOutputStream18.write(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            sevenZOutputFile10.write(byteArray45, 32768, 4096);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current 7z entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[4, a,  , a, #, 4]");
        org.junit.Assert.assertNotNull(packer16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(zipExtraFieldArray52);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long2 = jarArchiveEntry1.getDataOffset();
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest zipArchiveEntryRequest4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry1, inputStreamSupplier3);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray5 = jarArchiveEntry1.getExtraFields();
        int int6 = jarArchiveEntry1.getInternalAttributes();
        long long7 = jarArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = jarArchiveEntry1.getExtraFields();
        long long9 = jarArchiveEntry1.getSize();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNotNull(zipArchiveEntryRequest4);
        org.junit.Assert.assertNotNull(zipExtraFieldArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE cOMPRESSION_TYPE0 = org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.LZO;
        org.junit.Assert.assertTrue("'" + cOMPRESSION_TYPE0 + "' != '" + org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.LZO + "'", cOMPRESSION_TYPE0.equals(org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.LZO));
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.nio.channels.SeekableByteChannel seekableByteChannel4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel4);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream5, strMap6);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream8 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream7);
        framedSnappyCompressorOutputStream8.finish();
        framedSnappyCompressorOutputStream8.finish();
        framedSnappyCompressorOutputStream8.finish();
        java.nio.channels.SeekableByteChannel seekableByteChannel12 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel12);
        java.lang.String str14 = zipArchiveOutputStream13.getEncoding();
        boolean boolean15 = zipArchiveOutputStream13.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry18 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date19 = cpioArchiveEntry18.getLastModifiedDate();
        cpioArchiveEntry18.setRemoteDeviceMaj((long) 'a');
        int int22 = cpioArchiveEntry18.getAlignmentBoundary();
        boolean boolean23 = zipArchiveOutputStream13.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry18);
        zipArchiveOutputStream13.setComment("pack.code.attribute.");
        java.io.InputStream inputStream26 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream27 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream26);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream29 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream27, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy30 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream32 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream27, pack200Strategy30, strMap31);
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream34 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream13, pack200Strategy30, strMap33);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream35 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream8, pack200Strategy30);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS36 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger37 = x000A_NTFS36.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel38 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream39 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel38);
        java.util.Map<java.lang.String, java.lang.String> strMap40 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream41 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream39, strMap40);
        byte[] byteArray42 = new byte[] {};
        pack200CompressorOutputStream41.write(byteArray42);
        x000A_NTFS36.parseFromCentralDirectoryData(byteArray42, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort47 = x000A_NTFS36.getHeaderId();
        byte[] byteArray48 = x000A_NTFS36.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort49 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray48);
        pack200CompressorOutputStream35.write(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream3.writePreamble(byteArray48, 508, 128);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTF8" + "'", str14, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(pack200Strategy30);
        org.junit.Assert.assertNotNull(zipEightByteInteger37);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(zipShort47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = new org.apache.commons.compress.archivers.zip.JarMarker();
        byte[] byteArray1 = jarMarker0.getLocalFileDataData();
        byte[] byteArray2 = jarMarker0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = jarMarker0.getCentralDirectoryLength();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(zipShort3);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        byte[] byteArray6 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray6);
        cpioArchiveOutputStream4.write(byteArray6, (int) (short) 0, 0);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker11 = new org.apache.commons.compress.archivers.zip.JarMarker();
        byte[] byteArray12 = jarMarker11.getLocalFileDataData();
        byte[] byteArray13 = jarMarker11.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream4.write(byteArray13, 0, (int) (short) 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 0]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream blockLZ4CompressorInputStream5 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField6 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray7 = zip64ExtendedInformationExtraField6.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS8 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger9 = x000A_NTFS8.getModifyTime();
        java.util.Date date10 = x000A_NTFS8.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = x000A_NTFS8.getModifyTime();
        zip64ExtendedInformationExtraField6.setRelativeHeaderOffset(zipEightByteInteger11);
        byte[] byteArray13 = zipEightByteInteger11.getBytes();
        int int14 = zipArchiveInputStream1.read(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byteArray13, (int) (byte) 48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 55");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger9);
        org.junit.Assert.assertNull(date10);
        org.junit.Assert.assertNotNull(zipEightByteInteger11);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.lang.Object obj1 = x5455_ExtendedTimestamp0.clone();
        byte[] byteArray2 = x5455_ExtendedTimestamp0.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray2, 508);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 508");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray1 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS2 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger3 = x000A_NTFS2.getModifyTime();
        java.lang.String str4 = zipEightByteInteger3.toString();
        zip64ExtendedInformationExtraField0.setSize(zipEightByteInteger3);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong6 = org.apache.commons.compress.archivers.zip.ZipLong.SINGLE_SEGMENT_SPLIT_MARKER;
        java.lang.String str7 = zipLong6.toString();
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong6);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort9 = zip64ExtendedInformationExtraField0.getLocalFileDataLength();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ZipEightByteInteger value: 0" + "'", str4, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(zipLong6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ZipLong value: 808471376" + "'", str7, "ZipLong value: 808471376");
        org.junit.Assert.assertNotNull(zipShort9);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        byte[] byteArray0 = null;
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding2 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("lzma");
        java.nio.ByteBuffer byteBuffer4 = zipEncoding2.encode("pack.pass.file.");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray0, zipEncoding2, true, (long) 493);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipEncoding2);
        org.junit.Assert.assertNotNull(byteBuffer4);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.apache.commons.compress.MemoryLimitException memoryLimitException2 = new org.apache.commons.compress.MemoryLimitException(0L, 3);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream3);
        long long8 = cpioArchiveInputStream6.skip((long) 40960);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = cpioArchiveInputStream6.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry6 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("pack200", (long) 64, (int) (short) 1, 488, 424935705, 46947589L);
        long long7 = arArchiveEntry6.getLastModified();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 46947589L + "'", long7 == 46947589L);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong2);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG;
        long long6 = zipLong5.getValue();
        x5455_ExtendedTimestamp0.setModifyTime(zipLong5);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray8 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel9 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray8);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel9);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel9);
        boolean boolean12 = x5455_ExtendedTimestamp0.equals((java.lang.Object) seekableByteChannel9);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray13 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel14 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray13);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel14);
        char[] charArray22 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile23 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel14, charArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile24 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel9, charArray22);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(zipLong5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 33639248L + "'", long6 == 33639248L);
        org.junit.Assert.assertNotNull(seekableByteChannelArray8);
        org.junit.Assert.assertNotNull(seekableByteChannel9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(seekableByteChannelArray13);
        org.junit.Assert.assertNotNull(seekableByteChannel14);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[4, a,  , a, #, 4]");
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream2, true);
        arArchiveInputStream2.close();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream6 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream((java.io.InputStream) arArchiveInputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current ar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField1 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (short) 100);
        byte[] byteArray2 = resourceAlignmentExtraField1.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = resourceAlignmentExtraField1.getCentralDirectoryLength();
        int int4 = zipShort3.getValue();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 0]");
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong2);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger5 = zip64ExtendedInformationExtraField0.getSize();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = zip64ExtendedInformationExtraField0.getCentralDirectoryLength();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNull(zipEightByteInteger5);
        org.junit.Assert.assertNotNull(zipShort6);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean13 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray11, 3);
        boolean boolean15 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray11, (int) (byte) 53);
        boolean boolean17 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray11, (int) ' ');
        org.apache.commons.compress.archivers.tar.TarFile tarFile18 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray11);
        java.io.File file19 = null;
        expander0.expand(tarFile18, file19);
        org.apache.commons.compress.archivers.zip.ZipFile zipFile21 = null;
        java.io.File file22 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand(zipFile21, file22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        zipArchiveOutputStream1.setMethod(0);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.setEncoding("tar\000");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: tar?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = x000A_NTFS0.getHeaderId();
        byte[] byteArray12 = x000A_NTFS0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort13 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray12);
        java.lang.String str14 = zipShort13.toString();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipShort11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ZipShort value: 0" + "'", str14, "ZipShort value: 0");
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray2 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray2);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile4 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel3);
        org.apache.commons.compress.archivers.tar.TarFile tarFile9 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel3, 60012, 32768, "apkm", true);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray10 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel11 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray10);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile12 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel11);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel11);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray14 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray14);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel15);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile17 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel15);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray18 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel19 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray18);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile20 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel19);
        org.apache.commons.compress.archivers.tar.TarFile tarFile21 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel19);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray22 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel23 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray22);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile24 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel23);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream25 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel23);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray26 = new java.nio.channels.SeekableByteChannel[] { seekableByteChannel11, seekableByteChannel15, seekableByteChannel19, seekableByteChannel23 };
        java.nio.channels.SeekableByteChannel seekableByteChannel27 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray26);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray28 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel29 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray28);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel29);
        char[] charArray37 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile38 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel29, charArray37);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile39 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel29);
        org.apache.commons.compress.archivers.tar.TarFile tarFile40 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel29);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray41 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel42 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray41);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream43 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel42);
        char[] charArray50 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile51 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel42, charArray50);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile52 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel42);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray53 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel54 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray53);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile55 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel54);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream56 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel54);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray57 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel58 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray57);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream59 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel58);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile60 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel58);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray61 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel62 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray61);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile63 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel62);
        org.apache.commons.compress.archivers.tar.TarFile tarFile64 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel62);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray65 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel66 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray65);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile67 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel66);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream68 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel66);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray69 = new java.nio.channels.SeekableByteChannel[] { seekableByteChannel54, seekableByteChannel58, seekableByteChannel62, seekableByteChannel66 };
        java.nio.channels.SeekableByteChannel seekableByteChannel70 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray69);
        java.nio.channels.SeekableByteChannel seekableByteChannel71 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray69);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray72 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel73 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray72);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream74 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel73);
        org.apache.commons.compress.archivers.tar.TarFile tarFile79 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel73, (int) (short) 4, 512, "pass", false);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray80 = new java.nio.channels.SeekableByteChannel[] { seekableByteChannel3, seekableByteChannel27, seekableByteChannel29, seekableByteChannel42, seekableByteChannel71, seekableByteChannel73 };
        java.nio.channels.SeekableByteChannel seekableByteChannel81 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray80);
        java.io.File file82 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("pack.effort", seekableByteChannel81, file82);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: pack.effort not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray2);
        org.junit.Assert.assertNotNull(seekableByteChannel3);
        org.junit.Assert.assertNotNull(seekableByteChannelArray10);
        org.junit.Assert.assertNotNull(seekableByteChannel11);
        org.junit.Assert.assertNotNull(seekableByteChannelArray14);
        org.junit.Assert.assertNotNull(seekableByteChannel15);
        org.junit.Assert.assertNotNull(seekableByteChannelArray18);
        org.junit.Assert.assertNotNull(seekableByteChannel19);
        org.junit.Assert.assertNotNull(seekableByteChannelArray22);
        org.junit.Assert.assertNotNull(seekableByteChannel23);
        org.junit.Assert.assertNotNull(seekableByteChannelArray26);
        org.junit.Assert.assertNotNull(seekableByteChannel27);
        org.junit.Assert.assertNotNull(seekableByteChannelArray28);
        org.junit.Assert.assertNotNull(seekableByteChannel29);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[4, a,  , a, #, 4]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray41);
        org.junit.Assert.assertNotNull(seekableByteChannel42);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "4a a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "4a a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[4, a,  , a, #, 4]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray53);
        org.junit.Assert.assertNotNull(seekableByteChannel54);
        org.junit.Assert.assertNotNull(seekableByteChannelArray57);
        org.junit.Assert.assertNotNull(seekableByteChannel58);
        org.junit.Assert.assertNotNull(seekableByteChannelArray61);
        org.junit.Assert.assertNotNull(seekableByteChannel62);
        org.junit.Assert.assertNotNull(seekableByteChannelArray65);
        org.junit.Assert.assertNotNull(seekableByteChannel66);
        org.junit.Assert.assertNotNull(seekableByteChannelArray69);
        org.junit.Assert.assertNotNull(seekableByteChannel70);
        org.junit.Assert.assertNotNull(seekableByteChannel71);
        org.junit.Assert.assertNotNull(seekableByteChannelArray72);
        org.junit.Assert.assertNotNull(seekableByteChannel73);
        org.junit.Assert.assertNotNull(seekableByteChannelArray80);
        org.junit.Assert.assertNotNull(seekableByteChannel81);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException unsupportedCompressionAlgorithmException1 = new org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException("ustar ");
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        int int10 = tarArchiveOutputStream6.getCount();
        tarArchiveOutputStream6.setBigNumberMode(1);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer13 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap14 = packer13.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream15 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) tarArchiveOutputStream6, (java.util.Map<java.lang.String, java.lang.String>) strMap14);
        // The following exception was thrown during execution in test generation
        try {
            pack200CompressorOutputStream15.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(packer13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort0 = org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField1 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraFieldNoDefault(zipShort0);
        org.junit.Assert.assertNotNull(zipShort0);
        org.junit.Assert.assertNotNull(zipExtraField1);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize0 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters4 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize0, true, true, false);
        java.lang.String str5 = parameters4.toString();
        org.junit.Assert.assertTrue("'" + blockSize0 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize0.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LZ4 Parameters with BlockSize M1, withContentChecksum true, withBlockChecksum true, withBlockDependency false" + "'", str5, "LZ4 Parameters with BlockSize M1, withContentChecksum true, withBlockChecksum true, withBlockDependency false");
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream2.close();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder0 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions1 = builder0.build();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder3 = builder0.withMaxMemoryLimitInKb(4096);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions4 = builder0.build();
        boolean boolean5 = sevenZFileOptions4.getTryToRecoverBrokenArchives();
        boolean boolean6 = sevenZFileOptions4.getTryToRecoverBrokenArchives();
        boolean boolean7 = sevenZFileOptions4.getUseDefaultNameForUnnamedEntries();
        org.junit.Assert.assertNotNull(sevenZFileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(sevenZFileOptions4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature0 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        java.lang.String str1 = feature0.toString();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry3 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long4 = jarArchiveEntry3.getDataOffset();
        byte[] byteArray5 = jarArchiveEntry3.getRawName();
        jarArchiveEntry3.setInternalAttributes(1024);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException8 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature0, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry3);
        java.lang.String str9 = jarArchiveEntry3.getName();
        jarArchiveEntry3.setCompressedSize((long) 52);
        jarArchiveEntry3.setMethod(26128);
        org.junit.Assert.assertNotNull(feature0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "data descriptor" + "'", str1, "data descriptor");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(byteArray5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "bzip2" + "'", str9, "bzip2");
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator3 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier2.get();
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore5 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore6 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor7 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore6);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream8 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore5, streamCompressor7);
        long long9 = streamCompressor7.getTotalBytesWritten();
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream10 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore4, streamCompressor7);
        java.nio.channels.SeekableByteChannel seekableByteChannel11 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream12 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel11);
        java.lang.String str13 = zipArchiveOutputStream12.getEncoding();
        boolean boolean14 = zipArchiveOutputStream12.isSeekable();
        zipArchiveOutputStream12.flush();
        zipArchiveOutputStream12.flush();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry19 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("", (long) 100);
        boolean boolean20 = zipArchiveOutputStream12.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) arArchiveEntry19);
        scatterZipOutputStream10.writeTo(zipArchiveOutputStream12);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter zipEntryWriter22 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter(scatterZipOutputStream10);
        java.nio.channels.SeekableByteChannel seekableByteChannel23 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel23);
        java.lang.String str25 = zipArchiveOutputStream24.getEncoding();
        boolean boolean26 = zipArchiveOutputStream24.isSeekable();
        zipArchiveOutputStream24.flush();
        zipArchiveOutputStream24.flush();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry31 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("", (long) 100);
        boolean boolean32 = zipArchiveOutputStream24.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) arArchiveEntry31);
        // The following exception was thrown during execution in test generation
        try {
            zipEntryWriter22.writeNextZipEntry(zipArchiveOutputStream24);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
        org.junit.Assert.assertNotNull(streamCompressor7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTF8" + "'", str13, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTF8" + "'", str25, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        gzipCompressorOutputStream4.flush();
        gzipCompressorOutputStream4.write(464);
        gzipCompressorOutputStream4.finish();
        gzipCompressorOutputStream4.flush();
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream blockLZ4CompressorOutputStream10 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream12 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream4, 508);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: blockSize(508) > 9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField2);
        byte[] byteArray4 = jarArchiveEntry1.getCentralDirectoryExtra();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray4, 29127);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[30, -95, 2, 0, 0, 0]");
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setRemoteDeviceMaj((long) 'a');
        boolean boolean6 = cpioArchiveEntry2.isBlockDevice();
        boolean boolean7 = cpioArchiveEntry2.isDirectory();
        long long8 = cpioArchiveEntry2.getDeviceMaj();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = cpioArchiveEntry2.getDevice();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarFile tarFile4 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.nio.file.attribute.FileTime fileTime9 = null;
        tarArchiveEntry7.setCreationTime(fileTime9);
        long long11 = tarArchiveEntry7.getSize();
        java.io.InputStream inputStream12 = tarFile4.getInputStream(tarArchiveEntry7);
        java.nio.file.Path path13 = null;
        expander0.expand(tarFile4, path13);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray15 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel16 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray15);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile17 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel16);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream18 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel16);
        char[] charArray19 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile20 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel16, charArray19);
        org.apache.commons.compress.archivers.tar.TarFile tarFile21 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel16);
        java.io.File file22 = null;
        expander0.expand(tarFile21, file22);
        org.apache.commons.compress.archivers.zip.ZipFile zipFile24 = null;
        java.io.File file25 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand(zipFile24, file25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(inputStream12);
        org.junit.Assert.assertNotNull(seekableByteChannelArray15);
        org.junit.Assert.assertNotNull(seekableByteChannel16);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[]");
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.compressors.snappy.FramedSnappyDialect framedSnappyDialect2 = org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE;
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream framedSnappyCompressorInputStream3 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream(inputStream0, framedSnappyDialect2);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) framedSnappyCompressorInputStream3, 100, 508);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = framedSnappyCompressorInputStream3.read();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + framedSnappyDialect2 + "' != '" + org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE + "'", framedSnappyDialect2.equals(org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE));
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        gzipCompressorOutputStream4.flush();
        gzipCompressorOutputStream4.write(464);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize8 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M4;
        org.apache.commons.compress.compressors.lz77support.Parameters parameters12 = null;
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters13 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize8, true, true, true, parameters12);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters17 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize8, true, true, true);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream framedLZ4CompressorOutputStream18 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream4, parameters17);
        framedLZ4CompressorOutputStream18.finish();
        // The following exception was thrown during execution in test generation
        try {
            framedLZ4CompressorOutputStream18.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + blockSize8 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M4 + "'", blockSize8.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M4));
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream10);
        zipArchiveInputStream11.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream11, 488);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream16 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream15);
        java.nio.file.Path path17 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) tarArchiveInputStream15, path17);
        java.io.InputStream inputStream19 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream19);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream22 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream20, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy23 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream25 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream20, pack200Strategy23, strMap24);
        int int26 = pack200CompressorInputStream25.read();
        java.io.InputStream inputStream27 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream28 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream27);
        zipArchiveInputStream28.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream31 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream28);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy32 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream33 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream31, pack200Strategy32);
        java.nio.channels.SeekableByteChannel seekableByteChannel34 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream35 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel34);
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream37 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream35, strMap36);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream38 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream37);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer39 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap40 = packer39.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream41 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream38, (java.util.Map<java.lang.String, java.lang.String>) strMap40);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream42 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream25, pack200Strategy32, (java.util.Map<java.lang.String, java.lang.String>) strMap40);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer43 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap44 = packer43.properties();
        org.apache.commons.compress.compressors.FileNameUtil fileNameUtil46 = new org.apache.commons.compress.compressors.FileNameUtil((java.util.Map<java.lang.String, java.lang.String>) strMap44, ".lzma");
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream47 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream25, (java.util.Map<java.lang.String, java.lang.String>) strMap44);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream48 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream25);
        java.io.File file49 = null;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer50 = org.apache.commons.compress.archivers.examples.CloseableConsumer.CLOSING_CONSUMER;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand((java.io.InputStream) pack200CompressorInputStream48, file49, closeableConsumer50);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: data descriptor");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(pack200Strategy23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 80 + "'", int26 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy32);
        org.junit.Assert.assertNotNull(packer39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(packer43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(closeableConsumer50);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        java.nio.file.attribute.FileTime fileTime6 = tarArchiveEntry2.getLastModifiedTime();
        long long7 = tarArchiveEntry2.getLongGroupId();
        java.util.Date date8 = tarArchiveEntry2.getModTime();
        long long9 = tarArchiveEntry2.getLongGroupId();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertNotNull(fileTime6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Jun 19 23:20:36 CEST 2023");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData0 = new org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = unparseableExtraFieldData0.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = unparseableExtraFieldData0.getHeaderId();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry4 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long5 = jarArchiveEntry4.getDataOffset();
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier6 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest zipArchiveEntryRequest7 = org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry4, inputStreamSupplier6);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = jarArchiveEntry4.getExtraFields();
        byte[] byteArray9 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(zipExtraFieldArray8);
        // The following exception was thrown during execution in test generation
        try {
            unparseableExtraFieldData0.parseFromCentralDirectoryData(byteArray9, 2162688, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(zipArchiveEntryRequest7);
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        java.nio.file.Path path0 = null;
        java.nio.file.OpenOption[] openOptionArray1 = new java.nio.file.OpenOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(path0, openOptionArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(openOptionArray1);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setDeleted(false);
        dumpArchiveEntry0.setDeleted(false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path8 = tarArchiveEntry7.getPath();
        java.nio.file.attribute.FileTime fileTime9 = null;
        tarArchiveEntry7.setCreationTime(fileTime9);
        java.nio.file.attribute.FileTime fileTime11 = tarArchiveEntry7.getLastModifiedTime();
        tarArchiveEntry7.setNames(" \000", "UTF8");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path18 = tarArchiveEntry17.getPath();
        java.nio.file.attribute.FileTime fileTime19 = null;
        tarArchiveEntry17.setCreationTime(fileTime19);
        int int21 = tarArchiveEntry17.getUserId();
        java.util.Date date22 = tarArchiveEntry17.getModTime();
        tarArchiveEntry7.setModTime(date22);
        dumpArchiveEntry0.setCreationTime(date22);
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet25 = dumpArchiveEntry0.getPermissions();
        org.junit.Assert.assertNull(path8);
        org.junit.Assert.assertNotNull(fileTime11);
        org.junit.Assert.assertNull(path18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Mon Jun 19 23:20:36 CEST 2023");
        org.junit.Assert.assertNotNull(pERMISSIONSet25);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        deflateCompressorOutputStream16.flush();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream18 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) deflateCompressorOutputStream16);
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField19 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort20 = resourceAlignmentExtraField19.getCentralDirectoryLength();
        byte[] byteArray21 = zipShort20.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            arArchiveOutputStream18.write(byteArray21, (int) (byte) 83, 424935705);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(zipShort20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[2, 0]");
    }

//    @Test
//    public void test1855() throws Throwable {
//        if (debug)
//            System.out.format("%n%s%n", "RegressionTest3.test1855");
//        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
//        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
//        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
//        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, 60012, 32768, "apkm", true);
//        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray8 = new java.nio.channels.SeekableByteChannel[] {};
//        java.nio.channels.SeekableByteChannel seekableByteChannel9 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray8);
//        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel9);
//        char[] charArray17 = new char[] { '4', 'a', ' ', 'a', '#', '4' };
//        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile18 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel9, charArray17);
//        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile19 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray17);
//        // The following exception was thrown during execution in test generation
//        try {
//            sevenZOutputFile19.closeArchiveEntry();
//            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
//        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
//            // Expected exception.
//        }
//        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
//        org.junit.Assert.assertNotNull(seekableByteChannel1);
//        org.junit.Assert.assertNotNull(seekableByteChannelArray8);
//        org.junit.Assert.assertNotNull(seekableByteChannel9);
//        org.junit.Assert.assertNotNull(charArray17);
//        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4a a#4");
//        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4a a#4");
//        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4, a,  , a, #, 4]");
//    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setLongFileMode((int) (byte) 120);
        tarArchiveOutputStream6.finish();
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.apache.commons.compress.compressors.lz4.XXHash32 xXHash32_1 = new org.apache.commons.compress.compressors.lz4.XXHash32(3);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2);
        arArchiveOutputStream5.finish();
        arArchiveOutputStream5.setLongFileMode(96);
        arArchiveOutputStream5.setLongFileMode(4095);
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry13 = arArchiveOutputStream5.createArchiveEntry(file11, "00");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        int int10 = tarArchiveOutputStream6.getCount();
        tarArchiveOutputStream6.setBigNumberMode(1);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer13 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap14 = packer13.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream15 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) tarArchiveOutputStream6, (java.util.Map<java.lang.String, java.lang.String>) strMap14);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp16 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong18 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray19 = zipLong18.getBytes();
        x5455_ExtendedTimestamp16.setModifyTime(zipLong18);
        boolean boolean21 = x5455_ExtendedTimestamp16.isBit2_createTimePresent();
        byte[] byteArray22 = x5455_ExtendedTimestamp16.getLocalFileDataData();
        boolean boolean24 = org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byteArray22, 263);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream6.write(byteArray22, (int) (short) 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(packer13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        java.nio.file.attribute.FileTime fileTime6 = tarArchiveEntry2.getLastModifiedTime();
        boolean boolean7 = tarArchiveEntry2.isSparse();
        java.lang.String str8 = tarArchiveEntry2.getName();
        java.lang.String str9 = tarArchiveEntry2.getName();
        boolean boolean10 = tarArchiveEntry2.isCheckSumOK();
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList11 = tarArchiveEntry2.getOrderedSparseHeaders();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertNotNull(fileTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "deflate64" + "'", str8, "deflate64");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "deflate64" + "'", str9, "deflate64");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList11);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS11 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger12 = x000A_NTFS11.getModifyTime();
        java.util.Date date13 = x000A_NTFS11.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger14 = x000A_NTFS11.getModifyTime();
        x000A_NTFS0.setModifyTime(zipEightByteInteger14);
        java.nio.file.attribute.FileTime fileTime16 = x000A_NTFS0.getModifyFileTime();
        java.lang.String str17 = x000A_NTFS0.toString();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger12);
        org.junit.Assert.assertNull(date13);
        org.junit.Assert.assertNotNull(zipEightByteInteger14);
        org.junit.Assert.assertNull(fileTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str17, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        java.nio.file.Path path0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile2 = new org.apache.commons.compress.archivers.zip.ZipFile(path0, "ZipLong value: 808471376");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy3 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
        java.lang.String str4 = unicodeExtraFieldPolicy3.toString();
        zipArchiveOutputStream1.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy3);
        boolean boolean6 = zipArchiveOutputStream1.isSeekable();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.write(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "never" + "'", str4, "never");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray7 = zipShort6.getBytes();
        boolean boolean9 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray7, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray7, true);
        gzipCompressorOutputStream5.write(byteArray7);
        closeableConsumer0.accept((java.io.Closeable) gzipCompressorOutputStream5);
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters14 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters14.setDeflateStrategy((int) (short) 3);
        gzipParameters14.setComment("unpack.deflate.hint");
        gzipParameters14.setDeflateStrategy((int) (short) 0);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream21 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream5, gzipParameters14);
        // The following exception was thrown during execution in test generation
        try {
            gzipParameters14.setCompressionLevel(25461);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid gzip compression level: 25461");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        int int6 = deflateCompressorInputStream5.available();
        int int7 = deflateCompressorInputStream5.available();
        int int8 = deflateCompressorInputStream5.getCount();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) deflateCompressorInputStream5);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) deflateCompressorInputStream5, (int) (byte) -1, 2048, "pack.code.attribute.", false);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = tarArchiveInputStream14.skip(156L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = x000A_NTFS0.getAccessTime();
        java.math.BigInteger bigInteger12 = zipEightByteInteger11.getValue();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger13 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger(bigInteger12);
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(bigInteger12);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byteArray14, 2048, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2048");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.apache.commons.compress.archivers.dump.InvalidFormatException invalidFormatException1 = new org.apache.commons.compress.archivers.dump.InvalidFormatException(4096L);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setRemoteDeviceMin((long) 12);
        java.util.Date date6 = cpioArchiveEntry2.getLastModifiedDate();
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveEntry2.setDevice((long) 67324752);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry2 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long3 = arArchiveEntry2.getLastModified();
        int int4 = arArchiveEntry2.getUserId();
        long long5 = arArchiveEntry2.getLength();
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters6 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters6.setDeflateStrategy((int) (short) 3);
        int int9 = gzipParameters6.getDeflateStrategy();
        gzipParameters6.setModificationTime((long) 60012);
        boolean boolean12 = arArchiveEntry2.equals((java.lang.Object) 60012);
        int int13 = arArchiveEntry2.getUserId();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1687209637L + "'", long3 == 1687209637L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 12L + "'", long5 == 12L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream2, true);
        int int5 = tarArchiveInputStream4.getRecordSize();
        tarArchiveInputStream4.mark((int) (byte) 51);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = tarArchiveInputStream4.skip(1687209591L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 512 + "'", int5 == 512);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("pack.modification.time", (byte) 53, false);
        boolean boolean4 = tarArchiveEntry3.isGNULongNameEntry();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        java.io.File file0 = null;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream2, 257, "UTF8");
        byte[] byteArray10 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes(504);
        int int13 = zipArchiveInputStream2.read(byteArray10, 420, 4);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy14 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY;
        java.io.InputStream inputStream15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream15);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream16, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy19 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream21 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream16, pack200Strategy19, strMap20);
        int int22 = pack200CompressorInputStream21.read();
        java.io.InputStream inputStream23 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream23);
        zipArchiveInputStream24.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream24);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy28 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream29 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream27, pack200Strategy28);
        java.nio.channels.SeekableByteChannel seekableByteChannel30 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream31 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream33 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream31, strMap32);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream34 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream33);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer35 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap36 = packer35.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream37 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream34, (java.util.Map<java.lang.String, java.lang.String>) strMap36);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream38 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream21, pack200Strategy28, (java.util.Map<java.lang.String, java.lang.String>) strMap36);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer39 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap40 = packer39.properties();
        org.apache.commons.compress.compressors.FileNameUtil fileNameUtil42 = new org.apache.commons.compress.compressors.FileNameUtil((java.util.Map<java.lang.String, java.lang.String>) strMap40, ".lzma");
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream43 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream21, (java.util.Map<java.lang.String, java.lang.String>) strMap40);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream44 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream2, pack200Strategy14, (java.util.Map<java.lang.String, java.lang.String>) strMap40);
        java.io.InputStream inputStream45 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream46 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream45);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream47 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream48 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry49 = tarArchiveInputStream48.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream50 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream48);
        int int51 = deflateCompressorInputStream50.available();
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream53 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) deflateCompressorInputStream50, (int) (byte) 100);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer54 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap55 = packer54.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream56 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) cpioArchiveInputStream53, (java.util.Map<java.lang.String, java.lang.String>) strMap55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream57 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(file0, pack200Strategy14, (java.util.Map<java.lang.String, java.lang.String>) strMap55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-8, 1]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(pack200Strategy14);
        org.junit.Assert.assertNotNull(pack200Strategy19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 80 + "'", int22 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy28);
        org.junit.Assert.assertNotNull(packer35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(packer39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(tarArchiveEntry49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(packer54);
        org.junit.Assert.assertNotNull(strMap55);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy3 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
        boolean boolean4 = jarArchiveEntry1.equals((java.lang.Object) unicodeExtraFieldPolicy3);
        jarArchiveEntry1.setTime(1687209510L);
        int int7 = jarArchiveEntry1.getVersionMadeBy();
        jarArchiveEntry1.setInternalAttributes(2147483647);
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setRemoteDeviceMaj((long) 'a');
        int int6 = cpioArchiveEntry2.getAlignmentBoundary();
        long long7 = cpioArchiveEntry2.getRemoteDeviceMaj();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry10 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path11 = tarArchiveEntry10.getPath();
        java.nio.file.attribute.FileTime fileTime12 = null;
        tarArchiveEntry10.setCreationTime(fileTime12);
        int int14 = tarArchiveEntry10.getUserId();
        java.util.Date date15 = tarArchiveEntry10.getModTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path19 = tarArchiveEntry18.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path23 = tarArchiveEntry22.getPath();
        java.nio.file.attribute.FileTime fileTime24 = null;
        tarArchiveEntry22.setCreationTime(fileTime24);
        java.nio.file.attribute.FileTime fileTime26 = tarArchiveEntry22.getLastModifiedTime();
        tarArchiveEntry18.setLastAccessTime(fileTime26);
        tarArchiveEntry10.setModTime(fileTime26);
        cpioArchiveEntry2.setTime(fileTime26);
        long long30 = cpioArchiveEntry2.getInode();
        boolean boolean31 = cpioArchiveEntry2.isBlockDevice();
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertNull(path11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Jun 19 23:20:38 CEST 2023");
        org.junit.Assert.assertNull(path19);
        org.junit.Assert.assertNull(path23);
        org.junit.Assert.assertNotNull(fileTime26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes(3);
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[3, 0]");
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.apache.commons.compress.compressors.lz4.XXHash32 xXHash32_1 = new org.apache.commons.compress.compressors.lz4.XXHash32((int) (byte) 83);
        xXHash32_1.reset();
        java.nio.channels.SeekableByteChannel seekableByteChannel3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel3);
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream4, strMap5);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream7 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream6);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer8 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap9 = packer8.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream10 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream7, (java.util.Map<java.lang.String, java.lang.String>) strMap9);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField11 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField12 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean18 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray16, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior20 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray16, false, extraFieldParsingBehavior20);
        boolean boolean23 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray16, 32768);
        unrecognizedExtraField12.setLocalFileDataData(byteArray16);
        unrecognizedExtraField11.setCentralDirectoryData(byteArray16);
        pack200CompressorOutputStream10.write(byteArray16);
        java.io.InputStream inputStream27 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream28 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream27);
        zipArchiveInputStream28.mark((int) (byte) -1);
        long long32 = zipArchiveInputStream28.skip((long) 16877);
        java.nio.channels.SeekableByteChannel seekableByteChannel33 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream34 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel33);
        java.util.Map<java.lang.String, java.lang.String> strMap35 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream36 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream34, strMap35);
        byte[] byteArray37 = new byte[] {};
        pack200CompressorOutputStream36.write(byteArray37);
        int int41 = zipArchiveInputStream28.read(byteArray37, (int) (short) -1, (int) (byte) 50);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField43 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray44 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray37, true, unparseableExtraField43);
        pack200CompressorOutputStream10.write(byteArray37);
        org.apache.commons.compress.archivers.tar.TarFile tarFile47 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray37, true);
        // The following exception was thrown during execution in test generation
        try {
            xXHash32_1.update(byteArray37, (int) (byte) 76, 504);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 76");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(packer8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(zipExtraFieldArray44);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        int int1 = dumpArchiveEntry0.getGroupId();
        java.lang.String str2 = dumpArchiveEntry0.getName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray1 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS2 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger3 = x000A_NTFS2.getModifyTime();
        java.lang.String str4 = zipEightByteInteger3.toString();
        zip64ExtendedInformationExtraField0.setSize(zipEightByteInteger3);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger6 = null;
        zip64ExtendedInformationExtraField0.setCompressedSize(zipEightByteInteger6);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ZipEightByteInteger value: 0" + "'", str4, "ZipEightByteInteger value: 0");
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setVolume((int) (byte) 120);
        java.lang.String str3 = dumpArchiveEntry0.getSimpleName();
        dumpArchiveEntry0.setUserId(11);
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE tYPE6 = dumpArchiveEntry0.getType();
        boolean boolean7 = dumpArchiveEntry0.isSocket();
        dumpArchiveEntry0.setGroupId(5);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + tYPE6 + "' != '" + org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN + "'", tYPE6.equals(org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        int int1 = dumpArchiveEntry0.getNlink();
        long long2 = dumpArchiveEntry0.getOffset();
        boolean boolean3 = dumpArchiveEntry0.isFile();
        java.lang.String str4 = dumpArchiveEntry0.toString();
        dumpArchiveEntry0.setOffset((long) (byte) -1);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS7 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = x000A_NTFS7.getModifyTime();
        java.util.Date date9 = x000A_NTFS7.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger10 = x000A_NTFS7.getModifyTime();
        byte[] byteArray11 = x000A_NTFS7.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path15 = tarArchiveEntry14.getPath();
        java.nio.file.attribute.FileTime fileTime16 = null;
        tarArchiveEntry14.setCreationTime(fileTime16);
        int int18 = tarArchiveEntry14.getUserId();
        long long19 = tarArchiveEntry14.getRealSize();
        java.util.Date date20 = tarArchiveEntry14.getLastModifiedDate();
        x000A_NTFS7.setModifyJavaTime(date20);
        dumpArchiveEntry0.setCreationTime(date20);
        long long23 = dumpArchiveEntry0.getOffset();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(zipEightByteInteger8);
        org.junit.Assert.assertNull(date9);
        org.junit.Assert.assertNotNull(zipEightByteInteger10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(path15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Jun 19 23:20:38 CEST 2023");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray7 = zipShort6.getBytes();
        boolean boolean9 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray7, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray7, true);
        gzipCompressorOutputStream5.write(byteArray7);
        closeableConsumer0.accept((java.io.Closeable) gzipCompressorOutputStream5);
        byte[] byteArray15 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) 7);
        gzipCompressorOutputStream5.write(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) gzipCompressorOutputStream5, 96, "0x5455 Zip Extra Field: Flags=0 ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Block size must be a multiple of 512 bytes. Attempt to use set size of 96");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[7, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField2);
        java.nio.file.attribute.FileTime fileTime4 = jarArchiveEntry1.getLastAccessTime();
        java.nio.file.attribute.FileTime fileTime5 = jarArchiveEntry1.getLastAccessTime();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp6 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong8 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray9 = zipLong8.getBytes();
        x5455_ExtendedTimestamp6.setModifyTime(zipLong8);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path14 = tarArchiveEntry13.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path18 = tarArchiveEntry17.getPath();
        java.nio.file.attribute.FileTime fileTime19 = null;
        tarArchiveEntry17.setCreationTime(fileTime19);
        java.nio.file.attribute.FileTime fileTime21 = tarArchiveEntry17.getLastModifiedTime();
        tarArchiveEntry13.setLastAccessTime(fileTime21);
        x5455_ExtendedTimestamp6.setModifyFileTime(fileTime21);
        boolean boolean24 = jarArchiveEntry1.equals((java.lang.Object) fileTime21);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry26 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField27 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry26.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField27);
        byte[] byteArray29 = jarArchiveEntry26.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField30 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry26.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField30);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort32 = resourceAlignmentExtraField30.getLocalFileDataLength();
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveEntry1.removeExtraField(zipShort32);
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertNull(fileTime5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNull(path14);
        org.junit.Assert.assertNull(path18);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipShort32);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE cOMPRESSION_TYPE1 = org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(61440);
        org.junit.Assert.assertNull(cOMPRESSION_TYPE1);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder0 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder2 = builder0.withMaxMemoryLimitInKb(508);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder4 = builder2.withTryToRecoverBrokenArchives(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory0 = new org.apache.commons.compress.compressors.CompressorStreamFactory();
        java.util.Set<java.lang.String> strSet1 = compressorStreamFactory0.getInputStreamCompressorNames();
        java.util.Set<java.lang.String> strSet2 = compressorStreamFactory0.getInputStreamCompressorNames();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory1 = new org.apache.commons.compress.compressors.CompressorStreamFactory(false);
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.compressors.CompressorStreamProvider> strMap2 = compressorStreamFactory1.getCompressorInputStreamProviders();
        java.io.InputStream inputStream3 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream4 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream3);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream6 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream4, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy7 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream9 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream4, pack200Strategy7, strMap8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.CompressorInputStream compressorInputStream10 = compressorStreamFactory1.createCompressorInputStream((java.io.InputStream) zipArchiveInputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(pack200Strategy7);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.apache.commons.compress.archivers.dump.InvalidFormatException invalidFormatException1 = new org.apache.commons.compress.archivers.dump.InvalidFormatException((long) 31);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        gzipCompressorOutputStream4.flush();
        gzipCompressorOutputStream4.write(464);
        gzipCompressorOutputStream4.finish();
        org.apache.commons.compress.compressors.gzip.GzipParameters gzipParameters9 = new org.apache.commons.compress.compressors.gzip.GzipParameters();
        gzipParameters9.setDeflateStrategy((int) (short) 3);
        int int12 = gzipParameters9.getDeflateStrategy();
        gzipParameters9.setFilename("false.lzma");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream15 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream4, gzipParameters9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.lang.String str2 = zipArchiveOutputStream1.getEncoding();
        boolean boolean3 = zipArchiveOutputStream1.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMaj((long) 'a');
        int int10 = cpioArchiveEntry6.getAlignmentBoundary();
        boolean boolean11 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        cpioArchiveEntry6.setDeviceMin((long) 26128);
        java.util.Date date14 = cpioArchiveEntry6.getLastModifiedDate();
        long long15 = cpioArchiveEntry6.getChksum();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UTF8" + "'", str2, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray7 = zipShort6.getBytes();
        boolean boolean9 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray7, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray7, true);
        gzipCompressorOutputStream5.write(byteArray7);
        closeableConsumer0.accept((java.io.Closeable) gzipCompressorOutputStream5);
        org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream lZMACompressorOutputStream14 = new org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream5);
        // The following exception was thrown during execution in test generation
        try {
            gzipCompressorOutputStream5.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.lang.String str2 = zipEightByteInteger1.toString();
        byte[] byteArray3 = zipEightByteInteger1.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry tarArchiveSparseEntry4 = new org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry(byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ZipEightByteInteger value: 0" + "'", str2, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        long long7 = tarArchiveEntry2.getRealSize();
        boolean boolean8 = tarArchiveEntry2.isGNULongLinkEntry();
        java.lang.String str10 = tarArchiveEntry2.getExtraPaxHeader("deflate64");
        tarArchiveEntry2.setUserId(312764420000L);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = x5455_ExtendedTimestamp0.getAccessTime();
        byte[] byteArray2 = x5455_ExtendedTimestamp0.getCentralDirectoryData();
        boolean boolean3 = x5455_ExtendedTimestamp0.isBit2_createTimePresent();
        org.junit.Assert.assertNull(zipLong1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = x5455_ExtendedTimestamp0.getAccessTime();
        byte[] byteArray2 = x5455_ExtendedTimestamp0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path6 = tarArchiveEntry5.getPath();
        java.nio.file.attribute.FileTime fileTime7 = null;
        tarArchiveEntry5.setCreationTime(fileTime7);
        java.nio.file.attribute.FileTime fileTime9 = tarArchiveEntry5.getLastModifiedTime();
        x5455_ExtendedTimestamp0.setAccessFileTime(fileTime9);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry12 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long13 = jarArchiveEntry12.getCrc();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource14 = jarArchiveEntry12.getCommentSource();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        tarArchiveEntry16.setGroupId((long) (short) 2);
        int int19 = tarArchiveEntry16.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path23 = tarArchiveEntry22.getPath();
        java.lang.String str24 = tarArchiveEntry22.getName();
        boolean boolean25 = tarArchiveEntry22.isFile();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp26 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong27 = x5455_ExtendedTimestamp26.getAccessTime();
        byte[] byteArray28 = x5455_ExtendedTimestamp26.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry31 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path32 = tarArchiveEntry31.getPath();
        java.nio.file.attribute.FileTime fileTime33 = null;
        tarArchiveEntry31.setCreationTime(fileTime33);
        java.nio.file.attribute.FileTime fileTime35 = tarArchiveEntry31.getLastModifiedTime();
        x5455_ExtendedTimestamp26.setAccessFileTime(fileTime35);
        tarArchiveEntry22.setLastModifiedTime(fileTime35);
        tarArchiveEntry16.setLastModifiedTime(fileTime35);
        java.util.zip.ZipEntry zipEntry39 = jarArchiveEntry12.setCreationTime(fileTime35);
        x5455_ExtendedTimestamp0.setAccessFileTime(fileTime35);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry43 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.attribute.FileTime fileTime44 = tarArchiveEntry43.getLastModifiedTime();
        x5455_ExtendedTimestamp0.setAccessFileTime(fileTime44);
        java.util.Date date46 = x5455_ExtendedTimestamp0.getCreateJavaTime();
        org.junit.Assert.assertNull(zipLong1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertNull(path6);
        org.junit.Assert.assertNotNull(fileTime9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + commentSource14 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT + "'", commentSource14.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNull(path23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "deflate64" + "'", str24, "deflate64");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(zipLong27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0]");
        org.junit.Assert.assertNull(path32);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(zipEntry39);
        org.junit.Assert.assertEquals(zipEntry39.toString(), "bzip2");
        org.junit.Assert.assertNotNull(fileTime44);
        org.junit.Assert.assertNull(date46);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        java.lang.String str7 = tarArchiveEntry2.getExtraPaxHeader("xz");
        boolean boolean8 = tarArchiveEntry2.isExtended();
        int int9 = tarArchiveEntry2.getDevMajor();
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("tar.bz2", true);
        boolean boolean3 = tarArchiveEntry2.isGNULongLinkEntry();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3, 5, 1024);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Block size must be a multiple of 512 bytes. Attempt to use set size of 5");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        org.apache.commons.compress.archivers.dump.InvalidFormatException invalidFormatException2 = new org.apache.commons.compress.archivers.dump.InvalidFormatException();
        org.apache.commons.compress.MemoryLimitException memoryLimitException3 = new org.apache.commons.compress.MemoryLimitException((long) 7, 26128, (java.lang.Exception) invalidFormatException2);
        long long4 = memoryLimitException3.getMemoryNeededInKb();
        org.apache.commons.compress.archivers.dump.DumpArchiveException dumpArchiveException5 = new org.apache.commons.compress.archivers.dump.DumpArchiveException((java.lang.Throwable) memoryLimitException3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 7L + "'", long4 == 7L);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray2 = zipShort1.getBytes();
        boolean boolean4 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray2, (int) 'a');
        org.apache.commons.compress.archivers.tar.TarFile tarFile5 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(1687209591L, byteArray2, 21, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path3 = tarArchiveEntry2.getPath();
        java.nio.file.attribute.FileTime fileTime4 = null;
        tarArchiveEntry2.setCreationTime(fileTime4);
        int int6 = tarArchiveEntry2.getUserId();
        java.util.Date date7 = tarArchiveEntry2.getModTime();
        int int8 = tarArchiveEntry2.getUserId();
        long long9 = tarArchiveEntry2.getRealSize();
        boolean boolean10 = tarArchiveEntry2.isCheckSumOK();
        tarArchiveEntry2.setDevMajor((int) (byte) 83);
        org.junit.Assert.assertNull(path3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Jun 19 23:20:39 CEST 2023");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream4 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream blockLZ4CompressorInputStream5 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream((java.io.InputStream) zipArchiveInputStream1);
        long long6 = blockLZ4CompressorInputStream5.getCompressedCount();
        byte[] byteArray7 = null;
        int int10 = blockLZ4CompressorInputStream5.read(byteArray7, 504, 0);
        long long11 = blockLZ4CompressorInputStream5.getCompressedCount();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = blockLZ4CompressorInputStream5.read();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Premature end of stream while looking for next block");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        boolean boolean3 = jarArchiveEntry1.isStreamContiguous();
        long long4 = jarArchiveEntry1.getDataOffset();
        boolean boolean5 = jarArchiveEntry1.isUnixSymlink();
        byte[] byteArray6 = jarArchiveEntry1.getExtra();
        jarArchiveEntry1.setUnixMode((-1));
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(byteArray6);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream10);
        zipArchiveInputStream11.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream11, 488);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream16 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream15);
        java.nio.file.Path path17 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) tarArchiveInputStream15, path17);
        java.io.InputStream inputStream20 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream21 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream20);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream23 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream21, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy24 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream26 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream21, pack200Strategy24, strMap25);
        long long27 = pack200CompressorInputStream26.getBytesRead();
        long long29 = pack200CompressorInputStream26.skip(1687209505L);
        java.io.File file30 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("unpack.deflate.hint", (java.io.InputStream) pack200CompressorInputStream26, file30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: unpack.deflate.hint not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(pack200Strategy24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 29L + "'", long29 == 29L);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean13 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray11, 3);
        boolean boolean15 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray11, (int) (byte) 53);
        boolean boolean17 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray11, (int) ' ');
        org.apache.commons.compress.archivers.tar.TarFile tarFile18 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray11);
        java.io.File file19 = null;
        expander0.expand(tarFile18, file19);
        java.io.InputStream inputStream22 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream23 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream22);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry25 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField26 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry25.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField26);
        byte[] byteArray28 = jarArchiveEntry25.getCentralDirectoryExtra();
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField29 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry25.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField29);
        byte[] byteArray31 = resourceAlignmentExtraField29.getLocalFileDataData();
        int int34 = zipArchiveInputStream23.read(byteArray31, 1000, 493);
        java.io.File file35 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("0x5455 Zip Extra Field: Flags=0 .gz", (java.io.InputStream) zipArchiveInputStream23, file35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: 0x5455 Zip Extra Field: Flags=0 .gz not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[30, -95, 2, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        int int5 = jarArchiveEntry1.getRawFlag();
        jarArchiveEntry1.setExternalAttributes((long) (byte) 51);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource8 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry1.setCommentSource(commentSource8);
        jarArchiveEntry1.setTime((long) 16);
        int int12 = jarArchiveEntry1.getRawFlag();
        boolean boolean13 = jarArchiveEntry1.isStreamContiguous();
        int int14 = jarArchiveEntry1.getRawFlag();
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + commentSource8 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD + "'", commentSource8.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        boolean boolean3 = jarArchiveEntry1.isStreamContiguous();
        long long4 = jarArchiveEntry1.getDataOffset();
        boolean boolean5 = jarArchiveEntry1.isUnixSymlink();
        java.nio.file.attribute.FileTime fileTime6 = jarArchiveEntry1.getLastAccessTime();
        java.lang.String str7 = jarArchiveEntry1.getName();
        java.util.jar.Attributes attributes8 = jarArchiveEntry1.getManifestAttributes();
        jarArchiveEntry1.setInternalAttributes(10);
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(fileTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "bzip2" + "'", str7, "bzip2");
        org.junit.Assert.assertNull(attributes8);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        java.nio.file.Path path0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile4 = new org.apache.commons.compress.archivers.zip.ZipFile(path0, "LZ4 Parameters with BlockSize M1, withContentChecksum true, withBlockChecksum true, withBlockDependency false", true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        int int1 = asiExtraField0.getMode();
        boolean boolean2 = asiExtraField0.isDirectory();
        asiExtraField0.setLinkedFile("error");
        asiExtraField0.setLinkedFile("pack.effort");
        asiExtraField0.setGroupId(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.compressors.deflate.DeflateParameters deflateParameters12 = new org.apache.commons.compress.compressors.deflate.DeflateParameters();
        deflateParameters12.setWithZlibHeader(false);
        int int15 = deflateParameters12.getCompressionLevel();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream deflateCompressorOutputStream16 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, deflateParameters12);
        deflateCompressorOutputStream16.flush();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream18 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) deflateCompressorOutputStream16);
        deflateCompressorOutputStream16.write(5);
        // The following exception was thrown during execution in test generation
        try {
            deflateCompressorOutputStream16.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, 60012, 32768, "apkm", true);
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField9 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        byte[] byteArray10 = resourceAlignmentExtraField9.getLocalFileDataData();
        byte[] byteArray11 = resourceAlignmentExtraField9.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile12 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel1, "pack.deflate.hint", byteArray11);
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0]");
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        long long2 = x0017_StrongEncryptionHeader0.getRecordCount();
        byte[] byteArray3 = x0017_StrongEncryptionHeader0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = x0017_StrongEncryptionHeader0.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = x0017_StrongEncryptionHeader0.getLocalFileDataLength();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNull(byteArray3);
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNotNull(zipShort5);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.file.Path path2 = null;
        java.nio.file.Path path3 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("LiteralBlock starting at 488 with length 2", path2, path3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        boolean boolean3 = jarArchiveEntry1.isStreamContiguous();
        long long4 = jarArchiveEntry1.getDataOffset();
        boolean boolean5 = jarArchiveEntry1.isUnixSymlink();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS6 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger7 = x000A_NTFS6.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream11 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream9, strMap10);
        byte[] byteArray12 = new byte[] {};
        pack200CompressorOutputStream11.write(byteArray12);
        x000A_NTFS6.parseFromCentralDirectoryData(byteArray12, 64, 0);
        jarArchiveEntry1.setCentralDirectoryExtra(byteArray12);
        byte[] byteArray18 = jarArchiveEntry1.getCentralDirectoryExtra();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray18, 49152);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.lang.Object obj1 = x5455_ExtendedTimestamp0.clone();
        byte[] byteArray2 = x5455_ExtendedTimestamp0.getCentralDirectoryData();
        boolean boolean3 = x5455_ExtendedTimestamp0.isBit0_modifyTimePresent();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "0x5455 Zip Extra Field: Flags=0 ");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        java.io.File file0 = null;
        char[] charArray5 = new char[] { ' ', '#', ' ', '#' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile6 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(file0, charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), " # #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), " # #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[ , #,  , #]");
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField2);
        java.nio.file.attribute.FileTime fileTime4 = jarArchiveEntry1.getLastAccessTime();
        java.nio.file.attribute.FileTime fileTime5 = jarArchiveEntry1.getLastAccessTime();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp6 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong8 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray9 = zipLong8.getBytes();
        x5455_ExtendedTimestamp6.setModifyTime(zipLong8);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path14 = tarArchiveEntry13.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path18 = tarArchiveEntry17.getPath();
        java.nio.file.attribute.FileTime fileTime19 = null;
        tarArchiveEntry17.setCreationTime(fileTime19);
        java.nio.file.attribute.FileTime fileTime21 = tarArchiveEntry17.getLastModifiedTime();
        tarArchiveEntry13.setLastAccessTime(fileTime21);
        x5455_ExtendedTimestamp6.setModifyFileTime(fileTime21);
        boolean boolean24 = jarArchiveEntry1.equals((java.lang.Object) fileTime21);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode25 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS26 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger27 = x000A_NTFS26.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel28 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream29 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel28);
        java.util.Map<java.lang.String, java.lang.String> strMap30 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream31 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream29, strMap30);
        byte[] byteArray32 = new byte[] {};
        pack200CompressorOutputStream31.write(byteArray32);
        x000A_NTFS26.parseFromCentralDirectoryData(byteArray32, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort37 = x000A_NTFS26.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField38 = extraFieldParsingMode25.createExtraField(zipShort37);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField39 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray40 = unrecognizedExtraField39.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort41 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray42 = zipShort41.getBytes();
        java.lang.Object obj43 = zipShort41.clone();
        unrecognizedExtraField39.setHeaderId(zipShort41);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField45 = extraFieldParsingMode25.createExtraField(zipShort41);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray46 = jarArchiveEntry1.getExtraFields((org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode25);
        java.lang.String str47 = jarArchiveEntry1.getComment();
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertNull(fileTime5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNull(path14);
        org.junit.Assert.assertNull(path18);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode25 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode25.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipEightByteInteger27);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(zipShort37);
        org.junit.Assert.assertNotNull(zipExtraField38);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(zipShort41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[30, -95]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "ZipShort value: 41246");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "ZipShort value: 41246");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "ZipShort value: 41246");
        org.junit.Assert.assertNotNull(zipExtraField45);
        org.junit.Assert.assertNotNull(zipExtraFieldArray46);
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer5 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap6 = packer5.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream7 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream4, (java.util.Map<java.lang.String, java.lang.String>) strMap6);
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField8 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField9 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean15 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray13, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior17 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray18 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray13, false, extraFieldParsingBehavior17);
        boolean boolean20 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray13, 32768);
        unrecognizedExtraField9.setLocalFileDataData(byteArray13);
        unrecognizedExtraField8.setCentralDirectoryData(byteArray13);
        pack200CompressorOutputStream7.write(byteArray13);
        java.io.InputStream inputStream24 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream25 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream24);
        zipArchiveInputStream25.mark((int) (byte) -1);
        long long29 = zipArchiveInputStream25.skip((long) 16877);
        java.nio.channels.SeekableByteChannel seekableByteChannel30 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream31 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream33 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream31, strMap32);
        byte[] byteArray34 = new byte[] {};
        pack200CompressorOutputStream33.write(byteArray34);
        int int38 = zipArchiveInputStream25.read(byteArray34, (int) (short) -1, (int) (byte) 50);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField40 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray41 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray34, true, unparseableExtraField40);
        pack200CompressorOutputStream7.write(byteArray34);
        org.apache.commons.compress.archivers.tar.TarFile tarFile44 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray34, true);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding46 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("lz4-block");
        boolean boolean48 = zipEncoding46.canEncode("pack.modification.time");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry51 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray34, zipEncoding46, false, 133316831977220000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(packer5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(zipExtraFieldArray41);
        org.junit.Assert.assertNotNull(zipEncoding46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField0 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        boolean boolean5 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray3, 32768);
        boolean boolean7 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray3, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode9 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray3, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode9);
        org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock literalBlock13 = new org.apache.commons.compress.compressors.lz77support.LZ77Compressor.LiteralBlock(byteArray3, 488, (int) (short) 2);
        unicodePathExtraField0.setUnicodeName(byteArray3);
        unicodePathExtraField0.setNameCRC32((long) 2147483647);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode9 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS + "'", extraFieldParsingMode9.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.STRICT_FOR_KNOW_EXTRA_FIELDS));
        org.junit.Assert.assertNotNull(zipExtraFieldArray10);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile1 = new org.apache.commons.compress.archivers.zip.ZipFile("gz");
            org.junit.Assert.fail("Expected exception of type java.nio.file.NoSuchFileException; message: gz");
        } catch (java.nio.file.NoSuchFileException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        framedSnappyCompressorOutputStream4.finish();
        framedSnappyCompressorOutputStream4.finish();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) framedSnappyCompressorOutputStream4, "pack.class.attribute.");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("tar.bz2", true);
        java.lang.String str12 = tarArchiveEntry11.getName();
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream8.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tar.bz2" + "'", str12, "tar.bz2");
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry2 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long3 = arArchiveEntry2.getLastModified();
        java.util.Date date4 = arArchiveEntry2.getLastModifiedDate();
        long long5 = arArchiveEntry2.getLength();
        boolean boolean6 = arArchiveEntry2.isDirectory();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1687209640L + "'", long3 == 1687209640L);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Jun 19 23:20:40 CEST 2023");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 12L + "'", long5 == 12L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = new org.apache.commons.compress.archivers.zip.JarMarker();
        byte[] byteArray1 = jarMarker0.getLocalFileDataData();
        byte[] byteArray2 = jarMarker0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = jarMarker0.getHeaderId();
        java.io.InputStream inputStream4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream4);
        zipArchiveInputStream5.mark((int) (byte) -1);
        long long9 = zipArchiveInputStream5.skip((long) 16877);
        java.nio.channels.SeekableByteChannel seekableByteChannel10 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel10);
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream13 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream11, strMap12);
        byte[] byteArray14 = new byte[] {};
        pack200CompressorOutputStream13.write(byteArray14);
        int int18 = zipArchiveInputStream5.read(byteArray14, (int) (short) -1, (int) (byte) 50);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField20 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray21 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray14, true, unparseableExtraField20);
        // The following exception was thrown during execution in test generation
        try {
            jarMarker0.parseFromLocalFileData(byteArray14, 26128, 512);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: JarMarker doesn't expect any data");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(zipExtraFieldArray21);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        sevenZArchiveEntry0.setHasLastModifiedDate(false);
        boolean boolean5 = sevenZArchiveEntry0.getHasCrc();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry8 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path9 = tarArchiveEntry8.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path13 = tarArchiveEntry12.getPath();
        java.nio.file.attribute.FileTime fileTime14 = null;
        tarArchiveEntry12.setCreationTime(fileTime14);
        java.nio.file.attribute.FileTime fileTime16 = tarArchiveEntry12.getLastModifiedTime();
        tarArchiveEntry8.setLastAccessTime(fileTime16);
        boolean boolean18 = tarArchiveEntry8.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime19 = tarArchiveEntry8.getLastModifiedTime();
        sevenZArchiveEntry0.setCreationTime(fileTime19);
        sevenZArchiveEntry0.setWindowsAttributes(424935705);
        sevenZArchiveEntry0.setCreationDate((long) 257);
        java.lang.String str25 = sevenZArchiveEntry0.getName();
        sevenZArchiveEntry0.setWindowsAttributes(0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(path9);
        org.junit.Assert.assertNull(path13);
        org.junit.Assert.assertNotNull(fileTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(fileTime19);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit0 = new org.apache.commons.compress.archivers.zip.GeneralPurposeBit();
        generalPurposeBit0.useEncryption(false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path6 = tarArchiveEntry5.getPath();
        java.nio.file.attribute.FileTime fileTime7 = null;
        tarArchiveEntry5.setCreationTime(fileTime7);
        int int9 = tarArchiveEntry5.getUserId();
        long long10 = tarArchiveEntry5.getRealSize();
        tarArchiveEntry5.setGroupId((int) ' ');
        int int13 = tarArchiveEntry5.getDevMajor();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry15 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        byte byte16 = tarArchiveEntry15.getLinkFlag();
        tarArchiveEntry15.setGroupName("LZ4 Parameters with BlockSize null, withContentChecksum false, withBlockChecksum false, withBlockDependency true");
        org.apache.commons.compress.archivers.tar.TarArchiveStructSparse tarArchiveStructSparse21 = new org.apache.commons.compress.archivers.tar.TarArchiveStructSparse((long) 100, (long) 156);
        org.apache.commons.compress.archivers.tar.TarArchiveStructSparse[] tarArchiveStructSparseArray22 = new org.apache.commons.compress.archivers.tar.TarArchiveStructSparse[] { tarArchiveStructSparse21 };
        java.util.ArrayList<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList23 = new java.util.ArrayList<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>) tarArchiveStructSparseList23, tarArchiveStructSparseArray22);
        tarArchiveEntry15.setSparseHeaders((java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>) tarArchiveStructSparseList23);
        tarArchiveEntry5.setSparseHeaders((java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse>) tarArchiveStructSparseList23);
        boolean boolean27 = generalPurposeBit0.equals((java.lang.Object) tarArchiveEntry5);
        java.lang.Object obj28 = generalPurposeBit0.clone();
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix29 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        java.lang.Object obj30 = null;
        boolean boolean31 = x7875_NewUnix29.equals(obj30);
        org.apache.commons.compress.changes.ChangeSet changeSet32 = new org.apache.commons.compress.changes.ChangeSet();
        changeSet32.deleteDir("hi!");
        changeSet32.deleteDir("deflate64");
        boolean boolean37 = x7875_NewUnix29.equals((java.lang.Object) "deflate64");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort38 = x7875_NewUnix29.getHeaderId();
        boolean boolean39 = generalPurposeBit0.equals((java.lang.Object) zipShort38);
        org.junit.Assert.assertNull(path6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 48 + "'", byte16 == (byte) 48);
        org.junit.Assert.assertNotNull(tarArchiveStructSparseArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(zipShort38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.apache.commons.compress.archivers.dump.InvalidFormatException invalidFormatException2 = new org.apache.commons.compress.archivers.dump.InvalidFormatException();
        org.apache.commons.compress.MemoryLimitException memoryLimitException3 = new org.apache.commons.compress.MemoryLimitException((long) 7, 26128, (java.lang.Exception) invalidFormatException2);
        int int4 = memoryLimitException3.getMemoryLimitInKb();
        long long5 = memoryLimitException3.getMemoryNeededInKb();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26128 + "'", int4 == 26128);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7L + "'", long5 == 7L);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry11 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("ZipEightByteInteger value: 0", 0L, 488, 1000, (int) (byte) 52, (long) 1024);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) arArchiveEntry11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.ar.ArArchiveEntry cannot be cast to org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder0 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions1 = builder0.build();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder3 = builder0.withMaxMemoryLimitInKb(4096);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder5 = builder0.withUseDefaultNameForUnnamedEntries(false);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder7 = builder0.withUseDefaultNameForUnnamedEntries(true);
        org.junit.Assert.assertNotNull(sevenZFileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        java.io.File file0 = null;
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean4 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray2, 3);
        boolean boolean6 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray2, 3);
        boolean boolean8 = org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byteArray2, 511);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile9 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(file0, byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        java.io.File file0 = null;
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream4 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream2, strMap3);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream5 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream4, "snappy-framed");
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream8);
        zipArchiveInputStream9.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream9);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy13 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream12, pack200Strategy13);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer15 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap16 = packer15.properties();
        java.beans.PropertyChangeListener propertyChangeListener17 = null;
        packer15.removePropertyChangeListener(propertyChangeListener17);
        java.beans.PropertyChangeListener propertyChangeListener19 = null;
        packer15.addPropertyChangeListener(propertyChangeListener19);
        java.util.SortedMap<java.lang.String, java.lang.String> strMap21 = packer15.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream4, pack200Strategy13, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream(file0, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy13);
        org.junit.Assert.assertNotNull(packer15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        char[] charArray4 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile5 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray4);
        org.apache.commons.compress.archivers.tar.TarFile tarFile6 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray7 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel8 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray7);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile9 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel8);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream10 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel8);
        char[] charArray11 = new char[] {};
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile12 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel8, charArray11);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile13 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1, charArray11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile18 = new org.apache.commons.compress.archivers.zip.ZipFile(seekableByteChannel1, "00.xz", "BackReference with offset 88 and length 100", false, false);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: BackReference with offset 88 and length 100");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(seekableByteChannelArray7);
        org.junit.Assert.assertNotNull(seekableByteChannel8);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        int int6 = deflateCompressorInputStream5.available();
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) deflateCompressorInputStream5, (int) (byte) 100);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer9 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap10 = packer9.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream11 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) cpioArchiveInputStream8, (java.util.Map<java.lang.String, java.lang.String>) strMap10);
        pack200CompressorInputStream11.close();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) pack200CompressorInputStream11, "0x5455 Zip Extra Field: Flags=0 ", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 0x5455 Zip Extra Field: Flags=0 ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(packer9);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField0 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = unicodeCommentExtraField0.getLocalFileDataLength();
        byte[] byteArray2 = unicodeCommentExtraField0.getUnicodeName();
        byte[] byteArray3 = unicodeCommentExtraField0.getUnicodeName();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNull(byteArray3);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean13 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray11, 3);
        boolean boolean15 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray11, (int) (byte) 53);
        boolean boolean17 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray11, (int) ' ');
        org.apache.commons.compress.archivers.tar.TarFile tarFile18 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray11);
        java.io.File file19 = null;
        expander0.expand(tarFile18, file19);
        java.io.File file22 = null;
        java.io.File file23 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("true", file22, file23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long2 = jarArchiveEntry1.getCrc();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource3 = jarArchiveEntry1.getCommentSource();
        java.util.Date date4 = jarArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS5 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger6 = x000A_NTFS5.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream10 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream8, strMap9);
        byte[] byteArray11 = new byte[] {};
        pack200CompressorOutputStream10.write(byteArray11);
        x000A_NTFS5.parseFromCentralDirectoryData(byteArray11, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort16 = x000A_NTFS5.getHeaderId();
        byte[] byteArray17 = x000A_NTFS5.getLocalFileDataData();
        jarArchiveEntry1.setExtra(byteArray17);
        jarArchiveEntry1.setCompressedSize((long) 0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + commentSource3 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT + "'", commentSource3.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT));
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(zipEightByteInteger6);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(zipShort16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator1 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier2 = null;
        java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable3 = parallelScatterZipCreator1.createCallable(zipArchiveEntryRequestSupplier2);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator4 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier5 = null;
        java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable6 = parallelScatterZipCreator4.createCallable(zipArchiveEntryRequestSupplier5);
        parallelScatterZipCreator1.submit(scatterZipOutputStreamCallable6);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier8 = null;
        java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable9 = parallelScatterZipCreator1.createCallable(zipArchiveEntryRequestSupplier8);
        parallelScatterZipCreator0.submitStreamAwareCallable(scatterZipOutputStreamCallable9);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier11 = null;
        java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable12 = parallelScatterZipCreator0.createCallable(zipArchiveEntryRequestSupplier11);
        org.junit.Assert.assertNotNull(scatterZipOutputStreamCallable3);
        org.junit.Assert.assertNotNull(scatterZipOutputStreamCallable6);
        org.junit.Assert.assertNotNull(scatterZipOutputStreamCallable9);
        org.junit.Assert.assertNotNull(scatterZipOutputStreamCallable12);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long2 = jarArchiveEntry1.getDataOffset();
        byte[] byteArray3 = jarArchiveEntry1.getRawName();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray6 = zipLong5.getBytes();
        boolean boolean8 = org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byteArray6, (int) (byte) 76);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort9 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray6);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = jarArchiveEntry1.getExtraField(zipShort9);
        int int11 = zipShort9.getValue();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(zipExtraField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 65535 + "'", int11 == 65535);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 29, "070702");
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream5);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path10 = tarArchiveEntry9.getPath();
        java.nio.file.attribute.FileTime fileTime11 = null;
        tarArchiveEntry9.setCreationTime(fileTime11);
        int int13 = tarArchiveEntry9.getUserId();
        long long14 = tarArchiveEntry9.getRealSize();
        boolean boolean15 = tarArchiveEntry9.isBlockDevice();
        java.lang.String str16 = tarArchiveEntry9.getGroupName();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = tarArchiveEntry9.getExtraPaxHeaders();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) cpioArchiveInputStream5, strMap17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.arj.ArjArchiveInputStream arjArchiveInputStream20 = new org.apache.commons.compress.archivers.arj.ArjArchiveInputStream((java.io.InputStream) cpioArchiveInputStream5, "00.xz");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: null");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature0 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        java.lang.String str1 = feature0.toString();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry3 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long4 = jarArchiveEntry3.getDataOffset();
        byte[] byteArray5 = jarArchiveEntry3.getRawName();
        jarArchiveEntry3.setInternalAttributes(1024);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException8 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature0, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry3);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry10 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField11 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField();
        jarArchiveEntry10.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField11);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException13 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature0, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry10);
        byte[] byteArray14 = jarArchiveEntry10.getCentralDirectoryExtra();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byteArray14, 257);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 264");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(feature0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "data descriptor" + "'", str1, "data descriptor");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[30, -95, 2, 0, 0, 0]");
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        sevenZArchiveEntry0.setHasLastModifiedDate(false);
        boolean boolean5 = sevenZArchiveEntry0.getHasCrc();
        boolean boolean6 = sevenZArchiveEntry0.getHasCrc();
        sevenZArchiveEntry0.setDirectory(true);
        sevenZArchiveEntry0.setCrcValue(1687209574L);
        sevenZArchiveEntry0.setDirectory(true);
        sevenZArchiveEntry0.setWindowsAttributes(0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        java.lang.String str1 = x7875_NewUnix0.toString();
        x7875_NewUnix0.setGID(476L);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0x7875 Zip Extra Field: UID=1000 GID=1000" + "'", str1, "0x7875 Zip Extra Field: UID=1000 GID=1000");
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm1 = x0017_StrongEncryptionHeader0.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm encryptionAlgorithm2 = x0017_StrongEncryptionHeader0.getEncryptionAlgorithm();
        byte[] byteArray4 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean6 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray4, 3);
        boolean boolean8 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray4, 3);
        boolean boolean10 = org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byteArray4, 511);
        x0017_StrongEncryptionHeader0.setLocalFileDataData(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipShort zipShort13 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray4, (int) (byte) 51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(hashAlgorithm1);
        org.junit.Assert.assertNull(encryptionAlgorithm2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        long long7 = pack200CompressorInputStream6.getBytesRead();
        pack200CompressorInputStream6.close();
        int int9 = pack200CompressorInputStream6.getCount();
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) pack200CompressorInputStream6);
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.attribute.FileTime fileTime3 = tarArchiveEntry2.getLastModifiedTime();
        boolean boolean4 = tarArchiveEntry2.isFile();
        int int5 = tarArchiveEntry2.getGroupId();
        org.junit.Assert.assertNotNull(fileTime3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry0 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry();
        dumpArchiveEntry0.setVolume((int) (byte) 120);
        java.lang.String str3 = dumpArchiveEntry0.getSimpleName();
        java.nio.channels.SeekableByteChannel seekableByteChannel4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        boolean boolean7 = zipArchiveOutputStream5.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date11 = cpioArchiveEntry10.getLastModifiedDate();
        cpioArchiveEntry10.setRemoteDeviceMaj((long) 'a');
        int int14 = cpioArchiveEntry10.getAlignmentBoundary();
        boolean boolean15 = zipArchiveOutputStream5.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry10);
        cpioArchiveEntry10.setDeviceMin((long) 26128);
        boolean boolean18 = cpioArchiveEntry10.isSocket();
        java.util.Date date19 = cpioArchiveEntry10.getLastModifiedDate();
        dumpArchiveEntry0.setAccessTime(date19);
        java.lang.String str21 = dumpArchiveEntry0.toString();
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry22 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        java.util.Date date23 = arjArchiveEntry22.getLastModifiedDate();
        dumpArchiveEntry0.setLastModifiedDate(date23);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Nov 30 00:00:00 CET 1979");
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray1 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        byte[] byteArray2 = zip64ExtendedInformationExtraField0.getCentralDirectoryData();
        zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(false, false, false, false);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort8 = zip64ExtendedInformationExtraField0.getHeaderId();
        java.lang.Object obj9 = zipShort8.clone();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(zipShort8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "ZipShort value: 1");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "ZipShort value: 1");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "ZipShort value: 1");
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry5 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long6 = jarArchiveEntry5.getCrc();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource7 = jarArchiveEntry5.getCommentSource();
        java.util.Date date8 = jarArchiveEntry5.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS9 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger10 = x000A_NTFS9.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel11 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream12 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel11);
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream12, strMap13);
        byte[] byteArray15 = new byte[] {};
        pack200CompressorOutputStream14.write(byteArray15);
        x000A_NTFS9.parseFromCentralDirectoryData(byteArray15, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort20 = x000A_NTFS9.getHeaderId();
        byte[] byteArray21 = x000A_NTFS9.getLocalFileDataData();
        jarArchiveEntry5.setExtra(byteArray21);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong24 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray21, 0);
        boolean boolean26 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray21, (int) (byte) 120);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream3.write(byteArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + commentSource7 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT + "'", commentSource7.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT));
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(zipEightByteInteger10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(zipShort20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore0 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore1 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore2 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor3 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore2);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream4 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore1, streamCompressor3);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream5 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore0, streamCompressor3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter zipEntryWriter6 = scatterZipOutputStream5.zipEntryWriter();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(streamCompressor3);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        java.nio.file.Path path0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream2 = org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(path0, 476);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION pERMISSION0 = org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_WRITE;
        org.junit.Assert.assertTrue("'" + pERMISSION0 + "' != '" + org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_WRITE + "'", pERMISSION0.equals(org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_WRITE));
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        java.io.File file0 = null;
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        long long4 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile5 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(file0, byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1020L + "'", long4 == 1020L);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.apache.commons.compress.archivers.tar.TarArchiveStructSparse tarArchiveStructSparse2 = new org.apache.commons.compress.archivers.tar.TarArchiveStructSparse((long) (byte) 88, 1687209495L);
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry5 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long6 = arArchiveEntry5.getLastModified();
        long long7 = arArchiveEntry5.getLength();
        java.util.Date date8 = arArchiveEntry5.getLastModifiedDate();
        boolean boolean9 = tarArchiveStructSparse2.equals((java.lang.Object) arArchiveEntry5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1687209642L + "'", long6 == 1687209642L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 12L + "'", long7 == 12L);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Jun 19 23:20:42 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        org.apache.commons.compress.archivers.dump.InvalidFormatException invalidFormatException1 = new org.apache.commons.compress.archivers.dump.InvalidFormatException((long) (byte) 76);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2, (short) (byte) 1);
        byte[] byteArray6 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray6);
        cpioArchiveOutputStream4.write(byteArray6, (int) (short) 0, 0);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        byte byte13 = tarArchiveEntry12.getLinkFlag();
        tarArchiveEntry12.setNames("ustar\000", "");
        boolean boolean17 = tarArchiveEntry12.isCharacterDevice();
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[97, 0]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray7);
        org.junit.Assert.assertTrue("'" + byte13 + "' != '" + (byte) 48 + "'", byte13 == (byte) 48);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry2 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("lzma", (long) 12);
        long long3 = arArchiveEntry2.getLastModified();
        int int4 = arArchiveEntry2.getUserId();
        long long5 = arArchiveEntry2.getLength();
        int int6 = arArchiveEntry2.getGroupId();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date10 = cpioArchiveEntry9.getLastModifiedDate();
        cpioArchiveEntry9.setRemoteDeviceMaj((long) 'a');
        boolean boolean13 = cpioArchiveEntry9.isBlockDevice();
        boolean boolean14 = cpioArchiveEntry9.isSymbolicLink();
        boolean boolean15 = arArchiveEntry2.equals((java.lang.Object) cpioArchiveEntry9);
        boolean boolean16 = cpioArchiveEntry9.isPipe();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1687209642L + "'", long3 == 1687209642L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 12L + "'", long5 == 12L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        byte[] byteArray2 = x0017_StrongEncryptionHeader0.getCentralDirectoryData();
        long long3 = x0017_StrongEncryptionHeader0.getRecordCount();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS4 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger5 = x000A_NTFS4.getModifyTime();
        java.nio.file.attribute.FileTime fileTime6 = x000A_NTFS4.getCreateFileTime();
        byte[] byteArray7 = x000A_NTFS4.getCentralDirectoryData();
        x0017_StrongEncryptionHeader0.parseCentralDirectoryFormat(byteArray7, 0, 128);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(zipEightByteInteger5);
        org.junit.Assert.assertNull(fileTime6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date3 = cpioArchiveEntry2.getLastModifiedDate();
        cpioArchiveEntry2.setChksum(0L);
        boolean boolean6 = cpioArchiveEntry2.isSocket();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date10 = cpioArchiveEntry9.getLastModifiedDate();
        cpioArchiveEntry9.setRemoteDeviceMaj((long) 'a');
        boolean boolean13 = cpioArchiveEntry9.isBlockDevice();
        cpioArchiveEntry9.setMode((long) 16877);
        java.lang.String str16 = cpioArchiveEntry9.getName();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("`\n");
        tarArchiveEntry18.setGroupId(4096);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path24 = tarArchiveEntry23.getPath();
        java.lang.String str25 = tarArchiveEntry23.getName();
        boolean boolean26 = tarArchiveEntry23.isFile();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp27 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong28 = x5455_ExtendedTimestamp27.getAccessTime();
        byte[] byteArray29 = x5455_ExtendedTimestamp27.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry32 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path33 = tarArchiveEntry32.getPath();
        java.nio.file.attribute.FileTime fileTime34 = null;
        tarArchiveEntry32.setCreationTime(fileTime34);
        java.nio.file.attribute.FileTime fileTime36 = tarArchiveEntry32.getLastModifiedTime();
        x5455_ExtendedTimestamp27.setAccessFileTime(fileTime36);
        tarArchiveEntry23.setLastModifiedTime(fileTime36);
        tarArchiveEntry18.setCreationTime(fileTime36);
        cpioArchiveEntry9.setTime(fileTime36);
        cpioArchiveEntry2.setTime(fileTime36);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(path24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "deflate64" + "'", str25, "deflate64");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(zipLong28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[0]");
        org.junit.Assert.assertNull(path33);
        org.junit.Assert.assertNotNull(fileTime36);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry4 = tarArchiveInputStream3.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream5 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream3);
        long long8 = cpioArchiveInputStream6.skip((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode9 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT;
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField10 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 1, (byte) 1 };
        boolean boolean16 = org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byteArray14, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior extraFieldParsingBehavior18 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray19 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray14, false, extraFieldParsingBehavior18);
        boolean boolean21 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray14, 32768);
        unrecognizedExtraField10.setLocalFileDataData(byteArray14);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort23 = unrecognizedExtraField10.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort24 = unrecognizedExtraField10.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS25 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger26 = x000A_NTFS25.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel27 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream28 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel27);
        java.util.Map<java.lang.String, java.lang.String> strMap29 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream30 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream28, strMap29);
        byte[] byteArray31 = new byte[] {};
        pack200CompressorOutputStream30.write(byteArray31);
        x000A_NTFS25.parseFromCentralDirectoryData(byteArray31, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort36 = x000A_NTFS25.getHeaderId();
        byte[] byteArray37 = x000A_NTFS25.getLocalFileDataData();
        unrecognizedExtraField10.setLocalFileDataData(byteArray37);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort39 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray40 = zipShort39.getBytes();
        boolean boolean42 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray40, (int) 'a');
        org.apache.commons.compress.archivers.tar.TarFile tarFile43 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray40);
        unrecognizedExtraField10.setCentralDirectoryData(byteArray40);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField49 = extraFieldParsingMode9.onUnparseableExtraField(byteArray40, 424935705, (int) (short) 10, false, 16);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = cpioArchiveInputStream6.read(byteArray40, 32, (int) (short) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(tarArchiveEntry4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode9 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT + "'", extraFieldParsingMode9.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_STRICT));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zipExtraFieldArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(zipShort23);
        org.junit.Assert.assertNotNull(zipShort24);
        org.junit.Assert.assertNotNull(zipEightByteInteger26);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(zipShort36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipShort39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(zipExtraField49);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.apache.commons.compress.MemoryLimitException memoryLimitException2 = new org.apache.commons.compress.MemoryLimitException((long) 'a', 508);
        int int3 = memoryLimitException2.getMemoryLimitInKb();
        org.apache.commons.compress.archivers.dump.InvalidFormatException invalidFormatException5 = new org.apache.commons.compress.archivers.dump.InvalidFormatException((long) '4');
        memoryLimitException2.addSuppressed((java.lang.Throwable) invalidFormatException5);
        long long7 = memoryLimitException2.getMemoryNeededInKb();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 508 + "'", int3 == 508);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        int int0 = org.apache.commons.compress.archivers.tar.TarConstants.MAGICLEN;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 6 + "'", int0 == 6);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = new org.apache.commons.compress.archivers.zip.JarMarker();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray2 = zipShort1.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            jarMarker0.parseFromLocalFileData(byteArray2, 8192, 16384);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: JarMarker doesn't expect any data");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[30, -95]");
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream brotliCompressorInputStream3 = new org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream((java.io.InputStream) zipArchiveInputStream2);
        long long4 = brotliCompressorInputStream3.getCompressedCount();
        java.lang.String str5 = brotliCompressorInputStream3.toString();
        java.lang.String str6 = brotliCompressorInputStream3.toString();
        brotliCompressorInputStream3.mark(36864);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize blockSize6 = org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1;
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder10 = org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream.createParameterBuilder();
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder12 = builder10.withNiceBackReferenceLength(0);
        org.apache.commons.compress.compressors.lz77support.Parameters.Builder builder14 = builder12.withMaxBackReferenceLength(80);
        org.apache.commons.compress.compressors.lz77support.Parameters parameters15 = builder14.build();
        org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters parameters16 = new org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.Parameters(blockSize6, true, false, false, parameters15);
        int int17 = parameters15.getNiceBackReferenceLength();
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream18 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, parameters15);
        framedSnappyCompressorOutputStream18.finish();
        org.junit.Assert.assertTrue("'" + blockSize6 + "' != '" + org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1 + "'", blockSize6.equals(org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream.BlockSize.M1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(parameters15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        sevenZArchiveEntry0.setHasWindowsAttributes(true);
        boolean boolean5 = sevenZArchiveEntry0.getHasCreationDate();
        sevenZArchiveEntry0.setHasAccessDate(false);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.attribute.FileTime fileTime8 = sevenZArchiveEntry0.getCreationTime();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The entry doesn't have this timestamp");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.lang.String str1 = x000A_NTFS0.toString();
        java.lang.String str2 = x000A_NTFS0.toString();
        java.util.Date date3 = x000A_NTFS0.getModifyJavaTime();
        java.util.Date date4 = x000A_NTFS0.getModifyJavaTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = x000A_NTFS0.getHeaderId();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str1, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str2, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNull(date3);
        org.junit.Assert.assertNull(date4);
        org.junit.Assert.assertNotNull(zipShort5);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.apache.commons.compress.compressors.CompressorStreamFactory compressorStreamFactory0 = new org.apache.commons.compress.compressors.CompressorStreamFactory();
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.compressors.CompressorStreamProvider> strMap1 = compressorStreamFactory0.getCompressorInputStreamProviders();
        java.lang.Boolean boolean2 = compressorStreamFactory0.getDecompressUntilEOF();
        java.io.InputStream inputStream4 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream4);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream5);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream5);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry8 = tarArchiveInputStream7.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream9 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream7);
        int int10 = deflateCompressorInputStream9.available();
        int int11 = deflateCompressorInputStream9.available();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.CompressorInputStream compressorInputStream13 = compressorStreamFactory0.createCompressorInputStream("\000\000", (java.io.InputStream) deflateCompressorInputStream9, true);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.compressors.CompressorException; message: Compressor: ?? not found.");
        } catch (org.apache.commons.compress.compressors.CompressorException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap1);
        org.junit.Assert.assertNull(boolean2);
        org.junit.Assert.assertNull(tarArchiveEntry8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long2 = jarArchiveEntry1.getCrc();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource3 = jarArchiveEntry1.getCommentSource();
        java.util.Date date4 = jarArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS5 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger6 = x000A_NTFS5.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel7 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel7);
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream10 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream8, strMap9);
        byte[] byteArray11 = new byte[] {};
        pack200CompressorOutputStream10.write(byteArray11);
        x000A_NTFS5.parseFromCentralDirectoryData(byteArray11, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort16 = x000A_NTFS5.getHeaderId();
        byte[] byteArray17 = x000A_NTFS5.getLocalFileDataData();
        jarArchiveEntry1.setExtra(byteArray17);
        boolean boolean20 = org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byteArray17, 4095);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + commentSource3 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT + "'", commentSource3.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT));
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(zipEightByteInteger6);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(zipShort16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 29, "070702");
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry7 = cpioArchiveInputStream5.getNextCPIOEntry();
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        long long3 = cpioArchiveEntry2.getMode();
        cpioArchiveEntry2.setChksum(1L);
        boolean boolean6 = cpioArchiveEntry2.isBlockDevice();
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveEntry2.setDevice(1687209570L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 32768L + "'", long3 == 32768L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, 60012, 32768, "apkm", true);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry10 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long11 = jarArchiveEntry10.getDataOffset();
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier12 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest zipArchiveEntryRequest13 = org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry10, inputStreamSupplier12);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = jarArchiveEntry10.getExtraFields();
        java.io.InputStream inputStream15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream15);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream16, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy19 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream21 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream16, pack200Strategy19, strMap20);
        int int22 = pack200CompressorInputStream21.read();
        java.io.InputStream inputStream23 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream23);
        zipArchiveInputStream24.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream24);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy28 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream29 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream27, pack200Strategy28);
        java.nio.channels.SeekableByteChannel seekableByteChannel30 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream31 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel30);
        java.util.Map<java.lang.String, java.lang.String> strMap32 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream33 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream31, strMap32);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream34 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream33);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer35 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap36 = packer35.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream37 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream34, (java.util.Map<java.lang.String, java.lang.String>) strMap36);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream38 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream21, pack200Strategy28, (java.util.Map<java.lang.String, java.lang.String>) strMap36);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream39 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) pack200CompressorInputStream21);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream40 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) pack200CompressorInputStream21);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream8.addRawArchiveEntry((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry10, (java.io.InputStream) pack200CompressorInputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(zipArchiveEntryRequest13);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertNotNull(pack200Strategy19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 80 + "'", int22 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy28);
        org.junit.Assert.assertNotNull(packer35);
        org.junit.Assert.assertNotNull(strMap36);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.util.concurrent.ExecutorService executorService1 = null;
        java.util.concurrent.ExecutorService executorService2 = null;
        java.nio.file.Path path3 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier4 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path3);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator5 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService2, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier4);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator6 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService1, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier4);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator8 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier4, 4);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream1);
        zipArchiveInputStream2.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream5 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream2);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = jarArchiveInputStream5.getNextEntry();
        int int7 = jarArchiveInputStream5.getCount();
        java.io.File file8 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream5, file8);
        java.io.InputStream inputStream11 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream12 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream11);
        zipArchiveInputStream12.mark((int) (byte) -1);
        long long16 = zipArchiveInputStream12.skip((long) 16877);
        java.nio.channels.SeekableByteChannel seekableByteChannel17 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream18 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel17);
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream20 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream18, strMap19);
        byte[] byteArray21 = new byte[] {};
        pack200CompressorOutputStream20.write(byteArray21);
        int int25 = zipArchiveInputStream12.read(byteArray21, (int) (short) -1, (int) (byte) 50);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry28 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path29 = tarArchiveEntry28.getPath();
        java.nio.file.attribute.FileTime fileTime30 = null;
        tarArchiveEntry28.setCreationTime(fileTime30);
        java.nio.file.attribute.FileTime fileTime32 = tarArchiveEntry28.getLastModifiedTime();
        boolean boolean33 = zipArchiveInputStream12.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry28);
        zipArchiveInputStream12.mark((int) (byte) 0);
        java.io.File file36 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("pass", (java.io.InputStream) zipArchiveInputStream12, file36);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: pass not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(path29);
        org.junit.Assert.assertNotNull(fileTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, "pass");
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy4 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream6 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) zipArchiveInputStream1, pack200Strategy4, strMap5);
        int int7 = pack200CompressorInputStream6.read();
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream8);
        zipArchiveInputStream9.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream9);
        org.apache.commons.compress.compressors.pack200.Pack200Strategy pack200Strategy13 = org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream14 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) jarArchiveInputStream12, pack200Strategy13);
        java.nio.channels.SeekableByteChannel seekableByteChannel15 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel15);
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream18 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream16, strMap17);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream19 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream18);
        org.apache.commons.compress.java.util.jar.Pack200.Packer packer20 = org.apache.commons.compress.java.util.jar.Pack200.newPacker();
        java.util.SortedMap<java.lang.String, java.lang.String> strMap21 = packer20.properties();
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream22 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) gzipCompressorOutputStream19, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream pack200CompressorInputStream23 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6, pack200Strategy13, (java.util.Map<java.lang.String, java.lang.String>) strMap21);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream24 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream25 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) pack200CompressorInputStream6);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream26 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) deflate64CompressorInputStream25);
        int int27 = cpioArchiveInputStream26.read();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream28 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream((java.io.InputStream) cpioArchiveInputStream26);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream is not in the BZip2 format");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(pack200Strategy4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 80 + "'", int7 == 80);
        org.junit.Assert.assertNotNull(pack200Strategy13);
        org.junit.Assert.assertNotNull(packer20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCompressedSize((long) 64);
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData5 = jarArchiveEntry1.getUnparseableExtraFieldData();
        jarArchiveEntry1.setCrc(1687209525L);
        long long8 = jarArchiveEntry1.getDataOffset();
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertNull(unparseableExtraFieldData5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        java.nio.channels.SeekableByteChannel seekableByteChannel10 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel10);
        java.lang.String str12 = zipArchiveOutputStream11.getEncoding();
        boolean boolean13 = zipArchiveOutputStream11.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date17 = cpioArchiveEntry16.getLastModifiedDate();
        cpioArchiveEntry16.setRemoteDeviceMaj((long) 'a');
        int int20 = cpioArchiveEntry16.getAlignmentBoundary();
        boolean boolean21 = zipArchiveOutputStream11.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry16);
        cpioArchiveEntry16.setDeviceMin((long) 26128);
        boolean boolean24 = cpioArchiveEntry16.isSocket();
        cpioArchiveEntry16.setUID(29L);
        int int27 = cpioArchiveEntry16.getHeaderPadCount();
        int int29 = cpioArchiveEntry16.getHeaderPadCount((long) 12);
        boolean boolean30 = cpioArchiveEntry16.isDirectory();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry33 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path34 = tarArchiveEntry33.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry37 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path38 = tarArchiveEntry37.getPath();
        java.nio.file.attribute.FileTime fileTime39 = null;
        tarArchiveEntry37.setCreationTime(fileTime39);
        java.nio.file.attribute.FileTime fileTime41 = tarArchiveEntry37.getLastModifiedTime();
        tarArchiveEntry33.setLastAccessTime(fileTime41);
        boolean boolean43 = tarArchiveEntry33.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime44 = tarArchiveEntry33.getLastModifiedTime();
        cpioArchiveEntry16.setTime(fileTime44);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream6.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cannot be cast to org.apache.commons.compress.archivers.tar.TarArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTF8" + "'", str12, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(path34);
        org.junit.Assert.assertNull(path38);
        org.junit.Assert.assertNotNull(fileTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fileTime44);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date7 = cpioArchiveEntry6.getLastModifiedDate();
        cpioArchiveEntry6.setRemoteDeviceMin((long) 12);
        boolean boolean10 = zipArchiveOutputStream1.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry6);
        long long11 = zipArchiveOutputStream1.getBytesWritten();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode12 = org.apache.commons.compress.archivers.zip.Zip64Mode.Always;
        zipArchiveOutputStream1.setUseZip64(zip64Mode12);
        org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream blockLZ4CompressorOutputStream14 = new org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1);
        blockLZ4CompressorOutputStream14.write(424935705);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + zip64Mode12 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.Always + "'", zip64Mode12.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.Always));
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField0 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField();
        unicodeCommentExtraField0.setNameCRC32((long) 12);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = unicodeCommentExtraField0.getHeaderId();
        byte[] byteArray4 = unicodeCommentExtraField0.getCentralDirectoryData();
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNull(byteArray4);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData2 = jarArchiveEntry1.getUnparseableExtraFieldData();
        boolean boolean3 = jarArchiveEntry1.isStreamContiguous();
        long long4 = jarArchiveEntry1.getDataOffset();
        boolean boolean5 = jarArchiveEntry1.isUnixSymlink();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS6 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger7 = x000A_NTFS6.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel8 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel8);
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream11 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream9, strMap10);
        byte[] byteArray12 = new byte[] {};
        pack200CompressorOutputStream11.write(byteArray12);
        x000A_NTFS6.parseFromCentralDirectoryData(byteArray12, 64, 0);
        jarArchiveEntry1.setCentralDirectoryExtra(byteArray12);
        byte[] byteArray18 = jarArchiveEntry1.getLocalFileDataExtra();
        jarArchiveEntry1.setRawFlag(96);
        org.junit.Assert.assertNull(unparseableExtraFieldData2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger7);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile2 = new org.apache.commons.compress.archivers.zip.ZipFile("deflate64", "ZipEightByteInteger value: 0");
            org.junit.Assert.fail("Expected exception of type java.nio.file.NoSuchFileException; message: deflate64");
        } catch (java.nio.file.NoSuchFileException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray1 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray1);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile4 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel2);
        java.nio.file.Path path5 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create(sevenZOutputFile4, path5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray1);
        org.junit.Assert.assertNotNull(seekableByteChannel2);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream2);
        zipArchiveOutputStream2.setUseLanguageEncodingFlag(true);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream2.finish();
            org.junit.Assert.fail("Expected exception of type java.nio.channels.NonWritableChannelException; message: null");
        } catch (java.nio.channels.NonWritableChannelException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        long long1 = org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(26128);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 26128L + "'", long1 == 26128L);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("deflate64");
        long long2 = cpioArchiveEntry1.getUID();
        long long3 = cpioArchiveEntry1.getDeviceMin();
        cpioArchiveEntry1.setInode((long) 512);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveEntry1.setRemoteDevice(7L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setLongFileMode((int) (byte) 120);
        tarArchiveOutputStream6.setLongFileMode((int) (short) 0);
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry13 = tarArchiveOutputStream6.createArchiveEntry(file11, "pack200");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm1 = x0017_StrongEncryptionHeader0.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong3 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray4 = zipLong3.getBytes();
        boolean boolean6 = org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byteArray4, (int) (byte) 76);
        x0017_StrongEncryptionHeader0.setCentralDirectoryData(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger8 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(hashAlgorithm1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        java.io.File file0 = null;
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) 'a');
        boolean boolean4 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray2, 3);
        boolean boolean6 = org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byteArray2, (int) (byte) 53);
        long long9 = org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byteArray2, 1, 476);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(file0, byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[97, 0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = org.apache.commons.compress.archivers.ArchiveStreamFactory.DEFAULT;
        archiveStreamFactory0.setEntryEncoding("data descriptor");
        java.lang.String str3 = archiveStreamFactory0.getEntryEncoding();
        java.io.InputStream inputStream5 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream5);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream7 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) zipArchiveInputStream6);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream8 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream6);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = tarArchiveInputStream8.getCurrentEntry();
        org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream deflateCompressorInputStream10 = new org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream((java.io.InputStream) tarArchiveInputStream8);
        int int11 = deflateCompressorInputStream10.available();
        long long12 = deflateCompressorInputStream10.getUncompressedCount();
        int int13 = deflateCompressorInputStream10.available();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream14 = archiveStreamFactory0.createArchiveInputStream("070701", (java.io.InputStream) deflateCompressorInputStream10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: 070701 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(archiveStreamFactory0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "data descriptor" + "'", str3, "data descriptor");
        org.junit.Assert.assertNull(tarArchiveEntry9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray3 = zipLong2.getBytes();
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong2);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger5 = zip64ExtendedInformationExtraField0.getSize();
        byte[] byteArray6 = zip64ExtendedInformationExtraField0.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNull(zipEightByteInteger5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, -1, -1, -1]");
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path6 = tarArchiveEntry5.getPath();
        java.nio.file.attribute.FileTime fileTime7 = null;
        tarArchiveEntry5.setCreationTime(fileTime7);
        int int9 = tarArchiveEntry5.getUserId();
        long long10 = tarArchiveEntry5.getRealSize();
        java.util.Date date11 = tarArchiveEntry5.getLastModifiedDate();
        boolean boolean12 = tarArchiveEntry5.isLink();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp13 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((int) (short) -1);
        byte[] byteArray16 = zipLong15.getBytes();
        x5455_ExtendedTimestamp13.setModifyTime(zipLong15);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry20 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path21 = tarArchiveEntry20.getPath();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry24 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path25 = tarArchiveEntry24.getPath();
        java.nio.file.attribute.FileTime fileTime26 = null;
        tarArchiveEntry24.setCreationTime(fileTime26);
        java.nio.file.attribute.FileTime fileTime28 = tarArchiveEntry24.getLastModifiedTime();
        tarArchiveEntry20.setLastAccessTime(fileTime28);
        x5455_ExtendedTimestamp13.setModifyFileTime(fileTime28);
        tarArchiveEntry5.setStatusChangeTime(fileTime28);
        sevenZArchiveEntry0.setCreationTime(fileTime28);
        org.junit.Assert.assertNull(path6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Jun 19 23:20:45 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, -1, -1, -1]");
        org.junit.Assert.assertNull(path21);
        org.junit.Assert.assertNull(path25);
        org.junit.Assert.assertNotNull(fileTime28);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(false);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        int int10 = tarArchiveOutputStream6.getCount();
        tarArchiveOutputStream6.setBigNumberMode(4096);
        int int13 = tarArchiveOutputStream6.getRecordSize();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("hi!", (long) '4');
        java.util.Date date17 = cpioArchiveEntry16.getLastModifiedDate();
        cpioArchiveEntry16.setChksum(0L);
        boolean boolean20 = tarArchiveOutputStream6.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry16);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 512 + "'", int13 == 512);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("bzip2");
        long long2 = jarArchiveEntry1.getDataOffset();
        byte[] byteArray3 = jarArchiveEntry1.getRawName();
        boolean boolean4 = jarArchiveEntry1.isStreamContiguous();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(byteArray3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        java.nio.file.Path path0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream2 = org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.pathBased(path0, 504);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField0 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP;
        int int1 = unparseableExtraField0.getKey();
        org.junit.Assert.assertNotNull(unparseableExtraField0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0);
        zipArchiveInputStream1.mark((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream1, 488);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream5);
        org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream deflate64CompressorInputStream7 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream((java.io.InputStream) tarArchiveInputStream5);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort8 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        byte[] byteArray9 = zipShort8.getBytes();
        boolean boolean11 = org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byteArray9, (int) 'a');
        boolean boolean13 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray9, (int) (byte) 88);
        boolean boolean15 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray9, 26128);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = deflate64CompressorInputStream7.read(byteArray9, 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Invalid Deflate64 input");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[30, -95]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        java.nio.channels.SeekableByteChannel[] seekableByteChannelArray0 = new java.nio.channels.SeekableByteChannel[] {};
        java.nio.channels.SeekableByteChannel seekableByteChannel1 = org.apache.commons.compress.utils.MultiReadOnlySeekableByteChannel.forSeekableByteChannels(seekableByteChannelArray0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream2 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1, 26625, 511, "pack.effort", true);
        org.apache.commons.compress.archivers.tar.TarFile tarFile8 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.InputStream inputStream10 = tarFile8.getInputStream(tarArchiveEntry9);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Corrupted TAR archive. Can't read entry");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(seekableByteChannelArray0);
        org.junit.Assert.assertNotNull(seekableByteChannel1);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        java.nio.file.Path path0 = null;
        java.nio.file.LinkOption[] linkOptionArray2 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry3 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(path0, "", linkOptionArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(linkOptionArray2);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream gzipCompressorOutputStream4 = new org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) pack200CompressorOutputStream3, "snappy-framed");
        tarArchiveOutputStream6.setBigNumberMode(4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("deflate64", (byte) 77);
        java.nio.file.Path path12 = tarArchiveEntry11.getPath();
        boolean boolean13 = tarArchiveEntry11.isCheckSumOK();
        tarArchiveOutputStream6.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry11);
        tarArchiveOutputStream6.flush();
        tarArchiveOutputStream6.setBigNumberMode(100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6, (short) (byte) 48, 156, "ZipEightByteInteger value: 0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 48");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(path12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile1 = new org.apache.commons.compress.archivers.zip.ZipFile("jar");
            org.junit.Assert.fail("Expected exception of type java.nio.file.NoSuchFileException; message: jar");
        } catch (java.nio.file.NoSuchFileException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) (byte) 75, "", 312764696000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown header type 75");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream3 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream1, strMap2);
        org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream framedSnappyCompressorOutputStream4 = new org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream bZip2CompressorOutputStream5 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream((java.io.OutputStream) pack200CompressorOutputStream3);
        // The following exception was thrown during execution in test generation
        try {
            pack200CompressorOutputStream3.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getModifyTime();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel2);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = null;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream pack200CompressorOutputStream5 = new org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream((java.io.OutputStream) zipArchiveOutputStream3, strMap4);
        byte[] byteArray6 = new byte[] {};
        pack200CompressorOutputStream5.write(byteArray6);
        x000A_NTFS0.parseFromCentralDirectoryData(byteArray6, 64, 0);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = x000A_NTFS0.getAccessTime();
        java.math.BigInteger bigInteger12 = zipEightByteInteger11.getValue();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger13 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger(bigInteger12);
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(bigInteger12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit16 = org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byteArray14, 80);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 80");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(zipEightByteInteger11);
        org.junit.Assert.assertNotNull(bigInteger12);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }
}
