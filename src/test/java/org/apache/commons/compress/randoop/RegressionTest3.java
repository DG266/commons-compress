package org.apache.commons.compress.randoop;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp1 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp1.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean7 = tarArchiveEntry6.isSparse();
        tarArchiveEntry6.setMode(26127);
        java.util.Date date10 = tarArchiveEntry6.getModTime();
        x5455_ExtendedTimestamp1.setModifyJavaTime(date10);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = x5455_ExtendedTimestamp1.getCreateTime();
        byte[] byteArray13 = x5455_ExtendedTimestamp1.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField14 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("././@LongLink", byteArray13);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort15 = unicodeCommentExtraField14.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField16 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraFieldNoDefault(zipShort15);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Jun 20 13:19:20 CEST 2023");
        org.junit.Assert.assertNull(zipLong12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 56, -117, -111, 100]");
        org.junit.Assert.assertNotNull(zipShort15);
        org.junit.Assert.assertNull(zipExtraField16);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        long long6 = zipArchiveOutputStream5.getBytesWritten();
        java.nio.file.Path path7 = null;
        java.nio.file.LinkOption linkOption9 = null;
        java.nio.file.LinkOption[] linkOptionArray10 = new java.nio.file.LinkOption[] { linkOption9 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry11 = zipArchiveOutputStream5.createArchiveEntry(path7, "compressionElapsed=-1687259938604ms, mergingElapsed=0ms", linkOptionArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(linkOptionArray10);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.CLOSING_CONSUMER;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer1 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream2);
        long long5 = cpioArchiveInputStream3.skip((long) (byte) 100);
        cpioArchiveInputStream3.mark(6);
        boolean boolean8 = cpioArchiveInputStream3.markSupported();
        boolean boolean9 = cpioArchiveInputStream3.markSupported();
        closeableConsumer1.accept((java.io.Closeable) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = jarArchiveInputStream11.getNextZipEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry13 = null;
        boolean boolean14 = jarArchiveInputStream11.canReadEntryData(archiveEntry13);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = jarArchiveInputStream11.getNextEntry();
        // The following exception was thrown during execution in test generation
        try {
            closeableConsumer0.accept((java.io.Closeable) jarArchiveInputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertNotNull(closeableConsumer1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(zipArchiveEntry12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(archiveEntry15);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        java.nio.file.Path path0 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier1 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path0);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore2 = defaultBackingStoreSupplier1.get();
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor3 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore2);
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor4 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore2);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField6 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField12 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField6, byteArray8, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger13 = null;
        zip64ExtendedInformationExtraField6.setRelativeHeaderOffset(zipEightByteInteger13);
        byte[] byteArray15 = zip64ExtendedInformationExtraField6.getLocalFileDataData();
        byte[] byteArray16 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray15);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField17 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray15);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField19 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField25 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField19, byteArray21, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger26 = null;
        zip64ExtendedInformationExtraField19.setRelativeHeaderOffset(zipEightByteInteger26);
        byte[] byteArray28 = zip64ExtendedInformationExtraField19.getLocalFileDataData();
        byte[] byteArray29 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray28);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField30 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray28);
        unicodeCommentExtraField17.setUnicodeName(byteArray28);
        byte[] byteArray32 = unicodeCommentExtraField17.getUnicodeName();
        byte[] byteArray33 = unicodeCommentExtraField17.getUnicodeName();
        byte[] byteArray35 = new byte[] { (byte) -1 };
        byte[] byteArray36 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray35);
        long long37 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray35);
        boolean boolean39 = org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byteArray35, 0);
        unicodeCommentExtraField17.setUnicodeName(byteArray35);
        byte[] byteArray41 = unicodeCommentExtraField17.getLocalFileDataData();
        streamCompressor4.writeCounted(byteArray41);
        long long43 = streamCompressor4.getTotalBytesWritten();
        long long44 = streamCompressor4.getBytesWrittenForLastEntry();
        org.junit.Assert.assertNotNull(scatterGatherBackingStore2);
        org.junit.Assert.assertNotNull(streamCompressor3);
        org.junit.Assert.assertNotNull(streamCompressor4);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 255L + "'", long37 == 255L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 6L + "'", long43 == 6L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 6L + "'", long44 == 6L);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        org.apache.commons.compress.archivers.tar.TarArchiveStructSparse tarArchiveStructSparse2 = new org.apache.commons.compress.archivers.tar.TarArchiveStructSparse((long) 256, (long) 5);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        java.lang.String str1 = sevenZArchiveEntry0.getName();
        boolean boolean2 = sevenZArchiveEntry0.getHasLastModifiedDate();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        boolean boolean1 = asiExtraField0.isLink();
        int int2 = asiExtraField0.getMode();
        asiExtraField0.setUserId(1000);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        int int11 = jarArchiveInputStream10.read();
        long long12 = jarArchiveInputStream10.getUncompressedCount();
        long long14 = jarArchiveInputStream10.skip((long) 1000);
        long long16 = jarArchiveInputStream10.skip((long) (byte) 53);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry17 = jarArchiveInputStream10.getNextJarEntry();
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(jarArchiveEntry17);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        long long4 = cpioArchiveInputStream1.getBytesRead();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry5 = cpioArchiveInputStream1.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile1 = new org.apache.commons.compress.archivers.zip.ZipFile("apkm");
            org.junit.Assert.fail("Expected exception of type java.nio.file.NoSuchFileException; message: apkm");
        } catch (java.nio.file.NoSuchFileException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setName("ustar ");
        sevenZArchiveEntry0.setCrc(131);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date5 = sevenZArchiveEntry0.getLastModifiedDate();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The entry doesn't have this timestamp");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray10);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField12 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray10);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField14 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField14, byteArray16, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger21 = null;
        zip64ExtendedInformationExtraField14.setRelativeHeaderOffset(zipEightByteInteger21);
        byte[] byteArray23 = zip64ExtendedInformationExtraField14.getLocalFileDataData();
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray23);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField25 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray23);
        unicodeCommentExtraField12.setUnicodeName(byteArray23);
        byte[] byteArray27 = unicodeCommentExtraField12.getUnicodeName();
        long long28 = unicodeCommentExtraField12.getNameCRC32();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort29 = unicodeCommentExtraField12.getHeaderId();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField31 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray33 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField37 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField31, byteArray33, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger38 = null;
        zip64ExtendedInformationExtraField31.setRelativeHeaderOffset(zipEightByteInteger38);
        byte[] byteArray40 = zip64ExtendedInformationExtraField31.getLocalFileDataData();
        byte[] byteArray41 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray40);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField42 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray40);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField44 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray46 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField50 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField44, byteArray46, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger51 = null;
        zip64ExtendedInformationExtraField44.setRelativeHeaderOffset(zipEightByteInteger51);
        byte[] byteArray53 = zip64ExtendedInformationExtraField44.getLocalFileDataData();
        byte[] byteArray54 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray53);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField55 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray53);
        unicodeCommentExtraField42.setUnicodeName(byteArray53);
        unicodeCommentExtraField42.setNameCRC32((long) (short) -1);
        byte[] byteArray59 = unicodeCommentExtraField42.getLocalFileDataData();
        byte[] byteArray60 = unicodeCommentExtraField42.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            unicodeCommentExtraField12.parseFromCentralDirectoryData(byteArray60, 84446, 32778);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 84446");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(zipShort29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField37);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField50);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[1, -1, -1, -1, -1]");
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        org.apache.commons.compress.archivers.zip.ZipMethod zipMethod1 = org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(1);
        org.junit.Assert.assertTrue("'" + zipMethod1 + "' != '" + org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING + "'", zipMethod1.equals(org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING));
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.util.concurrent.ExecutorService executorService1 = null;
        java.nio.file.Path path2 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier3 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier3.get();
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator5 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService1, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier3);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator6 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier3);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator7 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier8 = null;
        parallelScatterZipCreator7.addArchiveEntry(zipArchiveEntryRequestSupplier8);
        java.util.concurrent.ExecutorService executorService10 = null;
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator11 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService10);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry13 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode14 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort15 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField16 = extraFieldParsingMode14.createExtraField(zipShort15);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField17 = jarArchiveEntry13.getExtraField(zipShort15);
        jarArchiveEntry13.setMethod((int) '4');
        jarArchiveEntry13.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry22 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry13);
        zipArchiveEntry22.setTime((long) (byte) 1);
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier25 = null;
        java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable26 = parallelScatterZipCreator11.createCallable(zipArchiveEntry22, inputStreamSupplier25);
        parallelScatterZipCreator7.submitStreamAwareCallable(scatterZipOutputStreamCallable26);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator28 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier29 = null;
        parallelScatterZipCreator28.addArchiveEntry(zipArchiveEntryRequestSupplier29);
        java.util.concurrent.ExecutorService executorService31 = null;
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator32 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService31);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry34 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode35 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort36 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField37 = extraFieldParsingMode35.createExtraField(zipShort36);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField38 = jarArchiveEntry34.getExtraField(zipShort36);
        jarArchiveEntry34.setMethod((int) '4');
        jarArchiveEntry34.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry43 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry34);
        zipArchiveEntry43.setTime((long) (byte) 1);
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier46 = null;
        java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable47 = parallelScatterZipCreator32.createCallable(zipArchiveEntry43, inputStreamSupplier46);
        parallelScatterZipCreator28.submitStreamAwareCallable(scatterZipOutputStreamCallable47);
        parallelScatterZipCreator7.submit(scatterZipOutputStreamCallable47);
        // The following exception was thrown during execution in test generation
        try {
            parallelScatterZipCreator6.submit(scatterZipOutputStreamCallable47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
        org.junit.Assert.assertNotNull(extraFieldParsingMode14);
        org.junit.Assert.assertNotNull(zipShort15);
        org.junit.Assert.assertNotNull(zipExtraField16);
        org.junit.Assert.assertNull(zipExtraField17);
        org.junit.Assert.assertNotNull(scatterZipOutputStreamCallable26);
        org.junit.Assert.assertNotNull(extraFieldParsingMode35);
        org.junit.Assert.assertNotNull(zipShort36);
        org.junit.Assert.assertNotNull(zipExtraField37);
        org.junit.Assert.assertNull(zipExtraField38);
        org.junit.Assert.assertNotNull(scatterZipOutputStreamCallable47);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream1 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream1, 11);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream1, "00", true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry7 = arArchiveInputStream1.getNextArEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList3 = tarArchiveEntry2.getOrderedSparseHeaders();
        boolean boolean4 = tarArchiveEntry2.isPaxGNU1XSparse();
        tarArchiveEntry2.setNames("arj", "arj");
        boolean boolean8 = tarArchiveEntry2.isGlobalPaxHeader();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 1, false);
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry13 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean17 = tarArchiveEntry16.isSparse();
        tarArchiveEntry16.setMode(26127);
        java.util.Date date20 = tarArchiveEntry16.getModTime();
        sevenZArchiveEntry13.setLastModifiedDate(date20);
        long long22 = sevenZArchiveEntry13.getCrcValue();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry24 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode25 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort26 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField27 = extraFieldParsingMode25.createExtraField(zipShort26);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField28 = jarArchiveEntry24.getExtraField(zipShort26);
        jarArchiveEntry24.setMethod((int) '4');
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp31 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp31.setFlags((byte) 75);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField35 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField41 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField35, byteArray37, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger42 = null;
        zip64ExtendedInformationExtraField35.setRelativeHeaderOffset(zipEightByteInteger42);
        byte[] byteArray44 = zip64ExtendedInformationExtraField35.getLocalFileDataData();
        byte[] byteArray45 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray44);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField46 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray44);
        boolean boolean47 = x5455_ExtendedTimestamp31.equals((java.lang.Object) unicodeCommentExtraField46);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort48 = x5455_ExtendedTimestamp31.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry51 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long52 = tarArchiveEntry51.getDataOffset();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry56 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry60 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry60.setNames("", "ZipLong value: 1");
        int int64 = tarArchiveEntry60.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry67 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean68 = tarArchiveEntry67.isSparse();
        tarArchiveEntry67.setMode(26127);
        java.nio.file.attribute.FileTime fileTime71 = tarArchiveEntry67.getLastModifiedTime();
        tarArchiveEntry60.setModTime(fileTime71);
        cpioArchiveEntry56.setTime(fileTime71);
        tarArchiveEntry51.setStatusChangeTime(fileTime71);
        x5455_ExtendedTimestamp31.setModifyFileTime(fileTime71);
        java.util.zip.ZipEntry zipEntry76 = jarArchiveEntry24.setLastAccessTime(fileTime71);
        sevenZArchiveEntry13.setLastModifiedTime(fileTime71);
        tarArchiveEntry12.setLastAccessTime(fileTime71);
        tarArchiveEntry2.setLastAccessTime(fileTime71);
        boolean boolean80 = tarArchiveEntry2.isGNUSparse();
        long long81 = tarArchiveEntry2.getLongGroupId();
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Jun 20 13:19:21 CEST 2023");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(extraFieldParsingMode25);
        org.junit.Assert.assertNotNull(zipShort26);
        org.junit.Assert.assertNotNull(zipExtraField27);
        org.junit.Assert.assertNull(zipExtraField28);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zipShort48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fileTime71);
        org.junit.Assert.assertNotNull(zipEntry76);
        org.junit.Assert.assertEquals(zipEntry76.toString(), "070707");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setName("ustar ");
        boolean boolean3 = sevenZArchiveEntry0.getHasCrc();
        sevenZArchiveEntry0.setHasStream(false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        zipArchiveOutputStream5.setUseLanguageEncodingFlag(false);
        zipArchiveOutputStream5.setMethod(0);
        zipArchiveOutputStream5.flush();
        java.nio.file.Path path12 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier13 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path12);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore14 = defaultBackingStoreSupplier13.get();
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor15 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore14);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField16 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField22 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField16, byteArray18, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger23 = null;
        zip64ExtendedInformationExtraField16.setRelativeHeaderOffset(zipEightByteInteger23);
        byte[] byteArray25 = zip64ExtendedInformationExtraField16.getLocalFileDataData();
        byte[] byteArray26 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray25);
        org.apache.commons.compress.archivers.tar.TarFile tarFile28 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray26, "arj");
        streamCompressor15.writeCounted(byteArray26);
        zipArchiveOutputStream5.writePreamble(byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream5.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
        org.junit.Assert.assertNotNull(scatterGatherBackingStore14);
        org.junit.Assert.assertNotNull(streamCompressor15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        zipArchiveOutputStream5.setUseLanguageEncodingFlag(false);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream5, "070701");
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream10, "070702");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy13 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
        java.lang.String str14 = unicodeExtraFieldPolicy13.toString();
        jarArchiveOutputStream12.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy13);
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry18 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        dumpArchiveEntry18.setVolume(488);
        dumpArchiveEntry18.setMode(84446);
        dumpArchiveEntry18.setGeneration(36864);
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveOutputStream12.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) dumpArchiveEntry18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.dump.DumpArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "never" + "'", str14, "never");
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean4 = tarArchiveEntry3.isSparse();
        tarArchiveEntry3.setMode(26127);
        java.util.Date date7 = tarArchiveEntry3.getModTime();
        sevenZArchiveEntry0.setLastModifiedDate(date7);
        sevenZArchiveEntry0.setHasLastModifiedDate(false);
        boolean boolean11 = sevenZArchiveEntry0.getHasCreationDate();
        sevenZArchiveEntry0.setCrc(0);
        sevenZArchiveEntry0.setLastModifiedDate(511L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Jun 20 13:19:21 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        zipArchiveOutputStream5.setUseLanguageEncodingFlag(false);
        zipArchiveOutputStream5.setMethod(0);
        zipArchiveOutputStream5.setLevel(0);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry14 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode15 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort16 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField17 = extraFieldParsingMode15.createExtraField(zipShort16);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField18 = jarArchiveEntry14.getExtraField(zipShort16);
        jarArchiveEntry14.setMethod((int) '4');
        jarArchiveEntry14.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry23 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry14);
        byte[] byteArray24 = zipArchiveEntry23.getLocalFileDataExtra();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream5.write(byteArray24, 257, 60011);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
        org.junit.Assert.assertNotNull(extraFieldParsingMode15);
        org.junit.Assert.assertNotNull(zipShort16);
        org.junit.Assert.assertNotNull(zipExtraField17);
        org.junit.Assert.assertNull(zipExtraField18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        arArchiveOutputStream2.finish();
        java.nio.file.Path path4 = null;
        java.nio.file.LinkOption[] linkOptionArray6 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry7 = arArchiveOutputStream2.createArchiveEntry(path4, "compression method", linkOptionArray6);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(linkOptionArray6);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(file0, "xapk");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField0, byteArray2, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger7 = null;
        zip64ExtendedInformationExtraField0.setRelativeHeaderOffset(zipEightByteInteger7);
        byte[] byteArray9 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger10 = zip64ExtendedInformationExtraField0.getSize();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray12 = zipEightByteInteger11.getBytes();
        java.lang.String str13 = zipEightByteInteger11.toString();
        zip64ExtendedInformationExtraField0.setCompressedSize(zipEightByteInteger11);
        java.math.BigInteger bigInteger15 = zipEightByteInteger11.getValue();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger16 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger(bigInteger15);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNull(zipEightByteInteger10);
        org.junit.Assert.assertNotNull(zipEightByteInteger11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ZipEightByteInteger value: 0" + "'", str13, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(bigInteger15);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory();
        org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile x0015_CertificateIdForFile2 = new org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm3 = x0015_CertificateIdForFile2.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = x0015_CertificateIdForFile2.getHeaderId();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm5 = x0015_CertificateIdForFile2.getHashAlgorithm();
        int int6 = x0015_CertificateIdForFile2.getRecordCount();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField7 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField7, byteArray9, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger14 = null;
        zip64ExtendedInformationExtraField7.setRelativeHeaderOffset(zipEightByteInteger14);
        byte[] byteArray16 = zip64ExtendedInformationExtraField7.getLocalFileDataData();
        x0015_CertificateIdForFile2.setCentralDirectoryData(byteArray16);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField18 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("././@LongLink", byteArray16);
        // The following exception was thrown during execution in test generation
        try {
            x0016_CertificateIdForCentralDirectory0.parseFromCentralDirectoryData(byteArray16, (int) (byte) 50, 0);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory is too short, only 0 bytes, expected at least 4");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(hashAlgorithm3);
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNull(hashAlgorithm5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry0 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        java.util.Date date1 = arjArchiveEntry0.getLastModifiedDate();
        java.lang.String str2 = arjArchiveEntry0.getName();
        org.junit.Assert.assertNotNull(date1);
        org.junit.Assert.assertEquals(date1.toString(), "Fri Nov 30 00:00:00 CET 1979");
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setMethod((int) (byte) 100);
        boolean boolean10 = jarArchiveEntry1.isStreamContiguous();
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm encryptionAlgorithm1 = x0017_StrongEncryptionHeader0.getEncryptionAlgorithm();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm encryptionAlgorithm2 = x0017_StrongEncryptionHeader0.getEncryptionAlgorithm();
        byte[] byteArray3 = x0017_StrongEncryptionHeader0.getCentralDirectoryData();
        byte[] byteArray6 = new byte[] { (byte) 100, (byte) 52 };
        org.apache.commons.compress.archivers.tar.TarFile tarFile7 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseFromCentralDirectoryData(byteArray6, 257, (int) (byte) 12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(encryptionAlgorithm1);
        org.junit.Assert.assertNull(encryptionAlgorithm2);
        org.junit.Assert.assertNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 52]");
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream2);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream4 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream2, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2);
        long long8 = tarArchiveOutputStream7.getBytesWritten();
        tarArchiveOutputStream7.flush();
        int int10 = tarArchiveOutputStream7.getCount();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("", (java.io.OutputStream) tarArchiveOutputStream7, file11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver:  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp1 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp1.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean7 = tarArchiveEntry6.isSparse();
        tarArchiveEntry6.setMode(26127);
        java.util.Date date10 = tarArchiveEntry6.getModTime();
        x5455_ExtendedTimestamp1.setModifyJavaTime(date10);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = x5455_ExtendedTimestamp1.getHeaderId();
        byte[] byteArray13 = x5455_ExtendedTimestamp1.getLocalFileDataData();
        java.lang.String str16 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray13, (int) (short) 0, 2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField19 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField("070701", byteArray13, 2, 10240);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Jun 20 13:19:22 CEST 2023");
        org.junit.Assert.assertNotNull(zipShort12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 58, -117, -111, 100]");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\001:" + "'", str16, "\001:");
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory1 = new org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField2 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField2, byteArray4, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger9 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray10 = zipEightByteInteger9.getBytes();
        zip64ExtendedInformationExtraField2.setCompressedSize(zipEightByteInteger9);
        byte[] byteArray12 = zip64ExtendedInformationExtraField2.getCentralDirectoryData();
        x0016_CertificateIdForCentralDirectory1.parseFromCentralDirectoryData(byteArray12, 1, 12);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes("!<arch>\n", byteArray12, 504, 464);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField8);
        org.junit.Assert.assertNotNull(zipEightByteInteger9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        org.apache.commons.compress.MemoryLimitException memoryLimitException2 = new org.apache.commons.compress.MemoryLimitException((long) (byte) 55, 61440);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.util.Date date1 = x000A_NTFS0.getCreateJavaTime();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry3 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        byte[] byteArray5 = new byte[] { (byte) -1 };
        byte[] byteArray6 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray5);
        boolean boolean8 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray6, (int) (short) -1);
        jarArchiveEntry3.setExtra(byteArray6);
        jarArchiveEntry3.setComment("ZipLong value: 11");
        java.util.Date date12 = jarArchiveEntry3.getLastModifiedDate();
        java.util.Date date13 = jarArchiveEntry3.getLastModifiedDate();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry15 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.nio.file.attribute.FileTime fileTime16 = jarArchiveEntry15.getLastAccessTime();
        jarArchiveEntry15.setMethod(424935705);
        jarArchiveEntry15.setExternalAttributes((long) (byte) 4);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode21 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort22 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField23 = extraFieldParsingMode21.createExtraField(zipShort22);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp24 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp24.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry29 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean30 = tarArchiveEntry29.isSparse();
        tarArchiveEntry29.setMode(26127);
        java.util.Date date33 = tarArchiveEntry29.getModTime();
        x5455_ExtendedTimestamp24.setModifyJavaTime(date33);
        byte[] byteArray36 = new byte[] { (byte) -1 };
        byte[] byteArray37 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray36);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField41 = extraFieldParsingMode21.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp24, byteArray37, 0, 32768, true);
        java.nio.file.attribute.FileTime fileTime42 = null;
        x5455_ExtendedTimestamp24.setAccessFileTime(fileTime42);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong44 = x5455_ExtendedTimestamp24.getCreateTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry47 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ustar\000", (byte) 54);
        java.util.Map<java.lang.String, java.lang.String> strMap48 = tarArchiveEntry47.getExtraPaxHeaders();
        java.nio.file.attribute.FileTime fileTime49 = tarArchiveEntry47.getLastModifiedTime();
        x5455_ExtendedTimestamp24.setModifyFileTime(fileTime49);
        java.util.zip.ZipEntry zipEntry51 = jarArchiveEntry15.setCreationTime(fileTime49);
        java.util.zip.ZipEntry zipEntry52 = jarArchiveEntry3.setLastModifiedTime(fileTime49);
        x000A_NTFS0.setAccessFileTime(fileTime49);
        java.nio.file.attribute.FileTime fileTime54 = x000A_NTFS0.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger55 = x000A_NTFS0.getAccessTime();
        java.util.Date date56 = x000A_NTFS0.getCreateJavaTime();
        org.junit.Assert.assertNull(date1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNull(fileTime16);
        org.junit.Assert.assertNotNull(extraFieldParsingMode21);
        org.junit.Assert.assertNotNull(zipShort22);
        org.junit.Assert.assertNotNull(zipExtraField23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Jun 20 13:19:22 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1]");
        org.junit.Assert.assertNotNull(zipExtraField41);
        org.junit.Assert.assertNull(zipLong44);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(zipEntry51);
        org.junit.Assert.assertEquals(zipEntry51.toString(), "070707");
        org.junit.Assert.assertNotNull(zipEntry52);
        org.junit.Assert.assertEquals(zipEntry52.toString(), "070707");
        org.junit.Assert.assertNull(fileTime54);
        org.junit.Assert.assertNotNull(zipEightByteInteger55);
        org.junit.Assert.assertNull(date56);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer1 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream2);
        long long5 = cpioArchiveInputStream3.skip((long) (byte) 100);
        cpioArchiveInputStream3.mark(6);
        boolean boolean8 = cpioArchiveInputStream3.markSupported();
        boolean boolean9 = cpioArchiveInputStream3.markSupported();
        closeableConsumer1.accept((java.io.Closeable) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = jarArchiveInputStream11.getNextZipEntry();
        java.io.File file13 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream11, file13);
        java.nio.file.Path path15 = null;
        java.nio.file.Path path16 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand(path15, path16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(zipArchiveEntry12);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        org.apache.commons.compress.archivers.zip.ZipMethod zipMethod1 = org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(488);
        org.junit.Assert.assertNull(zipMethod1);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        parallelScatterZipCreator0.writeTo(zipArchiveOutputStream6);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream6, (short) (byte) 4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean14 = tarArchiveEntry13.isSparse();
        tarArchiveEntry13.setMode(26127);
        java.util.Date date17 = tarArchiveEntry13.getModTime();
        java.lang.String str18 = tarArchiveEntry13.getUserName();
        tarArchiveEntry13.setGroupName("apks");
        boolean boolean21 = tarArchiveEntry13.isStreamContiguous();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp22 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.file.attribute.FileTime fileTime23 = x5455_ExtendedTimestamp22.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort24 = x5455_ExtendedTimestamp22.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong26 = new org.apache.commons.compress.archivers.zip.ZipLong((long) 0);
        x5455_ExtendedTimestamp22.setModifyTime(zipLong26);
        java.nio.file.attribute.FileTime fileTime28 = x5455_ExtendedTimestamp22.getModifyFileTime();
        tarArchiveEntry13.setStatusChangeTime(fileTime28);
        boolean boolean30 = tarArchiveEntry13.isSymbolicLink();
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Jun 20 13:19:22 CEST 2023");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertNotNull(zipShort24);
        org.junit.Assert.assertNotNull(fileTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 1");
        // The following exception was thrown during execution in test generation
        try {
            long long3 = cpioArchiveEntry2.getDeviceMaj();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        cpioArchiveOutputStream1.flush();
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry5 = cpioArchiveOutputStream1.createArchiveEntry(file3, "ustar\000");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = jarMarker0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = jarMarker0.getHeaderId();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry4 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj5 = jarArchiveEntry4.clone();
        jarArchiveEntry4.setDiskNumberStart((long) (byte) 10);
        jarArchiveEntry4.setCrc((long) (byte) 75);
        java.nio.file.attribute.FileTime fileTime10 = jarArchiveEntry4.getCreationTime();
        byte[] byteArray11 = jarArchiveEntry4.getExtra();
        byte[] byteArray12 = jarArchiveEntry4.getCentralDirectoryExtra();
        // The following exception was thrown during execution in test generation
        try {
            jarMarker0.parseFromLocalFileData(byteArray12, (int) (byte) 88, 64);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: JarMarker doesn't expect any data");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jarMarker0);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "070707");
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        byte[] byteArray1 = new byte[] { (byte) -1 };
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray1);
        boolean boolean4 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray2, (int) (short) -1);
        long long5 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byteArray2, 21, (int) (byte) 12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-1]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 255L + "'", long5 == 255L);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2, 148, 2526, "apkm", false);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream13 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2, (int) (byte) 103);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2, (int) '4');
        java.io.File file16 = null;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer17 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand((java.io.InputStream) cpioArchiveInputStream2, file16, closeableConsumer17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(closeableConsumer17);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        int int11 = jarArchiveInputStream10.read();
        long long12 = jarArchiveInputStream10.getUncompressedCount();
        long long14 = jarArchiveInputStream10.skip((long) 1000);
        long long16 = jarArchiveInputStream10.skip((long) (byte) 53);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = jarArchiveInputStream10.getCompressedCount();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        long long1 = x7875_NewUnix0.getGID();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x7875_NewUnix0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = x7875_NewUnix0.getHeaderId();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1000L + "'", long1 == 1000L);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipShort3);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0);
        long long6 = tarArchiveOutputStream5.getBytesWritten();
        tarArchiveOutputStream5.flush();
        int int8 = tarArchiveOutputStream5.getCount();
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream5.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        java.io.File file0 = null;
        char[] charArray7 = new char[] { ' ', 'a', ' ', '4', 'a', ' ' };
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions8 = org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.DEFAULT;
        boolean boolean9 = sevenZFileOptions8.getTryToRecoverBrokenArchives();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(file0, charArray7, sevenZFileOptions8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), " a 4a ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), " a 4a ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ , a,  , 4, a,  ]");
        org.junit.Assert.assertNotNull(sevenZFileOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        parallelScatterZipCreator0.writeTo(zipArchiveOutputStream6);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream6, (short) (byte) 4);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream10.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory1 = new org.apache.commons.compress.archivers.ArchiveStreamFactory("hi!");
        java.io.OutputStream outputStream3 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream3);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream3);
        arArchiveOutputStream5.finish();
        arArchiveOutputStream5.flush();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream5, "070701");
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream11 = archiveStreamFactory1.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream9, "UTF8");
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream12 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) archiveOutputStream11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) archiveOutputStream11, (int) (byte) 103, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Block size must be a multiple of 512 bytes. Attempt to use set size of 103");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(archiveOutputStream11);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        asiExtraField0.setGroupId(263);
        asiExtraField0.setUserId((int) ' ');
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        java.util.concurrent.ExecutorService executorService0 = null;
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator1 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry3 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = extraFieldParsingMode4.createExtraField(zipShort5);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = jarArchiveEntry3.getExtraField(zipShort5);
        jarArchiveEntry3.setMethod((int) '4');
        jarArchiveEntry3.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry3);
        zipArchiveEntry12.setTime((long) (byte) 1);
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier15 = null;
        java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable16 = parallelScatterZipCreator1.createCallable(zipArchiveEntry12, inputStreamSupplier15);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier17 = null;
        java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable18 = parallelScatterZipCreator1.createCallable(zipArchiveEntryRequestSupplier17);
        org.junit.Assert.assertNotNull(extraFieldParsingMode4);
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertNotNull(zipExtraField6);
        org.junit.Assert.assertNull(zipExtraField7);
        org.junit.Assert.assertNotNull(scatterZipOutputStreamCallable16);
        org.junit.Assert.assertNotNull(scatterZipOutputStreamCallable18);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, (short) (byte) 76, (int) (short) 12, "ZipShort value: 21589");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 76");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        byte[] byteArray1 = new byte[] { (byte) -1 };
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray1);
        long long3 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray2);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField5 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray2, true, unparseableExtraField5);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray2, 464, (int) (short) 100, zipEncoding9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 464");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-1]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 255L + "'", long3 == 255L);
        org.junit.Assert.assertNotNull(unparseableExtraField5);
        org.junit.Assert.assertNotNull(zipExtraFieldArray6);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray9 = zipEightByteInteger8.getBytes();
        zip64ExtendedInformationExtraField1.setCompressedSize(zipEightByteInteger8);
        byte[] byteArray11 = zip64ExtendedInformationExtraField1.getCentralDirectoryData();
        x0016_CertificateIdForCentralDirectory0.parseFromCentralDirectoryData(byteArray11, 1, 12);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort15 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray11);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(zipEightByteInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode0 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.DRACONIC;
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp1 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp1.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean7 = tarArchiveEntry6.isSparse();
        tarArchiveEntry6.setMode(26127);
        java.util.Date date10 = tarArchiveEntry6.getModTime();
        x5455_ExtendedTimestamp1.setModifyJavaTime(date10);
        byte[] byteArray12 = x5455_ExtendedTimestamp1.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort13 = x5455_ExtendedTimestamp1.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField14 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        boolean boolean15 = asiExtraField14.isLink();
        int int16 = asiExtraField14.getMode();
        boolean boolean17 = asiExtraField14.isLink();
        boolean boolean18 = asiExtraField14.isDirectory();
        byte[] byteArray19 = asiExtraField14.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField23 = extraFieldParsingMode0.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp1, byteArray19, 512, 0, false);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: X5455_ExtendedTimestamp too short, only 0 bytes");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + extraFieldParsingMode0 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.DRACONIC + "'", extraFieldParsingMode0.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.DRACONIC));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Jun 20 13:19:23 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 59, -117, -111, 100]");
        org.junit.Assert.assertNotNull(zipShort13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[118, 104, -118, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry0 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        java.lang.String str1 = arjArchiveEntry0.getName();
        long long2 = arjArchiveEntry0.getSize();
        boolean boolean3 = arjArchiveEntry0.isDirectory();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean1 = sevenZArchiveEntry0.getHasLastModifiedDate();
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray2 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] {};
        sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray2);
        java.nio.file.attribute.FileTime fileTime4 = null;
        sevenZArchiveEntry0.setLastModifiedTime(fileTime4);
        sevenZArchiveEntry0.setDirectory(false);
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry10 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("070707", (long) '4');
        java.util.Date date11 = arArchiveEntry10.getLastModifiedDate();
        sevenZArchiveEntry0.setAccessDate(date11);
        java.util.Date date13 = sevenZArchiveEntry0.getAccessDate();
        long long14 = sevenZArchiveEntry0.getCrcValue();
        boolean boolean15 = sevenZArchiveEntry0.hasStream();
        sevenZArchiveEntry0.setCrc(4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry20 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean21 = tarArchiveEntry20.isSparse();
        tarArchiveEntry20.setMode(26127);
        java.util.Date date24 = tarArchiveEntry20.getModTime();
        java.lang.String str25 = tarArchiveEntry20.getUserName();
        tarArchiveEntry20.setGroupName("apks");
        boolean boolean28 = tarArchiveEntry20.isStreamContiguous();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp29 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.file.attribute.FileTime fileTime30 = x5455_ExtendedTimestamp29.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort31 = x5455_ExtendedTimestamp29.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong33 = new org.apache.commons.compress.archivers.zip.ZipLong((long) 0);
        x5455_ExtendedTimestamp29.setModifyTime(zipLong33);
        java.nio.file.attribute.FileTime fileTime35 = x5455_ExtendedTimestamp29.getModifyFileTime();
        tarArchiveEntry20.setStatusChangeTime(fileTime35);
        sevenZArchiveEntry0.setAccessTime(fileTime35);
        java.lang.Iterable<? extends org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration> wildcardIterable38 = sevenZArchiveEntry0.getContentMethods();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(sevenZMethodConfigurationArray2);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Jun 20 13:19:23 CEST 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Jun 20 13:19:23 CEST 2023");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Jun 20 13:19:23 CEST 2023");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(fileTime30);
        org.junit.Assert.assertNotNull(zipShort31);
        org.junit.Assert.assertNotNull(fileTime35);
        org.junit.Assert.assertNotNull(wildcardIterable38);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.util.concurrent.ExecutorService executorService1 = null;
        java.nio.file.Path path2 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier3 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier3.get();
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator5 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService1, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator7 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier3, (int) (byte) -3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Compression level is expected between -1~9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        java.nio.file.Path path3 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("!<arch>\n", seekableByteChannel2, path3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: !<arch>?");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        java.io.File file2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry4 = cpioArchiveOutputStream1.createArchiveEntry(file2, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm1 = org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm.getAlgorithmByCode((int) (byte) 88);
        org.junit.Assert.assertNull(hashAlgorithm1);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        zipArchiveOutputStream5.setUseLanguageEncodingFlag(false);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream5.setEncoding("ustar ");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ustar ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj2 = jarArchiveEntry1.clone();
        int int3 = jarArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry1.setNameSource(nameSource4);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource6 = jarArchiveEntry1.getNameSource();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode7 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort8 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = extraFieldParsingMode7.createExtraField(zipShort8);
        jarArchiveEntry1.addExtraField(zipExtraField9);
        byte[] byteArray11 = jarArchiveEntry1.getCentralDirectoryExtra();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byteArray11, 508);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 515");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "070707");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + nameSource4 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource4.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertTrue("'" + nameSource6 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource6.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNotNull(extraFieldParsingMode7);
        org.junit.Assert.assertNotNull(zipShort8);
        org.junit.Assert.assertNotNull(zipExtraField9);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[85, 84, 1, 0, 0]");
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile x0015_CertificateIdForFile1 = new org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm2 = x0015_CertificateIdForFile1.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = x0015_CertificateIdForFile1.getHeaderId();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm4 = x0015_CertificateIdForFile1.getHashAlgorithm();
        int int5 = x0015_CertificateIdForFile1.getRecordCount();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField6 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray8 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField12 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField6, byteArray8, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger13 = null;
        zip64ExtendedInformationExtraField6.setRelativeHeaderOffset(zipEightByteInteger13);
        byte[] byteArray15 = zip64ExtendedInformationExtraField6.getLocalFileDataData();
        x0015_CertificateIdForFile1.setCentralDirectoryData(byteArray15);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField17 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("././@LongLink", byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipLong zipLong19 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray15, (int) (byte) 50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 50");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(hashAlgorithm2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNull(hashAlgorithm4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        parallelScatterZipCreator0.writeTo(zipArchiveOutputStream6);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream6, (short) (byte) 4);
        zipArchiveOutputStream6.setComment("apks");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry14 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj15 = jarArchiveEntry14.clone();
        int int16 = jarArchiveEntry14.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource17 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry14.setNameSource(nameSource17);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource19 = jarArchiveEntry14.getNameSource();
        long long20 = jarArchiveEntry14.getExternalAttributes();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer21 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream22 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream23 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream22);
        long long25 = cpioArchiveInputStream23.skip((long) (byte) 100);
        cpioArchiveInputStream23.mark(6);
        boolean boolean28 = cpioArchiveInputStream23.markSupported();
        boolean boolean29 = cpioArchiveInputStream23.markSupported();
        closeableConsumer21.accept((java.io.Closeable) cpioArchiveInputStream23);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream31 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream23);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry32 = jarArchiveInputStream31.getNextZipEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry33 = null;
        boolean boolean34 = jarArchiveInputStream31.canReadEntryData(archiveEntry33);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry37 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList38 = tarArchiveEntry37.getOrderedSparseHeaders();
        java.lang.String str40 = tarArchiveEntry37.getExtraPaxHeader("");
        java.nio.file.attribute.FileTime fileTime41 = null;
        tarArchiveEntry37.setCreationTime(fileTime41);
        boolean boolean43 = jarArchiveInputStream31.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry37);
        long long45 = jarArchiveInputStream31.skip(312764400000L);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry46 = jarArchiveInputStream31.getNextJarEntry();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream6.addRawArchiveEntry((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry14, (java.io.InputStream) jarArchiveInputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "070707");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + nameSource17 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource17.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertTrue("'" + nameSource19 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource19.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(closeableConsumer21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(zipArchiveEntry32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList38);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNull(jarArchiveEntry46);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isSparse();
        tarArchiveEntry2.setMode(26127);
        java.util.Date date6 = tarArchiveEntry2.getModTime();
        java.lang.String str7 = tarArchiveEntry2.getUserName();
        boolean boolean8 = tarArchiveEntry2.isSparse();
        boolean boolean9 = tarArchiveEntry2.isStreamContiguous();
        java.nio.file.attribute.FileTime fileTime10 = tarArchiveEntry2.getLastAccessTime();
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList11 = tarArchiveEntry2.getOrderedSparseHeaders();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jun 20 13:19:24 CEST 2023");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList11);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x7875_NewUnix0.getLocalFileDataLength();
        byte[] byteArray2 = x7875_NewUnix0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = x7875_NewUnix0.getLocalFileDataLength();
        long long4 = x7875_NewUnix0.getUID();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1, 2, -24, 3, 2, -24, 3]");
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1000L + "'", long4 == 1000L);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel0, "", sevenZFileOptions2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField2 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField2, byteArray4, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger9 = null;
        zip64ExtendedInformationExtraField2.setRelativeHeaderOffset(zipEightByteInteger9);
        byte[] byteArray11 = zip64ExtendedInformationExtraField2.getLocalFileDataData();
        byte[] byteArray12 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray11);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField13 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray11);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField15 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField21 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField15, byteArray17, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger22 = null;
        zip64ExtendedInformationExtraField15.setRelativeHeaderOffset(zipEightByteInteger22);
        byte[] byteArray24 = zip64ExtendedInformationExtraField15.getLocalFileDataData();
        byte[] byteArray25 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray24);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField26 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray24);
        unicodeCommentExtraField13.setUnicodeName(byteArray24);
        byte[] byteArray28 = unicodeCommentExtraField13.getUnicodeName();
        byte[] byteArray29 = unicodeCommentExtraField13.getUnicodeName();
        byte[] byteArray31 = new byte[] { (byte) -1 };
        byte[] byteArray32 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray31);
        long long33 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray31);
        boolean boolean35 = org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byteArray31, 0);
        unicodeCommentExtraField13.setUnicodeName(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString((long) (short) 100, byteArray31, 512, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 100=144 will not fit in octal number buffer of length -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 255L + "'", long33 == 255L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        byte[] byteArray1 = new byte[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel0, byteArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        byte[] byteArray11 = zipArchiveEntry10.getLocalFileDataExtra();
        long long12 = zipArchiveEntry10.getExternalAttributes();
        zipArchiveEntry10.setCompressedSize((long) 424935705);
        long long15 = zipArchiveEntry10.getTime();
        int int16 = zipArchiveEntry10.getVersionRequired();
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        long long4 = cpioArchiveInputStream1.getBytesRead();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1, 100);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry7 = tarArchiveInputStream6.getNextEntry();
        boolean boolean8 = tarArchiveInputStream6.markSupported();
        boolean boolean9 = tarArchiveInputStream6.markSupported();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) tarArchiveInputStream6, "0x5455 Zip Extra Field: Flags=10  Access:[Thu Jan 01 01:00:01 CET 1970] ");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 0x5455 Zip Extra Field: Flags=10  Access:[Thu Jan 01 01:00:01 CET 1970] ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNull(archiveEntry7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream(inputStream0, "ZipShort value: 20");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ZipShort value: 20");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE sEGMENT_TYPE1 = org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.find(24576);
        org.junit.Assert.assertNull(sEGMENT_TYPE1);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.nio.file.attribute.FileTime fileTime1 = x000A_NTFS0.getAccessFileTime();
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry4 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        dumpArchiveEntry4.setVolume(488);
        java.lang.String str7 = dumpArchiveEntry4.getSimpleName();
        boolean boolean8 = dumpArchiveEntry4.isSocket();
        int int9 = dumpArchiveEntry4.getHeaderHoles();
        boolean boolean10 = dumpArchiveEntry4.isBlkDev();
        java.lang.String str11 = dumpArchiveEntry4.getSimpleName();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry14 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("070707", (long) '4');
        java.lang.String str15 = arArchiveEntry14.getName();
        java.util.Date date16 = arArchiveEntry14.getLastModifiedDate();
        dumpArchiveEntry4.setLastModifiedDate(date16);
        x000A_NTFS0.setAccessJavaTime(date16);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry20 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj21 = jarArchiveEntry20.clone();
        java.lang.Object obj22 = jarArchiveEntry20.clone();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry25 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long26 = tarArchiveEntry25.getDataOffset();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry30 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry34 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry34.setNames("", "ZipLong value: 1");
        int int38 = tarArchiveEntry34.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry41 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean42 = tarArchiveEntry41.isSparse();
        tarArchiveEntry41.setMode(26127);
        java.nio.file.attribute.FileTime fileTime45 = tarArchiveEntry41.getLastModifiedTime();
        tarArchiveEntry34.setModTime(fileTime45);
        cpioArchiveEntry30.setTime(fileTime45);
        tarArchiveEntry25.setStatusChangeTime(fileTime45);
        java.util.zip.ZipEntry zipEntry49 = jarArchiveEntry20.setCreationTime(fileTime45);
        x000A_NTFS0.setCreateFileTime(fileTime45);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField52 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray54 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField58 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField52, byteArray54, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger59 = null;
        zip64ExtendedInformationExtraField52.setRelativeHeaderOffset(zipEightByteInteger59);
        byte[] byteArray61 = zip64ExtendedInformationExtraField52.getLocalFileDataData();
        byte[] byteArray62 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray61);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField63 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray61);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField65 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray67 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField71 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField65, byteArray67, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger72 = null;
        zip64ExtendedInformationExtraField65.setRelativeHeaderOffset(zipEightByteInteger72);
        byte[] byteArray74 = zip64ExtendedInformationExtraField65.getLocalFileDataData();
        byte[] byteArray75 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray74);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField76 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray74);
        unicodeCommentExtraField63.setUnicodeName(byteArray74);
        unicodeCommentExtraField63.setNameCRC32((long) (short) -1);
        byte[] byteArray80 = unicodeCommentExtraField63.getLocalFileDataData();
        byte[] byteArray81 = unicodeCommentExtraField63.getLocalFileDataData();
        byte[] byteArray82 = unicodeCommentExtraField63.getCentralDirectoryData();
        byte[] byteArray83 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray82);
        // The following exception was thrown during execution in test generation
        try {
            x000A_NTFS0.parseFromLocalFileData(byteArray83, 4096, 96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "070707" + "'", str7, "070707");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "070707" + "'", str11, "070707");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "070707" + "'", str15, "070707");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Jun 20 13:19:24 CEST 2023");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "070707");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "070707");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(fileTime45);
        org.junit.Assert.assertNotNull(zipEntry49);
        org.junit.Assert.assertEquals(zipEntry49.toString(), "070707");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField71);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-1, -1, -1, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-1, -1, -1, -1, 1]");
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        long long5 = cpioArchiveInputStream2.getBytesRead();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2, 100);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        boolean boolean9 = tarArchiveInputStream7.markSupported();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField11 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField17 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField11, byteArray13, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger18 = null;
        zip64ExtendedInformationExtraField11.setRelativeHeaderOffset(zipEightByteInteger18);
        byte[] byteArray20 = zip64ExtendedInformationExtraField11.getLocalFileDataData();
        byte[] byteArray21 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray20);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField22 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray20);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField24 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray26 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField30 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField24, byteArray26, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger31 = null;
        zip64ExtendedInformationExtraField24.setRelativeHeaderOffset(zipEightByteInteger31);
        byte[] byteArray33 = zip64ExtendedInformationExtraField24.getLocalFileDataData();
        byte[] byteArray34 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray33);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField35 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray33);
        unicodeCommentExtraField22.setUnicodeName(byteArray33);
        byte[] byteArray37 = unicodeCommentExtraField22.getUnicodeName();
        byte[] byteArray38 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray37);
        int int41 = tarArchiveInputStream7.read(byteArray38, 511, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField44 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("0x5455 Zip Extra Field: Flags=10  Access:[Thu Jan 01 01:00:01 CET 1970] ", byteArray38, (int) (byte) 103, 61440);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField30);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isSparse();
        tarArchiveEntry2.setMode(26127);
        java.util.Date date6 = tarArchiveEntry2.getModTime();
        boolean boolean7 = tarArchiveEntry2.isPaxHeader();
        tarArchiveEntry2.setDevMinor((int) (short) 2);
        java.nio.file.attribute.FileTime fileTime10 = tarArchiveEntry2.getStatusChangeTime();
        java.util.Date date11 = tarArchiveEntry2.getModTime();
        int int12 = tarArchiveEntry2.getUserId();
        int int13 = tarArchiveEntry2.getGroupId();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jun 20 13:19:25 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Jun 20 13:19:25 CEST 2023");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream2);
        java.io.File file4 = null;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer5 = org.apache.commons.compress.archivers.examples.CloseableConsumer.CLOSING_CONSUMER;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("\001\004", inputStream2, file4, closeableConsumer5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: InputStream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer5);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile1 = new org.apache.commons.compress.archivers.zip.ZipFile("compressionElapsed=-1687259892275ms, mergingElapsed=0ms");
            org.junit.Assert.fail("Expected exception of type java.nio.file.NoSuchFileException; message: compressionElapsed=-1687259892275ms, mergingElapsed=0ms");
        } catch (java.nio.file.NoSuchFileException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        zipArchiveOutputStream5.setUseLanguageEncodingFlag(false);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream5, "070701");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField13 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(2, true);
        byte[] byteArray14 = resourceAlignmentExtraField13.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream10.write(byteArray14, 0, 257);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[2, -128]");
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray10);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField12 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray10);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField14 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField14, byteArray16, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger21 = null;
        zip64ExtendedInformationExtraField14.setRelativeHeaderOffset(zipEightByteInteger21);
        byte[] byteArray23 = zip64ExtendedInformationExtraField14.getLocalFileDataData();
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray23);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField25 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray23);
        unicodeCommentExtraField12.setUnicodeName(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            long long27 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature0 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry2 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj3 = jarArchiveEntry2.clone();
        jarArchiveEntry2.setDiskNumberStart((long) (byte) 10);
        jarArchiveEntry2.setCrc((long) (byte) 75);
        java.nio.file.attribute.FileTime fileTime8 = jarArchiveEntry2.getCreationTime();
        byte[] byteArray9 = jarArchiveEntry2.getExtra();
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException10 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature0, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry11 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ZIP compression method can not be negative: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(feature0);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "070707");
        org.junit.Assert.assertNull(fileTime8);
        org.junit.Assert.assertNull(byteArray9);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = jarArchiveInputStream10.getNextZipEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry12 = null;
        boolean boolean13 = jarArchiveInputStream10.canReadEntryData(archiveEntry12);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = jarArchiveInputStream10.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        long long16 = jarArchiveInputStream10.getBytesRead();
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(zipArchiveEntry11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(archiveEntry14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        x7875_NewUnix0.setGID((long) 'a');
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField3 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField3, byteArray5, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger10 = null;
        zip64ExtendedInformationExtraField3.setRelativeHeaderOffset(zipEightByteInteger10);
        byte[] byteArray12 = zip64ExtendedInformationExtraField3.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField14 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray12, true, unparseableExtraField14);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray12);
        x7875_NewUnix0.parseFromCentralDirectoryData(byteArray12, 40960, (int) (short) 3);
        java.lang.String str20 = x7875_NewUnix0.toString();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0x7875 Zip Extra Field: UID=1000 GID=97" + "'", str20, "0x7875 Zip Extra Field: UID=1000 GID=97");
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet3 = dumpArchiveEntry2.getPermissions();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry5 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode6 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = extraFieldParsingMode6.createExtraField(zipShort7);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = jarArchiveEntry5.getExtraField(zipShort7);
        jarArchiveEntry5.setMethod((int) '4');
        jarArchiveEntry5.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry5);
        jarArchiveEntry5.setVersionMadeBy(508);
        boolean boolean17 = dumpArchiveEntry2.equals((java.lang.Object) 508);
        boolean boolean18 = dumpArchiveEntry2.isSocket();
        java.lang.String str19 = dumpArchiveEntry2.getName();
        boolean boolean20 = dumpArchiveEntry2.isBlkDev();
        boolean boolean21 = dumpArchiveEntry2.isFifo();
        org.junit.Assert.assertNotNull(pERMISSIONSet3);
        org.junit.Assert.assertNotNull(extraFieldParsingMode6);
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertNotNull(zipExtraField8);
        org.junit.Assert.assertNull(zipExtraField9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "`\n" + "'", str19, "`\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod0 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY;
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration sevenZMethodConfiguration1 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration(sevenZMethod0);
        java.lang.Object obj2 = sevenZMethodConfiguration1.getOptions();
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod3 = sevenZMethodConfiguration1.getMethod();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = new org.apache.commons.compress.archivers.zip.ZipLong(11);
        java.lang.String str6 = zipLong5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration sevenZMethodConfiguration7 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration(sevenZMethod3, (java.lang.Object) zipLong5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The COPY method doesn't support options of type class org.apache.commons.compress.archivers.zip.ZipLong");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + sevenZMethod0 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY + "'", sevenZMethod0.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY));
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + sevenZMethod3 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY + "'", sevenZMethod3.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ZipLong value: 11" + "'", str6, "ZipLong value: 11");
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField2 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField2, byteArray4, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger9 = null;
        zip64ExtendedInformationExtraField2.setRelativeHeaderOffset(zipEightByteInteger9);
        byte[] byteArray11 = zip64ExtendedInformationExtraField2.getLocalFileDataData();
        byte[] byteArray12 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray11);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField13 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray11);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField15 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField21 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField15, byteArray17, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger22 = null;
        zip64ExtendedInformationExtraField15.setRelativeHeaderOffset(zipEightByteInteger22);
        byte[] byteArray24 = zip64ExtendedInformationExtraField15.getLocalFileDataData();
        byte[] byteArray25 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray24);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField26 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray24);
        unicodeCommentExtraField13.setUnicodeName(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes((long) (byte) 100, byteArray24, 4096, 420);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4514");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray10);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField12 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray10);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField14 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField14, byteArray16, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger21 = null;
        zip64ExtendedInformationExtraField14.setRelativeHeaderOffset(zipEightByteInteger21);
        byte[] byteArray23 = zip64ExtendedInformationExtraField14.getLocalFileDataData();
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray23);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField25 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray23);
        unicodeCommentExtraField12.setUnicodeName(byteArray23);
        unicodeCommentExtraField12.setNameCRC32((long) (short) -1);
        byte[] byteArray29 = unicodeCommentExtraField12.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort30 = unicodeCommentExtraField12.getHeaderId();
        long long31 = unicodeCommentExtraField12.getNameCRC32();
        long long32 = unicodeCommentExtraField12.getNameCRC32();
        long long33 = unicodeCommentExtraField12.getNameCRC32();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(zipShort30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField0, byteArray2, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger7 = null;
        zip64ExtendedInformationExtraField0.setRelativeHeaderOffset(zipEightByteInteger7);
        byte[] byteArray9 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        boolean boolean11 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray9, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray9, (int) (byte) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        java.util.concurrent.ExecutorService executorService0 = null;
        org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier scatterGatherBackingStoreSupplier1 = null;
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator2 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, scatterGatherBackingStoreSupplier1);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry4 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode5 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = extraFieldParsingMode5.createExtraField(zipShort6);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = jarArchiveEntry4.getExtraField(zipShort6);
        jarArchiveEntry4.setMethod((int) '4');
        jarArchiveEntry4.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry13 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry4);
        jarArchiveEntry4.setVersionMadeBy(508);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry16 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry4);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource17 = jarArchiveEntry16.getNameSource();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry18 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry16);
        byte[] byteArray19 = jarArchiveEntry16.getLocalFileDataExtra();
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier20 = null;
        // The following exception was thrown during execution in test generation
        try {
            parallelScatterZipCreator2.addArchiveEntry((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry16, inputStreamSupplier20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode5);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNull(zipExtraField8);
        org.junit.Assert.assertTrue("'" + nameSource17 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.NAME + "'", nameSource17.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.NAME));
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory1 = new org.apache.commons.compress.archivers.ArchiveStreamFactory("hi!");
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.archivers.ArchiveStreamProvider> strMap2 = archiveStreamFactory1.getArchiveOutputStreamProviders();
        java.util.Set<java.lang.String> strSet3 = archiveStreamFactory1.getInputStreamArchiveNames();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer5 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream6 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream7 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream6);
        long long9 = cpioArchiveInputStream7.skip((long) (byte) 100);
        cpioArchiveInputStream7.mark(6);
        boolean boolean12 = cpioArchiveInputStream7.markSupported();
        boolean boolean13 = cpioArchiveInputStream7.markSupported();
        closeableConsumer5.accept((java.io.Closeable) cpioArchiveInputStream7);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream7);
        int int16 = jarArchiveInputStream15.read();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream17 = archiveStreamFactory1.createArchiveInputStream("7z", (java.io.InputStream) jarArchiveInputStream15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.StreamingNotSupportedException; message: The 7z doesn't support streaming.");
        } catch (org.apache.commons.compress.archivers.StreamingNotSupportedException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(closeableConsumer5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder0 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder2 = builder0.withTryToRecoverBrokenArchives(false);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder4 = builder2.withMaxMemoryLimitInKb((int) (byte) 55);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0);
        long long6 = tarArchiveOutputStream5.getBytesWritten();
        tarArchiveOutputStream5.setAddPaxHeadersForNonAsciiNames(false);
        tarArchiveOutputStream5.flush();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField11 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField17 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField11, byteArray13, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger18 = null;
        zip64ExtendedInformationExtraField11.setRelativeHeaderOffset(zipEightByteInteger18);
        byte[] byteArray20 = zip64ExtendedInformationExtraField11.getLocalFileDataData();
        byte[] byteArray21 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray20);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField22 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray20);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField23 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField29 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField23, byteArray25, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger30 = null;
        zip64ExtendedInformationExtraField23.setRelativeHeaderOffset(zipEightByteInteger30);
        byte[] byteArray32 = zip64ExtendedInformationExtraField23.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger33 = zip64ExtendedInformationExtraField23.getRelativeHeaderOffset();
        byte[] byteArray34 = zip64ExtendedInformationExtraField23.getCentralDirectoryData();
        unicodeCommentExtraField22.setUnicodeName(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream5.write(byteArray34, 32, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNull(zipEightByteInteger33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getCreateTime();
        byte[] byteArray2 = x000A_NTFS0.getLocalFileDataData();
        boolean boolean4 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray2, 257);
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        org.apache.commons.compress.archivers.dump.DumpArchiveException dumpArchiveException1 = new org.apache.commons.compress.archivers.dump.DumpArchiveException("xapk");
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        long long4 = cpioArchiveInputStream1.getBytesRead();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1, 100);
        int int7 = tarArchiveInputStream6.getRecordSize();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField9 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray11 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField15 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField9, byteArray11, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger16 = null;
        zip64ExtendedInformationExtraField9.setRelativeHeaderOffset(zipEightByteInteger16);
        byte[] byteArray18 = zip64ExtendedInformationExtraField9.getLocalFileDataData();
        byte[] byteArray19 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray18);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField20 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray18);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField22 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray24 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField28 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField22, byteArray24, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger29 = null;
        zip64ExtendedInformationExtraField22.setRelativeHeaderOffset(zipEightByteInteger29);
        byte[] byteArray31 = zip64ExtendedInformationExtraField22.getLocalFileDataData();
        byte[] byteArray32 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray31);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField33 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray31);
        unicodeCommentExtraField20.setUnicodeName(byteArray31);
        unicodeCommentExtraField20.setNameCRC32((long) (short) -1);
        byte[] byteArray37 = unicodeCommentExtraField20.getLocalFileDataData();
        byte[] byteArray38 = unicodeCommentExtraField20.getLocalFileDataData();
        byte[] byteArray39 = unicodeCommentExtraField20.getCentralDirectoryData();
        boolean boolean41 = org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byteArray39, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int44 = tarArchiveInputStream6.read(byteArray39, (int) (byte) 76, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 512 + "'", int7 == 512);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField28);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        org.apache.commons.compress.archivers.StreamingNotSupportedException streamingNotSupportedException2 = new org.apache.commons.compress.archivers.StreamingNotSupportedException("arj");
        java.lang.String str3 = streamingNotSupportedException2.getFormat();
        org.apache.commons.compress.archivers.dump.DumpArchiveException dumpArchiveException4 = new org.apache.commons.compress.archivers.dump.DumpArchiveException("ZipLong value: 1", (java.lang.Throwable) streamingNotSupportedException2);
        java.lang.String str5 = streamingNotSupportedException2.getFormat();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "arj" + "'", str3, "arj");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "arj" + "'", str5, "arj");
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile x0015_CertificateIdForFile0 = new org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm1 = x0015_CertificateIdForFile0.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x0015_CertificateIdForFile0.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = x0015_CertificateIdForFile0.getLocalFileDataLength();
        org.junit.Assert.assertNull(hashAlgorithm1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipShort3);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        java.io.File file5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry7 = cpioArchiveOutputStream4.createArchiveEntry(file5, "cpio");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        byte[] byteArray1 = new byte[] { (byte) -1 };
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray1);
        long long3 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray2);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField5 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray6 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray2, true, unparseableExtraField5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-1]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 255L + "'", long3 == 255L);
        org.junit.Assert.assertNotNull(unparseableExtraField5);
        org.junit.Assert.assertNotNull(zipExtraFieldArray6);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isStarSparse();
        tarArchiveEntry2.setGroupName("apks");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 1, false);
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry10 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean14 = tarArchiveEntry13.isSparse();
        tarArchiveEntry13.setMode(26127);
        java.util.Date date17 = tarArchiveEntry13.getModTime();
        sevenZArchiveEntry10.setLastModifiedDate(date17);
        long long19 = sevenZArchiveEntry10.getCrcValue();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry21 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode22 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort23 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField24 = extraFieldParsingMode22.createExtraField(zipShort23);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField25 = jarArchiveEntry21.getExtraField(zipShort23);
        jarArchiveEntry21.setMethod((int) '4');
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp28 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp28.setFlags((byte) 75);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField32 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField38 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField32, byteArray34, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger39 = null;
        zip64ExtendedInformationExtraField32.setRelativeHeaderOffset(zipEightByteInteger39);
        byte[] byteArray41 = zip64ExtendedInformationExtraField32.getLocalFileDataData();
        byte[] byteArray42 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray41);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField43 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray41);
        boolean boolean44 = x5455_ExtendedTimestamp28.equals((java.lang.Object) unicodeCommentExtraField43);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort45 = x5455_ExtendedTimestamp28.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry48 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long49 = tarArchiveEntry48.getDataOffset();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry53 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry57 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry57.setNames("", "ZipLong value: 1");
        int int61 = tarArchiveEntry57.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry64 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean65 = tarArchiveEntry64.isSparse();
        tarArchiveEntry64.setMode(26127);
        java.nio.file.attribute.FileTime fileTime68 = tarArchiveEntry64.getLastModifiedTime();
        tarArchiveEntry57.setModTime(fileTime68);
        cpioArchiveEntry53.setTime(fileTime68);
        tarArchiveEntry48.setStatusChangeTime(fileTime68);
        x5455_ExtendedTimestamp28.setModifyFileTime(fileTime68);
        java.util.zip.ZipEntry zipEntry73 = jarArchiveEntry21.setLastAccessTime(fileTime68);
        sevenZArchiveEntry10.setLastModifiedTime(fileTime68);
        tarArchiveEntry9.setLastAccessTime(fileTime68);
        tarArchiveEntry2.setStatusChangeTime(fileTime68);
        long long77 = tarArchiveEntry2.getSize();
        tarArchiveEntry2.setModTime(1687259872L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Jun 20 13:19:26 CEST 2023");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(extraFieldParsingMode22);
        org.junit.Assert.assertNotNull(zipShort23);
        org.junit.Assert.assertNotNull(zipExtraField24);
        org.junit.Assert.assertNull(zipExtraField25);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(zipShort45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(fileTime68);
        org.junit.Assert.assertNotNull(zipEntry73);
        org.junit.Assert.assertEquals(zipEntry73.toString(), "070707");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream4 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream9 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1, 148, 2526, "apkm", false);
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix10 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        x7875_NewUnix10.setGID((long) 'a');
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField13 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray15 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField19 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField13, byteArray15, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger20 = null;
        zip64ExtendedInformationExtraField13.setRelativeHeaderOffset(zipEightByteInteger20);
        byte[] byteArray22 = zip64ExtendedInformationExtraField13.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField24 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray25 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray22, true, unparseableExtraField24);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray22);
        x7875_NewUnix10.parseFromCentralDirectoryData(byteArray22, 40960, (int) (short) 3);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = cpioArchiveInputStream1.read(byteArray22, 26127, 61440);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField19);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray25);
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean1 = sevenZArchiveEntry0.getHasLastModifiedDate();
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray2 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] {};
        sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray2);
        java.nio.file.attribute.FileTime fileTime4 = null;
        sevenZArchiveEntry0.setLastModifiedTime(fileTime4);
        sevenZArchiveEntry0.setDirectory(false);
        int int8 = sevenZArchiveEntry0.getWindowsAttributes();
        sevenZArchiveEntry0.setAntiItem(true);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.attribute.FileTime fileTime11 = sevenZArchiveEntry0.getCreationTime();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The entry doesn't have this timestamp");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(sevenZMethodConfigurationArray2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarFile tarFile2 = new org.apache.commons.compress.archivers.tar.TarFile(file0, "0x5455 Zip Extra Field: Flags=1011000 ");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (byte) 1);
        x5455_ExtendedTimestamp0.setAccessTime(zipLong2);
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry4 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry4.setName("ustar ");
        sevenZArchiveEntry4.setCrc(131);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean12 = tarArchiveEntry11.isSparse();
        tarArchiveEntry11.setUserName("ZipLong value: 1");
        boolean boolean15 = tarArchiveEntry11.isStreamContiguous();
        boolean boolean16 = tarArchiveEntry11.isStreamContiguous();
        tarArchiveEntry11.setDataOffset((long) (short) 100);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry22.setNames("", "ZipLong value: 1");
        int int26 = tarArchiveEntry22.getGroupId();
        tarArchiveEntry22.setNames("apks", "arj");
        boolean boolean30 = tarArchiveEntry11.isDescendent(tarArchiveEntry22);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry33 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean34 = tarArchiveEntry33.isSparse();
        tarArchiveEntry33.setMode(26127);
        java.nio.file.attribute.FileTime fileTime37 = tarArchiveEntry33.getLastModifiedTime();
        tarArchiveEntry11.setCreationTime(fileTime37);
        sevenZArchiveEntry4.setLastModifiedTime(fileTime37);
        boolean boolean40 = sevenZArchiveEntry4.getHasCrc();
        boolean boolean41 = zipLong2.equals((java.lang.Object) sevenZArchiveEntry4);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry43 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("data descriptor");
        boolean boolean44 = zipLong2.equals((java.lang.Object) jarArchiveEntry43);
        java.util.Date date45 = org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(zipLong2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Fri Nov 30 00:00:02 CET 1979");
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory();
        int int1 = x0016_CertificateIdForCentralDirectory0.getRecordCount();
        int int2 = x0016_CertificateIdForCentralDirectory0.getRecordCount();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm3 = x0016_CertificateIdForCentralDirectory0.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField4 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField4, byteArray6, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = null;
        zip64ExtendedInformationExtraField4.setRelativeHeaderOffset(zipEightByteInteger11);
        byte[] byteArray13 = zip64ExtendedInformationExtraField4.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            x0016_CertificateIdForCentralDirectory0.parseFromCentralDirectoryData(byteArray13, 0, (int) (short) 75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(hashAlgorithm3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj2 = jarArchiveEntry1.clone();
        jarArchiveEntry1.setDiskNumberStart((long) (byte) 10);
        jarArchiveEntry1.setCrc((long) (byte) 75);
        java.nio.file.attribute.FileTime fileTime7 = jarArchiveEntry1.getCreationTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry10 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList11 = tarArchiveEntry10.getOrderedSparseHeaders();
        boolean boolean12 = tarArchiveEntry10.isPaxGNU1XSparse();
        boolean boolean13 = tarArchiveEntry10.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime14 = tarArchiveEntry10.getLastModifiedTime();
        java.util.zip.ZipEntry zipEntry15 = jarArchiveEntry1.setLastModifiedTime(fileTime14);
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveEntry1.setAlignment((int) (byte) 49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid value for alignment, must be power of two and no bigger than 65535 but is 49");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "070707");
        org.junit.Assert.assertNull(fileTime7);
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fileTime14);
        org.junit.Assert.assertNotNull(zipEntry15);
        org.junit.Assert.assertEquals(zipEntry15.toString(), "070707");
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean1 = sevenZArchiveEntry0.getHasLastModifiedDate();
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray2 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] {};
        sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray2);
        java.nio.file.attribute.FileTime fileTime4 = null;
        sevenZArchiveEntry0.setLastModifiedTime(fileTime4);
        sevenZArchiveEntry0.setDirectory(false);
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry10 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("070707", (long) '4');
        java.util.Date date11 = arArchiveEntry10.getLastModifiedDate();
        sevenZArchiveEntry0.setAccessDate(date11);
        java.util.Date date13 = sevenZArchiveEntry0.getAccessDate();
        long long14 = sevenZArchiveEntry0.getCrcValue();
        boolean boolean15 = sevenZArchiveEntry0.hasStream();
        sevenZArchiveEntry0.setCrc(4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry20 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList21 = tarArchiveEntry20.getOrderedSparseHeaders();
        boolean boolean22 = tarArchiveEntry20.isPaxGNU1XSparse();
        boolean boolean23 = tarArchiveEntry20.isCheckSumOK();
        long long24 = tarArchiveEntry20.getLongUserId();
        boolean boolean25 = tarArchiveEntry20.isBlockDevice();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp26 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.file.attribute.FileTime fileTime27 = x5455_ExtendedTimestamp26.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort28 = x5455_ExtendedTimestamp26.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong30 = new org.apache.commons.compress.archivers.zip.ZipLong((long) 0);
        x5455_ExtendedTimestamp26.setModifyTime(zipLong30);
        java.nio.file.attribute.FileTime fileTime32 = x5455_ExtendedTimestamp26.getModifyFileTime();
        tarArchiveEntry20.setCreationTime(fileTime32);
        sevenZArchiveEntry0.setAccessTime(fileTime32);
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        boolean boolean37 = sevenZArchiveEntry0.getHasCrc();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(sevenZMethodConfigurationArray2);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Jun 20 13:19:27 CEST 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Jun 20 13:19:27 CEST 2023");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(fileTime27);
        org.junit.Assert.assertNotNull(zipShort28);
        org.junit.Assert.assertNotNull(fileTime32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel0, "`\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown header type 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        cpioArchiveInputStream1.mark(6);
        boolean boolean6 = cpioArchiveInputStream1.markSupported();
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1, "00");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.arj.ArjArchiveInputStream arjArchiveInputStream10 = new org.apache.commons.compress.archivers.arj.ArjArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1, "dump");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: null");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = new org.apache.commons.compress.archivers.zip.ZipLong(11);
        int int2 = zipLong1.getIntValue();
        java.util.Date date3 = org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(zipLong1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
        org.junit.Assert.assertNotNull(date3);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Nov 30 00:00:22 CET 1979");
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(511, false);
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer3 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream4 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream4);
        long long7 = cpioArchiveInputStream5.skip((long) (byte) 100);
        cpioArchiveInputStream5.mark(6);
        boolean boolean10 = cpioArchiveInputStream5.markSupported();
        boolean boolean11 = cpioArchiveInputStream5.markSupported();
        closeableConsumer3.accept((java.io.Closeable) cpioArchiveInputStream5);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream13 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream5);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = jarArchiveInputStream13.getNextZipEntry();
        long long16 = jarArchiveInputStream13.skip((long) 148);
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix17 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        byte[] byteArray18 = x7875_NewUnix17.getCentralDirectoryData();
        int int19 = jarArchiveInputStream13.read(byteArray18);
        // The following exception was thrown during execution in test generation
        try {
            resourceAlignmentExtraField2.parseFromCentralDirectoryData(byteArray18, 1000, (int) (byte) 50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(zipArchiveEntry14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        x7875_NewUnix0.setGID((long) 'a');
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField3 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField3, byteArray5, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger10 = null;
        zip64ExtendedInformationExtraField3.setRelativeHeaderOffset(zipEightByteInteger10);
        byte[] byteArray12 = zip64ExtendedInformationExtraField3.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField14 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray12, true, unparseableExtraField14);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray12);
        x7875_NewUnix0.parseFromCentralDirectoryData(byteArray12, 40960, (int) (short) 3);
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm encryptionAlgorithm20 = org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES256;
        boolean boolean21 = x7875_NewUnix0.equals((java.lang.Object) encryptionAlgorithm20);
        int int22 = encryptionAlgorithm20.getCode();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertTrue("'" + encryptionAlgorithm20 + "' != '" + org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES256 + "'", encryptionAlgorithm20.equals(org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm.AES256));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26128 + "'", int22 == 26128);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet3 = dumpArchiveEntry2.getPermissions();
        boolean boolean4 = dumpArchiveEntry2.isDeleted();
        boolean boolean5 = dumpArchiveEntry2.isDirectory();
        java.lang.String str6 = dumpArchiveEntry2.getSimpleName();
        org.junit.Assert.assertNotNull(pERMISSIONSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "070707" + "'", str6, "070707");
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException unsupportedCompressionAlgorithmException1 = new org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException("ustar\000");
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile2 = new org.apache.commons.compress.archivers.zip.ZipFile(seekableByteChannel0, "cpio");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.util.Set<java.lang.String> strSet1 = archiveStreamFactory0.getInputStreamArchiveNames();
        java.util.Set<java.lang.String> strSet2 = archiveStreamFactory0.getInputStreamArchiveNames();
        java.util.Set<java.lang.String> strSet3 = archiveStreamFactory0.getInputStreamArchiveNames();
        java.util.Set<java.lang.String> strSet4 = archiveStreamFactory0.getOutputStreamArchiveNames();
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        arArchiveOutputStream2.finish();
        arArchiveOutputStream2.flush();
        arArchiveOutputStream2.setLongFileMode(4095);
        java.nio.file.Path path7 = null;
        java.nio.file.LinkOption[] linkOptionArray9 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry10 = arArchiveOutputStream2.createArchiveEntry(path7, "UTF8", linkOptionArray9);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(linkOptionArray9);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) (byte) 53, "compression method");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown header type 53");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        zipArchiveOutputStream5.flush();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream5.setLevel(424935705);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid compression level: 424935705");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp1 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp1.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean7 = tarArchiveEntry6.isSparse();
        tarArchiveEntry6.setMode(26127);
        java.util.Date date10 = tarArchiveEntry6.getModTime();
        x5455_ExtendedTimestamp1.setModifyJavaTime(date10);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = x5455_ExtendedTimestamp1.getHeaderId();
        byte[] byteArray13 = x5455_ExtendedTimestamp1.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime((long) 26127, byteArray13, (int) (byte) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Jun 20 13:19:27 CEST 2023");
        org.junit.Assert.assertNotNull(zipShort12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1, 63, -117, -111, 100]");
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream4 = archiveStreamFactory0.createArchiveInputStream("ZipShort value: 21589", inputStream2, "compressionElapsed=-1687259893320ms, mergingElapsed=0ms");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: InputStream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x7875_NewUnix0.getHeaderId();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField3 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField3, byteArray5, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger10 = null;
        zip64ExtendedInformationExtraField3.setRelativeHeaderOffset(zipEightByteInteger10);
        byte[] byteArray12 = zip64ExtendedInformationExtraField3.getLocalFileDataData();
        byte[] byteArray13 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray12);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField14 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray12);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField16 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField22 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField16, byteArray18, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger23 = null;
        zip64ExtendedInformationExtraField16.setRelativeHeaderOffset(zipEightByteInteger23);
        byte[] byteArray25 = zip64ExtendedInformationExtraField16.getLocalFileDataData();
        byte[] byteArray26 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray25);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField27 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray25);
        unicodeCommentExtraField14.setUnicodeName(byteArray25);
        unicodeCommentExtraField14.setNameCRC32((long) (short) -1);
        byte[] byteArray31 = unicodeCommentExtraField14.getLocalFileDataData();
        byte[] byteArray32 = unicodeCommentExtraField14.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            x7875_NewUnix0.parseFromLocalFileData(byteArray32, (int) (short) 3, 0);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: X7875_NewUnix length is too short, only 0 bytes");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[1, -1, -1, -1, -1]");
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("");
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray10);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField12 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray10);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField14 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField14, byteArray16, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger21 = null;
        zip64ExtendedInformationExtraField14.setRelativeHeaderOffset(zipEightByteInteger21);
        byte[] byteArray23 = zip64ExtendedInformationExtraField14.getLocalFileDataData();
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray23);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField25 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray23);
        unicodeCommentExtraField12.setUnicodeName(byteArray23);
        unicodeCommentExtraField12.setNameCRC32((long) (short) -1);
        byte[] byteArray29 = unicodeCommentExtraField12.getLocalFileDataData();
        byte[] byteArray31 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) (byte) 54);
        // The following exception was thrown during execution in test generation
        try {
            unicodeCommentExtraField12.parseFromCentralDirectoryData(byteArray31, 64, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 64");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[54, 0]");
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        zipArchiveOutputStream5.flush();
        zipArchiveOutputStream5.setUseLanguageEncodingFlag(true);
        java.lang.String str9 = zipArchiveOutputStream5.getEncoding();
        zipArchiveOutputStream5.setEncoding("070702");
        zipArchiveOutputStream5.flush();
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix13 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort14 = x7875_NewUnix13.getLocalFileDataLength();
        byte[] byteArray15 = x7875_NewUnix13.getLocalFileDataData();
        java.lang.String str16 = x7875_NewUnix13.toString();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry18 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj19 = jarArchiveEntry18.clone();
        int int20 = jarArchiveEntry18.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource21 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry18.setNameSource(nameSource21);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource23 = jarArchiveEntry18.getNameSource();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode24 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort25 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField26 = extraFieldParsingMode24.createExtraField(zipShort25);
        jarArchiveEntry18.addExtraField(zipExtraField26);
        byte[] byteArray28 = jarArchiveEntry18.getCentralDirectoryExtra();
        x7875_NewUnix13.parseFromCentralDirectoryData(byteArray28, 4095, 4096);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream5.writePreamble(byteArray28, 420, 96);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTF8" + "'", str9, "UTF8");
        org.junit.Assert.assertNotNull(zipShort14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[1, 2, -24, 3, 2, -24, 3]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0x7875 Zip Extra Field: UID=1000 GID=1000" + "'", str16, "0x7875 Zip Extra Field: UID=1000 GID=1000");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "070707");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + nameSource21 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource21.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertTrue("'" + nameSource23 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource23.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNotNull(extraFieldParsingMode24);
        org.junit.Assert.assertNotNull(zipShort25);
        org.junit.Assert.assertNotNull(zipExtraField26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[85, 84, 1, 0, 0]");
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        zipArchiveOutputStream6.setUseLanguageEncodingFlag(false);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy10 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER;
        java.lang.String str11 = unicodeExtraFieldPolicy10.toString();
        zipArchiveOutputStream6.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy10);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream13 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream6);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream13);
        java.nio.file.Path path15 = null;
        java.nio.file.FileVisitOption[] fileVisitOptionArray16 = new java.nio.file.FileVisitOption[] {};
        java.util.EnumSet<java.nio.file.FileVisitOption> fileVisitOptionSet18 = java.util.EnumSet.noneOf(java.nio.file.FileVisitOption.class);
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.file.FileVisitOption>) fileVisitOptionSet18, fileVisitOptionArray16);
        java.nio.file.LinkOption[] linkOptionArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create((org.apache.commons.compress.archivers.ArchiveOutputStream) arArchiveOutputStream14, path15, fileVisitOptionSet18, linkOptionArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "never" + "'", str11, "never");
        org.junit.Assert.assertNotNull(fileVisitOptionArray16);
        org.junit.Assert.assertNotNull(fileVisitOptionSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE cOMPRESSION_TYPE1 = org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + cOMPRESSION_TYPE1 + "' != '" + org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ZLIB + "'", cOMPRESSION_TYPE1.equals(org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ZLIB));
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        boolean boolean7 = zipArchiveOutputStream5.isSeekable();
        java.io.OutputStream outputStream8 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream8);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream8);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream12 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream8, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream12);
        java.lang.String str14 = zipArchiveOutputStream13.getEncoding();
        zipArchiveOutputStream13.setUseLanguageEncodingFlag(false);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream18 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13, "070701");
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode19 = org.apache.commons.compress.archivers.zip.Zip64Mode.Never;
        zipArchiveOutputStream13.setUseZip64(zip64Mode19);
        zipArchiveOutputStream5.setUseZip64(zip64Mode19);
        byte[] byteArray23 = new byte[] { (byte) -1 };
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray23);
        boolean boolean26 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray24, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream5.writePreamble(byteArray24, 6, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTF8" + "'", str14, "UTF8");
        org.junit.Assert.assertTrue("'" + zip64Mode19 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.Never + "'", zip64Mode19.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.Never));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet3 = dumpArchiveEntry2.getPermissions();
        int int4 = dumpArchiveEntry2.getHeaderHoles();
        dumpArchiveEntry2.setGroupId(0);
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE tYPE7 = dumpArchiveEntry2.getType();
        org.junit.Assert.assertNotNull(pERMISSIONSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + tYPE7 + "' != '" + org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN + "'", tYPE7.equals(org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN));
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.util.Date date1 = x000A_NTFS0.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger2 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        java.lang.String str3 = zipEightByteInteger2.toString();
        x000A_NTFS0.setModifyTime(zipEightByteInteger2);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = x000A_NTFS0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry8 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean9 = tarArchiveEntry8.isSparse();
        tarArchiveEntry8.setUserName("ZipLong value: 1");
        boolean boolean12 = tarArchiveEntry8.isStreamContiguous();
        java.util.Date date13 = tarArchiveEntry8.getLastModifiedDate();
        x000A_NTFS0.setCreateJavaTime(date13);
        java.util.Date date15 = x000A_NTFS0.getCreateJavaTime();
        byte[] byteArray21 = new byte[] { (byte) 88, (byte) 50, (byte) -1, (byte) 88, (byte) 75 };
        org.apache.commons.compress.archivers.tar.TarFile tarFile22 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray21);
        org.apache.commons.compress.archivers.tar.TarFile tarFile23 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray21);
        boolean boolean25 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray21, 156);
        // The following exception was thrown during execution in test generation
        try {
            x000A_NTFS0.parseFromCentralDirectoryData(byteArray21, 26127, (int) (byte) 76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26131");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(date1);
        org.junit.Assert.assertNotNull(zipEightByteInteger2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ZipEightByteInteger value: 0" + "'", str3, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Jun 20 13:19:28 CEST 2023");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Jun 20 13:19:28 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[88, 50, -1, 88, 75]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj2 = jarArchiveEntry1.clone();
        java.lang.Object obj3 = jarArchiveEntry1.clone();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long7 = tarArchiveEntry6.getDataOffset();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry15 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry15.setNames("", "ZipLong value: 1");
        int int19 = tarArchiveEntry15.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean23 = tarArchiveEntry22.isSparse();
        tarArchiveEntry22.setMode(26127);
        java.nio.file.attribute.FileTime fileTime26 = tarArchiveEntry22.getLastModifiedTime();
        tarArchiveEntry15.setModTime(fileTime26);
        cpioArchiveEntry11.setTime(fileTime26);
        tarArchiveEntry6.setStatusChangeTime(fileTime26);
        java.util.zip.ZipEntry zipEntry30 = jarArchiveEntry1.setCreationTime(fileTime26);
        java.lang.String str31 = jarArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField32 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField38 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField32, byteArray34, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger39 = null;
        zip64ExtendedInformationExtraField32.setRelativeHeaderOffset(zipEightByteInteger39);
        byte[] byteArray41 = zip64ExtendedInformationExtraField32.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField43 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray44 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray41, true, unparseableExtraField43);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray45 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray41);
        byte[] byteArray46 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(zipExtraFieldArray45);
        jarArchiveEntry1.setExtraFields(zipExtraFieldArray45);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry50 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long51 = tarArchiveEntry50.getDataOffset();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry55 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry59 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry59.setNames("", "ZipLong value: 1");
        int int63 = tarArchiveEntry59.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry66 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean67 = tarArchiveEntry66.isSparse();
        tarArchiveEntry66.setMode(26127);
        java.nio.file.attribute.FileTime fileTime70 = tarArchiveEntry66.getLastModifiedTime();
        tarArchiveEntry59.setModTime(fileTime70);
        cpioArchiveEntry55.setTime(fileTime70);
        tarArchiveEntry50.setStatusChangeTime(fileTime70);
        jarArchiveEntry1.setTime(fileTime70);
        java.lang.String str75 = jarArchiveEntry1.getName();
        long long76 = jarArchiveEntry1.getSize();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "070707");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "070707");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fileTime26);
        org.junit.Assert.assertNotNull(zipEntry30);
        org.junit.Assert.assertEquals(zipEntry30.toString(), "070707");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray44);
        org.junit.Assert.assertNotNull(zipExtraFieldArray45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(fileTime70);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "070707" + "'", str75, "070707");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream1 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(seekableByteChannel0);
        zipArchiveOutputStream1.setUseLanguageEncodingFlag(true);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField4 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField4, byteArray6, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = null;
        zip64ExtendedInformationExtraField4.setRelativeHeaderOffset(zipEightByteInteger11);
        byte[] byteArray13 = zip64ExtendedInformationExtraField4.getLocalFileDataData();
        byte[] byteArray14 = zip64ExtendedInformationExtraField4.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarFile tarFile16 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray14, true);
        byte[] byteArray17 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream1.write(byteArray17, 508, 2048);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        java.nio.file.Path path3 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("jar", seekableByteChannel2, path3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: jar");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.lang.String str1 = x5455_ExtendedTimestamp0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "0x5455 Zip Extra Field: Flags=0 " + "'", str1, "0x5455 Zip Extra Field: Flags=0 ");
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(file0, "ZipShort value: 20");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        zipArchiveOutputStream5.setUseLanguageEncodingFlag(false);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream5, "070701");
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream10, "070702");
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream10.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        java.nio.charset.Charset charset2 = null;
        int int3 = cpioArchiveEntry1.getHeaderPadCount(charset2);
        cpioArchiveEntry1.setGID((long) 156);
        long long6 = cpioArchiveEntry1.getRemoteDeviceMaj();
        cpioArchiveEntry1.setDeviceMaj(0L);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveEntry1.setRemoteDevice((long) 40960);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList3 = tarArchiveEntry2.getOrderedSparseHeaders();
        boolean boolean4 = tarArchiveEntry2.isPaxGNU1XSparse();
        tarArchiveEntry2.setNames("arj", "arj");
        tarArchiveEntry2.clearExtraPaxHeaders();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean12 = tarArchiveEntry11.isSparse();
        tarArchiveEntry11.setMode(26127);
        java.util.Date date15 = tarArchiveEntry11.getModTime();
        java.lang.String str16 = tarArchiveEntry11.getUserName();
        boolean boolean17 = tarArchiveEntry11.isSparse();
        boolean boolean18 = tarArchiveEntry2.equals(tarArchiveEntry11);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature21 = null;
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException22 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature21);
        org.apache.commons.compress.MemoryLimitException memoryLimitException23 = new org.apache.commons.compress.MemoryLimitException((long) 100, 10, (java.lang.Exception) unsupportedZipFeatureException22);
        boolean boolean24 = tarArchiveEntry2.equals((java.lang.Object) unsupportedZipFeatureException22);
        int int25 = tarArchiveEntry2.getDevMinor();
        boolean boolean26 = tarArchiveEntry2.isBlockDevice();
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Jun 20 13:19:28 CEST 2023");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry3.setNames("", "ZipLong value: 1");
        int int7 = tarArchiveEntry3.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry10 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean11 = tarArchiveEntry10.isSparse();
        tarArchiveEntry10.setMode(26127);
        java.nio.file.attribute.FileTime fileTime14 = tarArchiveEntry10.getLastModifiedTime();
        tarArchiveEntry3.setModTime(fileTime14);
        boolean boolean16 = tarArchiveEntry3.isPaxGNU1XSparse();
        boolean boolean17 = tarArchiveEntry3.isExtended();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(fileTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode0 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        byte[] byteArray1 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = extraFieldParsingMode0.onUnparseableExtraField(byteArray1, 512, 0, false, 3);
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix7 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort8 = x7875_NewUnix7.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = extraFieldParsingMode0.createExtraField(zipShort8);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker10 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = jarMarker10.getLocalFileDataLength();
        java.lang.String str12 = zipShort11.toString();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = extraFieldParsingMode0.createExtraField(zipShort11);
        org.junit.Assert.assertNotNull(extraFieldParsingMode0);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertNotNull(zipShort8);
        org.junit.Assert.assertNotNull(zipExtraField9);
        org.junit.Assert.assertNotNull(jarMarker10);
        org.junit.Assert.assertNotNull(zipShort11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ZipShort value: 0" + "'", str12, "ZipShort value: 0");
        org.junit.Assert.assertNotNull(zipExtraField13);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setName("ustar ");
        boolean boolean3 = sevenZArchiveEntry0.getHasCrc();
        sevenZArchiveEntry0.setCrcValue((long) 4);
        int int6 = sevenZArchiveEntry0.getCrc();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        char[] charArray6 = new char[] { '4', 'a', '#', '4', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZOutputFile sevenZOutputFile7 = new org.apache.commons.compress.archivers.sevenz.SevenZOutputFile(seekableByteChannel0, charArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4a#4 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4a#4 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, a, #, 4,  ]");
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        java.util.concurrent.ExecutorService executorService0 = null;
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator1 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry3 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = extraFieldParsingMode4.createExtraField(zipShort5);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = jarArchiveEntry3.getExtraField(zipShort5);
        jarArchiveEntry3.setMethod((int) '4');
        jarArchiveEntry3.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry3);
        zipArchiveEntry12.setTime((long) (byte) 1);
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier15 = null;
        java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable16 = parallelScatterZipCreator1.createCallable(zipArchiveEntry12, inputStreamSupplier15);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator17 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier18 = null;
        parallelScatterZipCreator17.addArchiveEntry(zipArchiveEntryRequestSupplier18);
        java.util.concurrent.ExecutorService executorService20 = null;
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator21 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService20);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry23 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode24 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort25 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField26 = extraFieldParsingMode24.createExtraField(zipShort25);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField27 = jarArchiveEntry23.getExtraField(zipShort25);
        jarArchiveEntry23.setMethod((int) '4');
        jarArchiveEntry23.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry32 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry23);
        zipArchiveEntry32.setTime((long) (byte) 1);
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier35 = null;
        java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable36 = parallelScatterZipCreator21.createCallable(zipArchiveEntry32, inputStreamSupplier35);
        parallelScatterZipCreator17.submitStreamAwareCallable(scatterZipOutputStreamCallable36);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier zipArchiveEntryRequestSupplier38 = null;
        parallelScatterZipCreator17.addArchiveEntry(zipArchiveEntryRequestSupplier38);
        java.util.concurrent.ExecutorService executorService40 = null;
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator41 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService40);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry43 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode44 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort45 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField46 = extraFieldParsingMode44.createExtraField(zipShort45);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField47 = jarArchiveEntry43.getExtraField(zipShort45);
        jarArchiveEntry43.setMethod((int) '4');
        jarArchiveEntry43.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry52 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry43);
        zipArchiveEntry52.setTime((long) (byte) 1);
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier55 = null;
        java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable56 = parallelScatterZipCreator41.createCallable(zipArchiveEntry52, inputStreamSupplier55);
        parallelScatterZipCreator17.submit(scatterZipOutputStreamCallable56);
        // The following exception was thrown during execution in test generation
        try {
            parallelScatterZipCreator1.submitStreamAwareCallable(scatterZipOutputStreamCallable56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode4);
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertNotNull(zipExtraField6);
        org.junit.Assert.assertNull(zipExtraField7);
        org.junit.Assert.assertNotNull(scatterZipOutputStreamCallable16);
        org.junit.Assert.assertNotNull(extraFieldParsingMode24);
        org.junit.Assert.assertNotNull(zipShort25);
        org.junit.Assert.assertNotNull(zipExtraField26);
        org.junit.Assert.assertNull(zipExtraField27);
        org.junit.Assert.assertNotNull(scatterZipOutputStreamCallable36);
        org.junit.Assert.assertNotNull(extraFieldParsingMode44);
        org.junit.Assert.assertNotNull(zipShort45);
        org.junit.Assert.assertNotNull(zipExtraField46);
        org.junit.Assert.assertNull(zipExtraField47);
        org.junit.Assert.assertNotNull(scatterZipOutputStreamCallable56);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile5 = new org.apache.commons.compress.archivers.zip.ZipFile(seekableByteChannel0, "TRAILER!!!", "00", true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit11 = jarArchiveEntry1.getGeneralPurposeBit();
        boolean boolean12 = generalPurposeBit11.usesDataDescriptor();
        generalPurposeBit11.useEncryption(true);
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.archivers.ArchiveStreamProvider> strMap15 = org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
        boolean boolean16 = generalPurposeBit11.equals((java.lang.Object) strMap15);
        generalPurposeBit11.useStrongEncryption(false);
        generalPurposeBit11.useDataDescriptor(true);
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix21 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        java.lang.Object obj22 = x7875_NewUnix21.clone();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField23 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray25 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField29 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField23, byteArray25, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger30 = null;
        zip64ExtendedInformationExtraField23.setRelativeHeaderOffset(zipEightByteInteger30);
        byte[] byteArray32 = zip64ExtendedInformationExtraField23.getLocalFileDataData();
        x7875_NewUnix21.parseFromCentralDirectoryData(byteArray32, (int) (byte) 76, (int) (byte) 88);
        // The following exception was thrown during execution in test generation
        try {
            generalPurposeBit11.encode(byteArray32, (int) (byte) 120);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 120");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertNotNull(generalPurposeBit11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "0x7875 Zip Extra Field: UID=1000 GID=1000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "0x7875 Zip Extra Field: UID=1000 GID=1000");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "0x7875 Zip Extra Field: UID=1000 GID=1000");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField29);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding1 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("compressionElapsed=-1687259939172ms, mergingElapsed=0ms");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: compressionElapsed=-1687259939172ms, mergingElapsed=0ms");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField3 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (byte) 75, true);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = resourceAlignmentExtraField3.getHeaderId();
        short short5 = resourceAlignmentExtraField3.getAlignment();
        short short6 = resourceAlignmentExtraField3.getAlignment();
        byte[] byteArray7 = resourceAlignmentExtraField3.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField8 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField("compression method", byteArray7);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker9 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort10 = jarMarker9.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = jarMarker9.getLocalFileDataLength();
        byte[] byteArray12 = jarMarker9.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            unicodePathExtraField8.parseFromLocalFileData(byteArray12, 75, (int) (byte) 120);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 75");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 75 + "'", short5 == (short) 75);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 75 + "'", short6 == (short) 75);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[75, -128]");
        org.junit.Assert.assertNotNull(jarMarker9);
        org.junit.Assert.assertNotNull(zipShort10);
        org.junit.Assert.assertNotNull(zipShort11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        java.nio.file.Path path0 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier1 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path0);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore2 = defaultBackingStoreSupplier1.get();
        java.nio.file.Path path3 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier4 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path3);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore5 = defaultBackingStoreSupplier4.get();
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor6 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore5);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream7 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore2, streamCompressor6);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore8 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor9 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore8);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream10 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore2, streamCompressor9);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter zipEntryWriter11 = scatterZipOutputStream10.zipEntryWriter();
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter zipEntryWriter12 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter(scatterZipOutputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest zipArchiveEntryRequest13 = null;
        // The following exception was thrown during execution in test generation
        try {
            scatterZipOutputStream10.addArchiveEntry(zipArchiveEntryRequest13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore2);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore5);
        org.junit.Assert.assertNotNull(streamCompressor6);
        org.junit.Assert.assertNotNull(streamCompressor9);
        org.junit.Assert.assertNotNull(zipEntryWriter11);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray10);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField13 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray11, false, unparseableExtraField13);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode16 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort17 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField18 = extraFieldParsingMode16.createExtraField(zipShort17);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode19 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort20 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField21 = extraFieldParsingMode19.createExtraField(zipShort20);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField22 = extraFieldParsingMode16.createExtraField(zipShort20);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray23 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray11, false, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode16);
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(zipExtraFieldArray23);
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseFromCentralDirectoryData(byteArray24, 4, 488);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
        org.junit.Assert.assertNotNull(extraFieldParsingMode16);
        org.junit.Assert.assertNotNull(zipShort17);
        org.junit.Assert.assertNotNull(zipExtraField18);
        org.junit.Assert.assertNotNull(extraFieldParsingMode19);
        org.junit.Assert.assertNotNull(zipShort20);
        org.junit.Assert.assertNotNull(zipExtraField21);
        org.junit.Assert.assertNotNull(zipExtraField22);
        org.junit.Assert.assertNotNull(zipExtraFieldArray23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        parallelScatterZipCreator0.writeTo(zipArchiveOutputStream6);
        zipArchiveOutputStream6.setFallbackToUTF8(true);
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode11 = org.apache.commons.compress.archivers.zip.Zip64Mode.Never;
        zipArchiveOutputStream6.setUseZip64(zip64Mode11);
        java.nio.file.Path path13 = null;
        java.nio.file.LinkOption[] linkOptionArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry16 = zipArchiveOutputStream6.createArchiveEntry(path13, "0\000", linkOptionArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
        org.junit.Assert.assertTrue("'" + zip64Mode11 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.Never + "'", zip64Mode11.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.Never));
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature1 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry3 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        byte[] byteArray5 = new byte[] { (byte) -1 };
        byte[] byteArray6 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray5);
        boolean boolean8 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray6, (int) (short) -1);
        jarArchiveEntry3.setExtra(byteArray6);
        jarArchiveEntry3.setComment("ZipLong value: 11");
        java.util.Date date12 = jarArchiveEntry3.getLastModifiedDate();
        java.util.Date date13 = jarArchiveEntry3.getLastModifiedDate();
        jarArchiveEntry3.setComment("070701");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException16 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature1, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry3);
        org.apache.commons.compress.archivers.dump.DumpArchiveException dumpArchiveException17 = new org.apache.commons.compress.archivers.dump.DumpArchiveException("0x5455 Zip Extra Field: Flags=10  Access:[Thu Jan 01 01:00:01 CET 1970] ", (java.lang.Throwable) unsupportedZipFeatureException16);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry18 = unsupportedZipFeatureException16.getEntry();
        org.junit.Assert.assertNotNull(feature1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(zipArchiveEntry18);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer1 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream2);
        long long5 = cpioArchiveInputStream3.skip((long) (byte) 100);
        cpioArchiveInputStream3.mark(6);
        boolean boolean8 = cpioArchiveInputStream3.markSupported();
        boolean boolean9 = cpioArchiveInputStream3.markSupported();
        closeableConsumer1.accept((java.io.Closeable) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = jarArchiveInputStream11.getNextZipEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry13 = null;
        boolean boolean14 = jarArchiveInputStream11.canReadEntryData(archiveEntry13);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = jarArchiveInputStream11.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream16 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream18 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) jarArchiveInputStream16, "ar");
        java.io.File file19 = null;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer20 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream21 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream22 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream21);
        long long24 = cpioArchiveInputStream22.skip((long) (byte) 100);
        cpioArchiveInputStream22.mark(6);
        boolean boolean27 = cpioArchiveInputStream22.markSupported();
        boolean boolean28 = cpioArchiveInputStream22.markSupported();
        closeableConsumer20.accept((java.io.Closeable) cpioArchiveInputStream22);
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand((java.io.InputStream) cpioArchiveInputStream18, file19, closeableConsumer20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(zipArchiveEntry12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(archiveEntry15);
        org.junit.Assert.assertNotNull(closeableConsumer20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder2 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder4 = builder2.withMaxMemoryLimitInKb(0);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder6 = builder2.withUseDefaultNameForUnnamedEntries(false);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder8 = builder2.withTryToRecoverBrokenArchives(false);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions9 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel0, "jar", sevenZFileOptions9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(sevenZFileOptions9);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime((long) 36864);
        int int3 = org.apache.commons.compress.archivers.zip.ZipShort.getValue(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(1021L, byteArray2, (int) (byte) 83, (int) (byte) 12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 92");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 33, 0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        long long4 = cpioArchiveInputStream1.getBytesRead();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField5 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField5, byteArray7, 0, 0, false);
        int int12 = cpioArchiveInputStream1.read(byteArray7);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarFile tarFile15 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray7, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean1 = sevenZArchiveEntry0.getHasLastModifiedDate();
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray2 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] {};
        sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date4 = sevenZArchiveEntry0.getAccessDate();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The entry doesn't have this timestamp");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(sevenZMethodConfigurationArray2);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray10);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField12 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray10);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField14 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField14, byteArray16, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger21 = null;
        zip64ExtendedInformationExtraField14.setRelativeHeaderOffset(zipEightByteInteger21);
        byte[] byteArray23 = zip64ExtendedInformationExtraField14.getLocalFileDataData();
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray23);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField25 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray23);
        unicodeCommentExtraField12.setUnicodeName(byteArray23);
        unicodeCommentExtraField12.setNameCRC32((long) (short) -1);
        byte[] byteArray29 = unicodeCommentExtraField12.getLocalFileDataData();
        byte[] byteArray30 = unicodeCommentExtraField12.getLocalFileDataData();
        long long31 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarFile tarFile33 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray30, "ZipLong value: 508");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ZipLong value: 508");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1021L + "'", long31 == 1021L);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        java.nio.charset.Charset charset2 = null;
        int int3 = cpioArchiveEntry1.getHeaderPadCount(charset2);
        boolean boolean4 = cpioArchiveEntry1.isBlockDevice();
        boolean boolean5 = cpioArchiveEntry1.isDirectory();
        cpioArchiveEntry1.setRemoteDeviceMin((long) 488);
        java.util.Date date8 = cpioArchiveEntry1.getLastModifiedDate();
        long long9 = cpioArchiveEntry1.getSize();
        boolean boolean10 = cpioArchiveEntry1.isBlockDevice();
        cpioArchiveEntry1.setRemoteDeviceMin((long) 61440);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        byte[] byteArray1 = new byte[] { (byte) -1 };
        byte[] byteArray2 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray1);
        long long3 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray1);
        boolean boolean5 = org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byteArray1, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = org.apache.commons.compress.archivers.zip.ZipShort.getValue(byteArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-1]");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 255L + "'", long3 == 255L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        java.nio.file.Path path0 = null;
        java.nio.file.LinkOption[] linkOptionArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry3 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry(path0, " \000", linkOptionArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE cOMPRESSION_TYPE1 = org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find((int) (short) 8);
        org.junit.Assert.assertNull(cOMPRESSION_TYPE1);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        int int11 = jarArchiveInputStream10.read();
        long long12 = jarArchiveInputStream10.getUncompressedCount();
        long long13 = jarArchiveInputStream10.getUncompressedCount();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = jarArchiveInputStream10.getNextEntry();
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(archiveEntry15);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray10);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField12 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray10);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField14 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField14, byteArray16, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger21 = null;
        zip64ExtendedInformationExtraField14.setRelativeHeaderOffset(zipEightByteInteger21);
        byte[] byteArray23 = zip64ExtendedInformationExtraField14.getLocalFileDataData();
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray23);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField25 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray23);
        unicodeCommentExtraField12.setUnicodeName(byteArray23);
        byte[] byteArray27 = unicodeCommentExtraField12.getUnicodeName();
        byte[] byteArray28 = unicodeCommentExtraField12.getUnicodeName();
        byte[] byteArray30 = new byte[] { (byte) -1 };
        byte[] byteArray31 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray30);
        long long32 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray30);
        boolean boolean34 = org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byteArray30, 0);
        unicodeCommentExtraField12.setUnicodeName(byteArray30);
        byte[] byteArray36 = unicodeCommentExtraField12.getLocalFileDataData();
        byte[] byteArray37 = unicodeCommentExtraField12.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField38 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray40 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField44 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField38, byteArray40, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger45 = null;
        zip64ExtendedInformationExtraField38.setRelativeHeaderOffset(zipEightByteInteger45);
        byte[] byteArray47 = zip64ExtendedInformationExtraField38.getLocalFileDataData();
        byte[] byteArray48 = zip64ExtendedInformationExtraField38.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarFile tarFile50 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray48, true);
        // The following exception was thrown during execution in test generation
        try {
            unicodeCommentExtraField12.parseFromCentralDirectoryData(byteArray48, 32, 24576);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 255L + "'", long32 == 255L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[1, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField44);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        zipArchiveOutputStream5.setUseLanguageEncodingFlag(false);
        zipArchiveOutputStream5.setMethod(0);
        java.io.OutputStream outputStream11 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream12 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream13 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream11);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream15 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream11, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream15);
        java.lang.String str17 = zipArchiveOutputStream16.getEncoding();
        boolean boolean18 = zipArchiveOutputStream16.isSeekable();
        java.io.OutputStream outputStream19 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream20 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream19);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream19);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream23 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream19, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream23);
        java.lang.String str25 = zipArchiveOutputStream24.getEncoding();
        zipArchiveOutputStream24.setUseLanguageEncodingFlag(false);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream29 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream24, "070701");
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode30 = org.apache.commons.compress.archivers.zip.Zip64Mode.Never;
        zipArchiveOutputStream24.setUseZip64(zip64Mode30);
        zipArchiveOutputStream16.setUseZip64(zip64Mode30);
        zipArchiveOutputStream5.setUseZip64(zip64Mode30);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream5.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTF8" + "'", str17, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "UTF8" + "'", str25, "UTF8");
        org.junit.Assert.assertTrue("'" + zip64Mode30 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.Never + "'", zip64Mode30.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.Never));
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode0 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField2 = extraFieldParsingMode0.createExtraField(zipShort1);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp3 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp3.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry8 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean9 = tarArchiveEntry8.isSparse();
        tarArchiveEntry8.setMode(26127);
        java.util.Date date12 = tarArchiveEntry8.getModTime();
        x5455_ExtendedTimestamp3.setModifyJavaTime(date12);
        byte[] byteArray15 = new byte[] { (byte) -1 };
        byte[] byteArray16 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray15);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = extraFieldParsingMode0.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp3, byteArray16, 0, 32768, true);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort21 = x5455_ExtendedTimestamp3.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp22 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp22.setFlags((byte) 75);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField26 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray28 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField32 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField26, byteArray28, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger33 = null;
        zip64ExtendedInformationExtraField26.setRelativeHeaderOffset(zipEightByteInteger33);
        byte[] byteArray35 = zip64ExtendedInformationExtraField26.getLocalFileDataData();
        byte[] byteArray36 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray35);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField37 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray35);
        boolean boolean38 = x5455_ExtendedTimestamp22.equals((java.lang.Object) unicodeCommentExtraField37);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort39 = x5455_ExtendedTimestamp22.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry42 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long43 = tarArchiveEntry42.getDataOffset();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry47 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry51 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry51.setNames("", "ZipLong value: 1");
        int int55 = tarArchiveEntry51.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry58 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean59 = tarArchiveEntry58.isSparse();
        tarArchiveEntry58.setMode(26127);
        java.nio.file.attribute.FileTime fileTime62 = tarArchiveEntry58.getLastModifiedTime();
        tarArchiveEntry51.setModTime(fileTime62);
        cpioArchiveEntry47.setTime(fileTime62);
        tarArchiveEntry42.setStatusChangeTime(fileTime62);
        x5455_ExtendedTimestamp22.setModifyFileTime(fileTime62);
        x5455_ExtendedTimestamp3.setModifyFileTime(fileTime62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = x5455_ExtendedTimestamp3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Can only convert non-negative integers between [0,255] to byte: [-1]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode0);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipExtraField2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Jun 20 13:19:30 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(zipShort21);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zipShort39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(fileTime62);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod0 = org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE;
        org.junit.Assert.assertTrue("'" + sevenZMethod0 + "' != '" + org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE + "'", sevenZMethod0.equals(org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE));
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ustar\000", (byte) 54);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = tarArchiveEntry2.getExtraPaxHeaders();
        java.nio.file.attribute.FileTime fileTime4 = tarArchiveEntry2.getLastModifiedTime();
        boolean boolean5 = tarArchiveEntry2.isGlobalPaxHeader();
        tarArchiveEntry2.setDataOffset((long) (byte) 55);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        java.nio.charset.Charset charset10 = null;
        int int11 = cpioArchiveEntry9.getHeaderPadCount(charset10);
        boolean boolean12 = cpioArchiveEntry9.isBlockDevice();
        boolean boolean13 = cpioArchiveEntry9.isDirectory();
        cpioArchiveEntry9.setRemoteDeviceMin((long) 488);
        java.util.Date date16 = cpioArchiveEntry9.getLastModifiedDate();
        long long17 = cpioArchiveEntry9.getSize();
        boolean boolean18 = cpioArchiveEntry9.isBlockDevice();
        long long19 = cpioArchiveEntry9.getMode();
        boolean boolean20 = tarArchiveEntry2.equals((java.lang.Object) long19);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(fileTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 32768L + "'", long19 == 32768L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        int int11 = jarArchiveInputStream10.read();
        long long12 = jarArchiveInputStream10.getUncompressedCount();
        long long14 = jarArchiveInputStream10.skip((long) 1000);
        long long16 = jarArchiveInputStream10.skip((long) (byte) 53);
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveInputStream10.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        byte[] byteArray2 = new byte[] { (byte) -1 };
        byte[] byteArray3 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray2);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField4 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField("ZipLong value: 1", byteArray3);
        org.apache.commons.compress.archivers.tar.TarFile tarFile5 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray3);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byteArray3, 16384, 8192);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16384");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1]");
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException unsupportedCompressionAlgorithmException2 = new org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException("compressionElapsed=-1687259892275ms, mergingElapsed=0ms");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature7 = null;
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException8 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature7);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry9 = unsupportedZipFeatureException8.getEntry();
        org.apache.commons.compress.MemoryLimitException memoryLimitException10 = new org.apache.commons.compress.MemoryLimitException((long) '4', 11, (java.lang.Exception) unsupportedZipFeatureException8);
        org.apache.commons.compress.MemoryLimitException memoryLimitException11 = new org.apache.commons.compress.MemoryLimitException((long) 16384, (int) (byte) 100, (java.lang.Exception) unsupportedZipFeatureException8);
        unsupportedCompressionAlgorithmException2.addSuppressed((java.lang.Throwable) unsupportedZipFeatureException8);
        org.apache.commons.compress.archivers.dump.DumpArchiveException dumpArchiveException13 = new org.apache.commons.compress.archivers.dump.DumpArchiveException("070707", (java.lang.Throwable) unsupportedZipFeatureException8);
        org.junit.Assert.assertNull(zipArchiveEntry9);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        dumpArchiveEntry2.setVolume(488);
        java.lang.String str5 = dumpArchiveEntry2.getSimpleName();
        boolean boolean6 = dumpArchiveEntry2.isChrDev();
        int int7 = dumpArchiveEntry2.getHeaderHoles();
        boolean boolean8 = dumpArchiveEntry2.isBlkDev();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "070707" + "'", str5, "070707");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj2 = jarArchiveEntry1.clone();
        int int3 = jarArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry1.setNameSource(nameSource4);
        jarArchiveEntry1.setExternalAttributes((long) ' ');
        java.lang.String str8 = jarArchiveEntry1.getComment();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "070707");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + nameSource4 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource4.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory();
        byte[] byteArray4 = new byte[] { (byte) -3, (byte) 120, (byte) 76 };
        // The following exception was thrown during execution in test generation
        try {
            x0016_CertificateIdForCentralDirectory0.parseFromCentralDirectoryData(byteArray4, 6, 1024);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-3, 120, 76]");
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime((long) 4);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray1);
        int int3 = zipLong2.getIntValue();
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField6 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (byte) 75, true);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = resourceAlignmentExtraField6.getHeaderId();
        short short8 = resourceAlignmentExtraField6.getAlignment();
        short short9 = resourceAlignmentExtraField6.getAlignment();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort10 = resourceAlignmentExtraField6.getCentralDirectoryLength();
        boolean boolean11 = zipLong2.equals((java.lang.Object) zipShort10);
        java.util.Date date12 = org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(zipLong2);
        java.lang.Object obj13 = zipLong2.clone();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 0, 33, 0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2162688 + "'", int3 == 2162688);
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertTrue("'" + short8 + "' != '" + (short) 75 + "'", short8 == (short) 75);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 75 + "'", short9 == (short) 75);
        org.junit.Assert.assertNotNull(zipShort10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Tue Jan 01 00:00:00 CET 1980");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "ZipLong value: 2162688");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "ZipLong value: 2162688");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "ZipLong value: 2162688");
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.compress.archivers.dump.DumpArchiveException dumpArchiveException1 = new org.apache.commons.compress.archivers.dump.DumpArchiveException(throwable0);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        java.util.concurrent.ExecutorService executorService0 = null;
        java.util.concurrent.ExecutorService executorService1 = null;
        java.nio.file.Path path2 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier3 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path2);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore4 = defaultBackingStoreSupplier3.get();
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator5 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService1, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier3);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator6 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier3);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator7 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream8 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream8);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream8);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream12 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream8, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream12);
        java.lang.String str14 = zipArchiveOutputStream13.getEncoding();
        parallelScatterZipCreator7.writeTo(zipArchiveOutputStream13);
        zipArchiveOutputStream13.setFallbackToUTF8(true);
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode18 = org.apache.commons.compress.archivers.zip.Zip64Mode.Never;
        zipArchiveOutputStream13.setUseZip64(zip64Mode18);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream20 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13, "UTF8");
        // The following exception was thrown during execution in test generation
        try {
            parallelScatterZipCreator6.writeTo(zipArchiveOutputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTF8" + "'", str14, "UTF8");
        org.junit.Assert.assertTrue("'" + zip64Mode18 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.Never + "'", zip64Mode18.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.Never));
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField3 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (byte) 75, true);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = resourceAlignmentExtraField3.getHeaderId();
        short short5 = resourceAlignmentExtraField3.getAlignment();
        short short6 = resourceAlignmentExtraField3.getAlignment();
        byte[] byteArray7 = resourceAlignmentExtraField3.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField8 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField("compression method", byteArray7);
        byte[] byteArray10 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) (short) 2);
        // The following exception was thrown during execution in test generation
        try {
            unicodePathExtraField8.parseFromLocalFileData(byteArray10, (int) (byte) -3, (int) (byte) 50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 75 + "'", short5 == (short) 75);
        org.junit.Assert.assertTrue("'" + short6 + "' != '" + (short) 75 + "'", short6 == (short) 75);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[75, -128]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[2, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField3 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField3, byteArray5, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger10 = null;
        zip64ExtendedInformationExtraField3.setRelativeHeaderOffset(zipEightByteInteger10);
        byte[] byteArray12 = zip64ExtendedInformationExtraField3.getLocalFileDataData();
        byte[] byteArray13 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray12);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField14 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray12);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField16 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField22 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField16, byteArray18, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger23 = null;
        zip64ExtendedInformationExtraField16.setRelativeHeaderOffset(zipEightByteInteger23);
        byte[] byteArray25 = zip64ExtendedInformationExtraField16.getLocalFileDataData();
        byte[] byteArray26 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray25);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField27 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray25);
        unicodeCommentExtraField14.setUnicodeName(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile29 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel0, "xapk", byteArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        java.io.File file0 = null;
        char[] charArray3 = new char[] { 'a', 'a' };
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder4 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder6 = builder4.withMaxMemoryLimitInKb(0);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder8 = builder4.withUseDefaultNameForUnnamedEntries(false);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder10 = builder8.withUseDefaultNameForUnnamedEntries(true);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder12 = builder8.withTryToRecoverBrokenArchives(false);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions13 = builder8.build();
        boolean boolean14 = sevenZFileOptions13.getTryToRecoverBrokenArchives();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile15 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(file0, charArray3, sevenZFileOptions13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "aa");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "aa");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[a, a]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(sevenZFileOptions13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean4 = tarArchiveEntry3.isSparse();
        tarArchiveEntry3.setMode(26127);
        java.util.Date date7 = tarArchiveEntry3.getModTime();
        sevenZArchiveEntry0.setLastModifiedDate(date7);
        sevenZArchiveEntry0.setHasLastModifiedDate(false);
        boolean boolean11 = sevenZArchiveEntry0.getHasCreationDate();
        sevenZArchiveEntry0.setCrc((int) ' ');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Jun 20 13:19:31 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile4 = new org.apache.commons.compress.archivers.zip.ZipFile(file0, "0x5455 Zip Extra Field: Flags=1  Modify:[Sat Feb 19 06:19:12 CET 1972] ", true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = zip64ExtendedInformationExtraField0.getSize();
        zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(false, false, true, true);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField7 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong8 = null;
        zip64ExtendedInformationExtraField7.setDiskStartNumber(zipLong8);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS10 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.util.Date date11 = x000A_NTFS10.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger12 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        java.lang.String str13 = zipEightByteInteger12.toString();
        x000A_NTFS10.setModifyTime(zipEightByteInteger12);
        byte[] byteArray15 = x000A_NTFS10.getLocalFileDataData();
        java.nio.file.attribute.FileTime fileTime16 = x000A_NTFS10.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger17 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray18 = zipEightByteInteger17.getBytes();
        java.lang.String str19 = zipEightByteInteger17.toString();
        x000A_NTFS10.setAccessTime(zipEightByteInteger17);
        zip64ExtendedInformationExtraField7.setRelativeHeaderOffset(zipEightByteInteger17);
        zip64ExtendedInformationExtraField0.setCompressedSize(zipEightByteInteger17);
        org.junit.Assert.assertNull(zipEightByteInteger1);
        org.junit.Assert.assertNull(date11);
        org.junit.Assert.assertNotNull(zipEightByteInteger12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ZipEightByteInteger value: 0" + "'", str13, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(fileTime16);
        org.junit.Assert.assertNotNull(zipEightByteInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZipEightByteInteger value: 0" + "'", str19, "ZipEightByteInteger value: 0");
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isSparse();
        tarArchiveEntry2.setMode(26127);
        java.util.Date date6 = tarArchiveEntry2.getModTime();
        java.lang.String str7 = tarArchiveEntry2.getUserName();
        boolean boolean8 = tarArchiveEntry2.isSparse();
        boolean boolean9 = tarArchiveEntry2.isSparse();
        tarArchiveEntry2.setUserId(96);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jun 20 13:19:31 CEST 2023");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = jarArchiveInputStream10.getNextZipEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry12 = null;
        boolean boolean13 = jarArchiveInputStream10.canReadEntryData(archiveEntry12);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = jarArchiveInputStream10.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = jarArchiveInputStream10.getNextEntry();
        int int16 = jarArchiveInputStream10.getCount();
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(zipArchiveEntry11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(archiveEntry14);
        org.junit.Assert.assertNull(archiveEntry15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarFile tarFile5 = new org.apache.commons.compress.archivers.tar.TarFile(seekableByteChannel0, (int) (short) 0, 65535, "ZipLong value: 1", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ZipLong value: 1");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj2 = jarArchiveEntry1.clone();
        jarArchiveEntry1.setDiskNumberStart((long) (byte) 10);
        jarArchiveEntry1.setCrc((long) (byte) 75);
        java.nio.file.attribute.FileTime fileTime7 = jarArchiveEntry1.getLastAccessTime();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "070707");
        org.junit.Assert.assertNull(fileTime7);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData0 = new org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = unparseableExtraFieldData0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = unparseableExtraFieldData0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = unparseableExtraFieldData0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField4 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField4, byteArray6, 0, 0, false);
        // The following exception was thrown during execution in test generation
        try {
            unparseableExtraFieldData0.parseFromLocalFileData(byteArray6, (int) (short) -1, 488);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField10);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        zipArchiveOutputStream5.setUseLanguageEncodingFlag(false);
        zipArchiveOutputStream5.setMethod(0);
        zipArchiveOutputStream5.setLevel(0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry14 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        java.nio.charset.Charset charset15 = null;
        int int16 = cpioArchiveEntry14.getHeaderPadCount(charset15);
        long long17 = cpioArchiveEntry14.getDeviceMaj();
        boolean boolean18 = cpioArchiveEntry14.isDirectory();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS19 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.util.Date date20 = x000A_NTFS19.getCreateJavaTime();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry22 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        byte[] byteArray24 = new byte[] { (byte) -1 };
        byte[] byteArray25 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray24);
        boolean boolean27 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray25, (int) (short) -1);
        jarArchiveEntry22.setExtra(byteArray25);
        jarArchiveEntry22.setComment("ZipLong value: 11");
        java.util.Date date31 = jarArchiveEntry22.getLastModifiedDate();
        java.util.Date date32 = jarArchiveEntry22.getLastModifiedDate();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry34 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.nio.file.attribute.FileTime fileTime35 = jarArchiveEntry34.getLastAccessTime();
        jarArchiveEntry34.setMethod(424935705);
        jarArchiveEntry34.setExternalAttributes((long) (byte) 4);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode40 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort41 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField42 = extraFieldParsingMode40.createExtraField(zipShort41);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp43 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp43.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry48 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean49 = tarArchiveEntry48.isSparse();
        tarArchiveEntry48.setMode(26127);
        java.util.Date date52 = tarArchiveEntry48.getModTime();
        x5455_ExtendedTimestamp43.setModifyJavaTime(date52);
        byte[] byteArray55 = new byte[] { (byte) -1 };
        byte[] byteArray56 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray55);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField60 = extraFieldParsingMode40.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp43, byteArray56, 0, 32768, true);
        java.nio.file.attribute.FileTime fileTime61 = null;
        x5455_ExtendedTimestamp43.setAccessFileTime(fileTime61);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong63 = x5455_ExtendedTimestamp43.getCreateTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry66 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ustar\000", (byte) 54);
        java.util.Map<java.lang.String, java.lang.String> strMap67 = tarArchiveEntry66.getExtraPaxHeaders();
        java.nio.file.attribute.FileTime fileTime68 = tarArchiveEntry66.getLastModifiedTime();
        x5455_ExtendedTimestamp43.setModifyFileTime(fileTime68);
        java.util.zip.ZipEntry zipEntry70 = jarArchiveEntry34.setCreationTime(fileTime68);
        java.util.zip.ZipEntry zipEntry71 = jarArchiveEntry22.setLastModifiedTime(fileTime68);
        x000A_NTFS19.setAccessFileTime(fileTime68);
        cpioArchiveEntry14.setTime(fileTime68);
        short short74 = cpioArchiveEntry14.getFormat();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField75 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray77 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField81 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField75, byteArray77, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger82 = null;
        zip64ExtendedInformationExtraField75.setRelativeHeaderOffset(zipEightByteInteger82);
        byte[] byteArray84 = zip64ExtendedInformationExtraField75.getLocalFileDataData();
        byte[] byteArray85 = zip64ExtendedInformationExtraField75.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarFile tarFile87 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray85, true);
        boolean boolean88 = cpioArchiveEntry14.equals((java.lang.Object) byteArray85);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream5.write(byteArray85, (int) (byte) 1, 1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(date20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNull(fileTime35);
        org.junit.Assert.assertNotNull(extraFieldParsingMode40);
        org.junit.Assert.assertNotNull(zipShort41);
        org.junit.Assert.assertNotNull(zipExtraField42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Tue Jun 20 13:19:31 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertNotNull(zipExtraField60);
        org.junit.Assert.assertNull(zipLong63);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(fileTime68);
        org.junit.Assert.assertNotNull(zipEntry70);
        org.junit.Assert.assertEquals(zipEntry70.toString(), "070707");
        org.junit.Assert.assertNotNull(zipEntry71);
        org.junit.Assert.assertEquals(zipEntry71.toString(), "070707");
        org.junit.Assert.assertTrue("'" + short74 + "' != '" + (short) 1 + "'", short74 == (short) 1);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField81);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        arArchiveOutputStream2.finish();
        // The following exception was thrown during execution in test generation
        try {
            arArchiveOutputStream2.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry2 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("070707", (long) '4');
        java.util.Date date3 = arArchiveEntry2.getLastModifiedDate();
        int int4 = arArchiveEntry2.getGroupId();
        boolean boolean5 = arArchiveEntry2.isDirectory();
        int int6 = arArchiveEntry2.getGroupId();
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Jun 20 13:19:32 CEST 2023");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        java.nio.file.Path path1 = null;
        java.nio.file.LinkOption linkOption3 = null;
        java.nio.file.LinkOption[] linkOptionArray4 = new java.nio.file.LinkOption[] { linkOption3 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 10, path1, "splitting", linkOptionArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(linkOptionArray4);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet3 = dumpArchiveEntry2.getPermissions();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry5 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode6 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = extraFieldParsingMode6.createExtraField(zipShort7);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = jarArchiveEntry5.getExtraField(zipShort7);
        jarArchiveEntry5.setMethod((int) '4');
        jarArchiveEntry5.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry5);
        jarArchiveEntry5.setVersionMadeBy(508);
        boolean boolean17 = dumpArchiveEntry2.equals((java.lang.Object) 508);
        boolean boolean18 = dumpArchiveEntry2.isSocket();
        java.lang.String str19 = dumpArchiveEntry2.getName();
        boolean boolean20 = dumpArchiveEntry2.isBlkDev();
        java.util.Date date21 = dumpArchiveEntry2.getLastModifiedDate();
        org.junit.Assert.assertNotNull(pERMISSIONSet3);
        org.junit.Assert.assertNotNull(extraFieldParsingMode6);
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertNotNull(zipExtraField8);
        org.junit.Assert.assertNull(zipExtraField9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "`\n" + "'", str19, "`\n");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer1 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream2);
        long long5 = cpioArchiveInputStream3.skip((long) (byte) 100);
        cpioArchiveInputStream3.mark(6);
        boolean boolean8 = cpioArchiveInputStream3.markSupported();
        boolean boolean9 = cpioArchiveInputStream3.markSupported();
        closeableConsumer1.accept((java.io.Closeable) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = jarArchiveInputStream11.getNextZipEntry();
        java.io.File file13 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream11, file13);
        byte[] byteArray20 = new byte[] { (byte) 88, (byte) 50, (byte) -1, (byte) 88, (byte) 75 };
        org.apache.commons.compress.archivers.tar.TarFile tarFile21 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray20);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveEntry> tarArchiveEntryList22 = tarFile21.getEntries();
        java.nio.file.Path path23 = null;
        expander0.expand(tarFile21, path23);
        java.nio.channels.SeekableByteChannel seekableByteChannel26 = null;
        java.nio.file.Path path27 = null;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer28 = org.apache.commons.compress.archivers.examples.CloseableConsumer.CLOSING_CONSUMER;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("always", seekableByteChannel26, path27, closeableConsumer28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: \"ch\" is null!");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(zipArchiveEntry12);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[88, 50, -1, 88, 75]");
        org.junit.Assert.assertNotNull(tarArchiveEntryList22);
        org.junit.Assert.assertNotNull(closeableConsumer28);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer1 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream2);
        long long5 = cpioArchiveInputStream3.skip((long) (byte) 100);
        cpioArchiveInputStream3.mark(6);
        boolean boolean8 = cpioArchiveInputStream3.markSupported();
        boolean boolean9 = cpioArchiveInputStream3.markSupported();
        closeableConsumer1.accept((java.io.Closeable) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = jarArchiveInputStream11.getNextZipEntry();
        java.io.File file13 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream11, file13);
        byte[] byteArray20 = new byte[] { (byte) 88, (byte) 50, (byte) -1, (byte) 88, (byte) 75 };
        org.apache.commons.compress.archivers.tar.TarFile tarFile21 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray20);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveEntry> tarArchiveEntryList22 = tarFile21.getEntries();
        java.nio.file.Path path23 = null;
        expander0.expand(tarFile21, path23);
        java.io.InputStream inputStream25 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream26 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream25);
        long long28 = cpioArchiveInputStream26.skip((long) (byte) 100);
        cpioArchiveInputStream26.mark(4);
        java.nio.file.Path path31 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) cpioArchiveInputStream26, path31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(zipArchiveEntry12);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[88, 50, -1, 88, 75]");
        org.junit.Assert.assertNotNull(tarArchiveEntryList22);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0, (int) (byte) 76, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Block size must be a multiple of 512 bytes. Attempt to use set size of 76");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile x0015_CertificateIdForFile0 = new org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm1 = x0015_CertificateIdForFile0.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x0015_CertificateIdForFile0.getHeaderId();
        java.io.InputStream inputStream3 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream3);
        long long6 = cpioArchiveInputStream4.skip((long) (byte) 100);
        cpioArchiveInputStream4.mark(6);
        boolean boolean9 = cpioArchiveInputStream4.markSupported();
        boolean boolean10 = cpioArchiveInputStream4.markSupported();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream4, "arj", false, true);
        byte[] byteArray19 = new byte[] { (byte) 52, (byte) 54, (byte) 100, (byte) 51 };
        int int22 = zipArchiveInputStream14.read(byteArray19, (int) '#', (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            x0015_CertificateIdForFile0.parseFromCentralDirectoryData(byteArray19, 61440, 32778);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(hashAlgorithm1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[52, 54, 100, 51]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        long long4 = cpioArchiveInputStream1.getBytesRead();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1, 100);
        int int7 = tarArchiveInputStream6.getRecordSize();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream8 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream6);
        // The following exception was thrown during execution in test generation
        try {
            arArchiveInputStream8.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 512 + "'", int7 == 512);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm2 = x0017_StrongEncryptionHeader0.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField4 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField4, byteArray6, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = null;
        zip64ExtendedInformationExtraField4.setRelativeHeaderOffset(zipEightByteInteger11);
        byte[] byteArray13 = zip64ExtendedInformationExtraField4.getLocalFileDataData();
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray13);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField15 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray13);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField17 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField23 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField17, byteArray19, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger24 = null;
        zip64ExtendedInformationExtraField17.setRelativeHeaderOffset(zipEightByteInteger24);
        byte[] byteArray26 = zip64ExtendedInformationExtraField17.getLocalFileDataData();
        byte[] byteArray27 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray26);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField28 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray26);
        unicodeCommentExtraField15.setUnicodeName(byteArray26);
        byte[] byteArray30 = unicodeCommentExtraField15.getUnicodeName();
        byte[] byteArray31 = unicodeCommentExtraField15.getUnicodeName();
        byte[] byteArray33 = new byte[] { (byte) -1 };
        byte[] byteArray34 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray33);
        long long35 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray33);
        boolean boolean37 = org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byteArray33, 0);
        unicodeCommentExtraField15.setUnicodeName(byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseFromCentralDirectoryData(byteArray33, (int) (short) 100, 26128);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNull(hashAlgorithm2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 255L + "'", long35 == 255L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean1 = sevenZArchiveEntry0.getHasLastModifiedDate();
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray2 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] {};
        sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray2);
        java.nio.file.attribute.FileTime fileTime4 = null;
        sevenZArchiveEntry0.setLastModifiedTime(fileTime4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date6 = sevenZArchiveEntry0.getCreationDate();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The entry doesn't have this timestamp");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(sevenZMethodConfigurationArray2);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10, 29127, 60011, "dump", true);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveInputStream15.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0);
        long long6 = tarArchiveOutputStream5.getBytesWritten();
        tarArchiveOutputStream5.setBigNumberMode(0);
        long long9 = tarArchiveOutputStream5.getBytesWritten();
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream5.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (byte) 1);
        java.lang.String str3 = zipLong2.toString();
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong2);
        byte[] byteArray5 = zipLong2.getBytes();
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray5, zipEncoding6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ZipLong value: 1" + "'", str3, "ZipLong value: 1");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 0, 0, 0]");
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream2 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream0);
        tarArchiveInputStream2.reset();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream2, 64, 2526);
        int int7 = tarArchiveInputStream6.getRecordSize();
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveInputStream6.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2526 + "'", int7 == 2526);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry3.setNames("", "ZipLong value: 1");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        java.nio.charset.Charset charset9 = null;
        int int10 = cpioArchiveEntry8.getHeaderPadCount(charset9);
        long long11 = cpioArchiveEntry8.getDeviceMaj();
        boolean boolean12 = cpioArchiveEntry8.isDirectory();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS13 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.util.Date date14 = x000A_NTFS13.getCreateJavaTime();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry16 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        byte[] byteArray18 = new byte[] { (byte) -1 };
        byte[] byteArray19 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray18);
        boolean boolean21 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray19, (int) (short) -1);
        jarArchiveEntry16.setExtra(byteArray19);
        jarArchiveEntry16.setComment("ZipLong value: 11");
        java.util.Date date25 = jarArchiveEntry16.getLastModifiedDate();
        java.util.Date date26 = jarArchiveEntry16.getLastModifiedDate();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry28 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.nio.file.attribute.FileTime fileTime29 = jarArchiveEntry28.getLastAccessTime();
        jarArchiveEntry28.setMethod(424935705);
        jarArchiveEntry28.setExternalAttributes((long) (byte) 4);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode34 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort35 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField36 = extraFieldParsingMode34.createExtraField(zipShort35);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp37 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp37.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry42 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean43 = tarArchiveEntry42.isSparse();
        tarArchiveEntry42.setMode(26127);
        java.util.Date date46 = tarArchiveEntry42.getModTime();
        x5455_ExtendedTimestamp37.setModifyJavaTime(date46);
        byte[] byteArray49 = new byte[] { (byte) -1 };
        byte[] byteArray50 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray49);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField54 = extraFieldParsingMode34.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp37, byteArray50, 0, 32768, true);
        java.nio.file.attribute.FileTime fileTime55 = null;
        x5455_ExtendedTimestamp37.setAccessFileTime(fileTime55);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong57 = x5455_ExtendedTimestamp37.getCreateTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry60 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ustar\000", (byte) 54);
        java.util.Map<java.lang.String, java.lang.String> strMap61 = tarArchiveEntry60.getExtraPaxHeaders();
        java.nio.file.attribute.FileTime fileTime62 = tarArchiveEntry60.getLastModifiedTime();
        x5455_ExtendedTimestamp37.setModifyFileTime(fileTime62);
        java.util.zip.ZipEntry zipEntry64 = jarArchiveEntry28.setCreationTime(fileTime62);
        java.util.zip.ZipEntry zipEntry65 = jarArchiveEntry16.setLastModifiedTime(fileTime62);
        x000A_NTFS13.setAccessFileTime(fileTime62);
        cpioArchiveEntry8.setTime(fileTime62);
        tarArchiveEntry3.setLastAccessTime(fileTime62);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(date14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNull(fileTime29);
        org.junit.Assert.assertNotNull(extraFieldParsingMode34);
        org.junit.Assert.assertNotNull(zipShort35);
        org.junit.Assert.assertNotNull(zipExtraField36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Jun 20 13:19:33 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1]");
        org.junit.Assert.assertNotNull(zipExtraField54);
        org.junit.Assert.assertNull(zipLong57);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(fileTime62);
        org.junit.Assert.assertNotNull(zipEntry64);
        org.junit.Assert.assertEquals(zipEntry64.toString(), "070707");
        org.junit.Assert.assertNotNull(zipEntry65);
        org.junit.Assert.assertEquals(zipEntry65.toString(), "070707");
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet3 = dumpArchiveEntry2.getPermissions();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry5 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode6 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = extraFieldParsingMode6.createExtraField(zipShort7);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = jarArchiveEntry5.getExtraField(zipShort7);
        jarArchiveEntry5.setMethod((int) '4');
        jarArchiveEntry5.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry5);
        jarArchiveEntry5.setVersionMadeBy(508);
        boolean boolean17 = dumpArchiveEntry2.equals((java.lang.Object) 508);
        boolean boolean18 = dumpArchiveEntry2.isSocket();
        java.util.Date date19 = dumpArchiveEntry2.getLastModifiedDate();
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE sEGMENT_TYPE20 = dumpArchiveEntry2.getHeaderType();
        int int21 = dumpArchiveEntry2.getMode();
        org.junit.Assert.assertNotNull(pERMISSIONSet3);
        org.junit.Assert.assertNotNull(extraFieldParsingMode6);
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertNotNull(zipExtraField8);
        org.junit.Assert.assertNull(zipExtraField9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNull(sEGMENT_TYPE20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile2 = new org.apache.commons.compress.archivers.zip.ZipFile(file0, "always");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        java.nio.file.Path path5 = null;
        java.nio.file.LinkOption[] linkOptionArray7 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = cpioArchiveOutputStream4.createArchiveEntry(path5, "ZipShort value: 21589", linkOptionArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(linkOptionArray7);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger0 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray1 = zipEightByteInteger0.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byteArray1, 256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipEightByteInteger0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        java.util.concurrent.ExecutorService executorService0 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveStructSparse tarArchiveStructSparse3 = new org.apache.commons.compress.archivers.tar.TarArchiveStructSparse((long) 9, (long) (short) 1);
        long long4 = tarArchiveStructSparse3.getNumbytes();
        java.util.concurrent.ExecutorService executorService5 = null;
        java.util.concurrent.ExecutorService executorService6 = null;
        java.nio.file.Path path7 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier8 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path7);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore9 = defaultBackingStoreSupplier8.get();
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator10 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService6, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier8);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator11 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService5, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier8);
        boolean boolean12 = tarArchiveStructSparse3.equals((java.lang.Object) defaultBackingStoreSupplier8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator14 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier8, 61440);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Compression level is expected between -1~9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean1 = sevenZArchiveEntry0.getHasLastModifiedDate();
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray2 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] {};
        sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray2);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList7 = tarArchiveEntry6.getOrderedSparseHeaders();
        boolean boolean8 = tarArchiveEntry6.isPaxGNU1XSparse();
        tarArchiveEntry6.setNames("arj", "arj");
        tarArchiveEntry6.clearExtraPaxHeaders();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry15 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean16 = tarArchiveEntry15.isSparse();
        tarArchiveEntry15.setMode(26127);
        java.util.Date date19 = tarArchiveEntry15.getModTime();
        java.lang.String str20 = tarArchiveEntry15.getUserName();
        boolean boolean21 = tarArchiveEntry15.isSparse();
        boolean boolean22 = tarArchiveEntry6.equals(tarArchiveEntry15);
        byte byte23 = tarArchiveEntry6.getLinkFlag();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp24 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp24.setFlags((byte) 75);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField28 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField34 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField28, byteArray30, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger35 = null;
        zip64ExtendedInformationExtraField28.setRelativeHeaderOffset(zipEightByteInteger35);
        byte[] byteArray37 = zip64ExtendedInformationExtraField28.getLocalFileDataData();
        byte[] byteArray38 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray37);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField39 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray37);
        boolean boolean40 = x5455_ExtendedTimestamp24.equals((java.lang.Object) unicodeCommentExtraField39);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort41 = x5455_ExtendedTimestamp24.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry44 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long45 = tarArchiveEntry44.getDataOffset();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry49 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry53 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry53.setNames("", "ZipLong value: 1");
        int int57 = tarArchiveEntry53.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry60 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean61 = tarArchiveEntry60.isSparse();
        tarArchiveEntry60.setMode(26127);
        java.nio.file.attribute.FileTime fileTime64 = tarArchiveEntry60.getLastModifiedTime();
        tarArchiveEntry53.setModTime(fileTime64);
        cpioArchiveEntry49.setTime(fileTime64);
        tarArchiveEntry44.setStatusChangeTime(fileTime64);
        x5455_ExtendedTimestamp24.setModifyFileTime(fileTime64);
        tarArchiveEntry6.setLastModifiedTime(fileTime64);
        sevenZArchiveEntry0.setCreationTime(fileTime64);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date71 = sevenZArchiveEntry0.getLastModifiedDate();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The entry doesn't have this timestamp");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(sevenZMethodConfigurationArray2);
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Jun 20 13:19:33 CEST 2023");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 48 + "'", byte23 == (byte) 48);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(zipShort41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(fileTime64);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj2 = jarArchiveEntry1.clone();
        jarArchiveEntry1.setDiskNumberStart((long) (byte) 10);
        jarArchiveEntry1.setCrc((long) (byte) 75);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray8 = jarArchiveEntry1.getExtraFields(false);
        byte[] byteArray9 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(zipExtraFieldArray8);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "070707");
        org.junit.Assert.assertNotNull(zipExtraFieldArray8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        int int0 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.STORED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream0, "apks");
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveInputStream3.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj2 = jarArchiveEntry1.clone();
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry5 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet6 = dumpArchiveEntry5.getPermissions();
        java.util.Date date7 = dumpArchiveEntry5.getAccessTime();
        boolean boolean8 = jarArchiveEntry1.equals((java.lang.Object) dumpArchiveEntry5);
        java.util.jar.Attributes attributes9 = jarArchiveEntry1.getManifestAttributes();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "070707");
        org.junit.Assert.assertNotNull(pERMISSIONSet6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(attributes9);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        parallelScatterZipCreator0.writeTo(zipArchiveOutputStream6);
        zipArchiveOutputStream6.setFallbackToUTF8(true);
        zipArchiveOutputStream6.setMethod(16384);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry14 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        java.nio.charset.Charset charset15 = null;
        int int16 = cpioArchiveEntry14.getHeaderPadCount(charset15);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream6.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setName("ustar ");
        sevenZArchiveEntry0.setCrc(131);
        boolean boolean5 = sevenZArchiveEntry0.hasStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date6 = sevenZArchiveEntry0.getCreationDate();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The entry doesn't have this timestamp");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1, "data descriptor");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: data descriptor");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream1);
        long long7 = tarArchiveOutputStream6.getBytesWritten();
        tarArchiveOutputStream6.flush();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream9 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream6);
        java.nio.file.Path path10 = null;
        java.nio.file.FileVisitOption[] fileVisitOptionArray11 = new java.nio.file.FileVisitOption[] {};
        java.util.EnumSet<java.nio.file.FileVisitOption> fileVisitOptionSet13 = java.util.EnumSet.noneOf(java.nio.file.FileVisitOption.class);
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.file.FileVisitOption>) fileVisitOptionSet13, fileVisitOptionArray11);
        java.nio.file.LinkOption[] linkOptionArray15 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create((org.apache.commons.compress.archivers.ArchiveOutputStream) tarArchiveOutputStream6, path10, fileVisitOptionSet13, linkOptionArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(fileVisitOptionArray11);
        org.junit.Assert.assertNotNull(fileVisitOptionSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(linkOptionArray15);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField0, byteArray2, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger7 = null;
        zip64ExtendedInformationExtraField0.setRelativeHeaderOffset(zipEightByteInteger7);
        byte[] byteArray9 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        byte[] byteArray10 = zip64ExtendedInformationExtraField0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarFile tarFile12 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray10, true);
        byte[] byteArray13 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray10);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray10, 49152, 2048, zipEncoding16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 49152");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField6);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = asiExtraField0.getCentralDirectoryLength();
        byte[] byteArray2 = asiExtraField0.getCentralDirectoryData();
        boolean boolean3 = asiExtraField0.isLink();
        java.lang.String str4 = asiExtraField0.getLinkedFile();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[118, 104, -118, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(zipExtraFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        boolean boolean2 = cpioArchiveEntry1.isDirectory();
        cpioArchiveEntry1.setSize((long) 8192);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj2 = jarArchiveEntry1.clone();
        int int3 = jarArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry1.setNameSource(nameSource4);
        jarArchiveEntry1.setExternalAttributes((long) ' ');
        java.util.jar.Attributes attributes8 = jarArchiveEntry1.getManifestAttributes();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "070707");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + nameSource4 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource4.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNull(attributes8);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = asiExtraField0.getCentralDirectoryLength();
        byte[] byteArray2 = asiExtraField0.getCentralDirectoryData();
        boolean boolean3 = asiExtraField0.isLink();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry5 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry7 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        byte[] byteArray9 = new byte[] { (byte) -1 };
        byte[] byteArray10 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray9);
        boolean boolean12 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray10, (int) (short) -1);
        jarArchiveEntry7.setExtra(byteArray10);
        jarArchiveEntry5.setCentralDirectoryExtra(byteArray10);
        boolean boolean16 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray10, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            asiExtraField0.parseFromCentralDirectoryData(byteArray10, 26128, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26128");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[118, 104, -118, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory1 = new org.apache.commons.compress.archivers.ArchiveStreamFactory("hi!");
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.archivers.ArchiveStreamProvider> strMap2 = archiveStreamFactory1.getArchiveInputStreamProviders();
        java.util.Set<java.lang.String> strSet3 = archiveStreamFactory1.getInputStreamArchiveNames();
        java.io.InputStream inputStream5 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream5);
        long long8 = cpioArchiveInputStream6.skip((long) (byte) 100);
        cpioArchiveInputStream6.mark(6);
        boolean boolean11 = cpioArchiveInputStream6.markSupported();
        boolean boolean12 = cpioArchiveInputStream6.markSupported();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream6, "arj", false, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory1.createArchiveInputStream("0\000", (java.io.InputStream) zipArchiveInputStream16, "070707");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: 0? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode1 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField3 = extraFieldParsingMode1.createExtraField(zipShort2);
        byte[] byteArray4 = zipExtraField3.getCentralDirectoryData();
        boolean boolean6 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray4, 11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField9 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("apk", byteArray4, 512, (int) (short) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipExtraField3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        org.apache.commons.compress.archivers.zip.X0014_X509Certificates x0014_X509Certificates0 = new org.apache.commons.compress.archivers.zip.X0014_X509Certificates();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x0014_X509Certificates0.getCentralDirectoryLength();
        org.junit.Assert.assertNotNull(zipShort1);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        byte[] byteArray11 = zipArchiveEntry10.getLocalFileDataExtra();
        long long12 = zipArchiveEntry10.getExternalAttributes();
        zipArchiveEntry10.setCompressedSize((long) 424935705);
        long long15 = zipArchiveEntry10.getSize();
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode0 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        byte[] byteArray1 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = extraFieldParsingMode0.onUnparseableExtraField(byteArray1, 512, 0, false, 3);
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix7 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort8 = x7875_NewUnix7.getHeaderId();
        long long9 = x7875_NewUnix7.getGID();
        byte[] byteArray10 = x7875_NewUnix7.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField15 = extraFieldParsingMode0.onUnparseableExtraField(byteArray10, 0, 67324752, false, 1000);
        org.junit.Assert.assertNotNull(extraFieldParsingMode0);
        org.junit.Assert.assertNull(zipExtraField6);
        org.junit.Assert.assertNotNull(zipShort8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1000L + "'", long9 == 1000L);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 2, -24, 3, 2, -24, 3]");
        org.junit.Assert.assertNull(zipExtraField15);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        zipArchiveEntry10.setTime((long) (byte) 1);
        int int13 = zipArchiveEntry10.getInternalAttributes();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry15 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode16 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort17 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField18 = extraFieldParsingMode16.createExtraField(zipShort17);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField19 = jarArchiveEntry15.getExtraField(zipShort17);
        jarArchiveEntry15.setMethod((int) '4');
        jarArchiveEntry15.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry24 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry15);
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit25 = jarArchiveEntry15.getGeneralPurposeBit();
        zipArchiveEntry10.setGeneralPurposeBit(generalPurposeBit25);
        boolean boolean27 = generalPurposeBit25.usesStrongEncryption();
        generalPurposeBit25.useUTF8ForNames(true);
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(extraFieldParsingMode16);
        org.junit.Assert.assertNotNull(zipShort17);
        org.junit.Assert.assertNotNull(zipExtraField18);
        org.junit.Assert.assertNull(zipExtraField19);
        org.junit.Assert.assertNotNull(generalPurposeBit25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream2 = org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(file0, 65535);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        org.apache.commons.compress.PasswordRequiredException passwordRequiredException1 = new org.apache.commons.compress.PasswordRequiredException("tar");
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.file.Path path2 = null;
        java.nio.file.Path path3 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("ZipLong value: 11", path2, path3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        byte[] byteArray5 = new byte[] { (byte) 88, (byte) 50, (byte) -1, (byte) 88, (byte) 75 };
        org.apache.commons.compress.archivers.tar.TarFile tarFile6 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray5);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveEntry> tarArchiveEntryList7 = tarFile6.getEntries();
        tarFile6.close();
        tarFile6.close();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[88, 50, -1, 88, 75]");
        org.junit.Assert.assertNotNull(tarArchiveEntryList7);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        byte[] byteArray2 = x0017_StrongEncryptionHeader0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField3 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField3, byteArray5, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger10 = null;
        zip64ExtendedInformationExtraField3.setRelativeHeaderOffset(zipEightByteInteger10);
        byte[] byteArray12 = zip64ExtendedInformationExtraField3.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField14 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray15 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray12, true, unparseableExtraField14);
        boolean boolean17 = org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byteArray12, (int) (byte) 4);
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseFromLocalFileData(byteArray12, (int) (short) -1, 16384);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = jarArchiveInputStream10.getNextZipEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry12 = null;
        boolean boolean13 = jarArchiveInputStream10.canReadEntryData(archiveEntry12);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = jarArchiveInputStream10.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) jarArchiveInputStream15, "ar");
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveInputStream15.reset();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: mark/reset not supported");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(zipArchiveEntry11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(archiveEntry14);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField2 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray4 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField2, byteArray4, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger9 = null;
        zip64ExtendedInformationExtraField2.setRelativeHeaderOffset(zipEightByteInteger9);
        byte[] byteArray11 = zip64ExtendedInformationExtraField2.getLocalFileDataData();
        byte[] byteArray12 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray11);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField13 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray11);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField15 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField21 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField15, byteArray17, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger22 = null;
        zip64ExtendedInformationExtraField15.setRelativeHeaderOffset(zipEightByteInteger22);
        byte[] byteArray24 = zip64ExtendedInformationExtraField15.getLocalFileDataData();
        byte[] byteArray25 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray24);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField26 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray24);
        unicodeCommentExtraField13.setUnicodeName(byteArray24);
        byte[] byteArray28 = unicodeCommentExtraField13.getUnicodeName();
        byte[] byteArray29 = unicodeCommentExtraField13.getUnicodeName();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort30 = unicodeCommentExtraField13.getHeaderId();
        byte[] byteArray31 = unicodeCommentExtraField13.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            int int34 = org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes((long) 156, byteArray31, 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 156=234 will not fit in octal number buffer of length -2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField8);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(zipShort30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, 0, 0, 0, 0]");
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = asiExtraField0.getCentralDirectoryLength();
        byte[] byteArray2 = asiExtraField0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = asiExtraField0.getLocalFileDataLength();
        java.lang.Object obj4 = zipShort3.clone();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[118, 104, -118, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "ZipShort value: 14");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "ZipShort value: 14");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "ZipShort value: 14");
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0);
        long long6 = tarArchiveOutputStream5.getBytesWritten();
        tarArchiveOutputStream5.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean12 = tarArchiveEntry11.isSparse();
        tarArchiveEntry11.setMode(26127);
        java.util.Date date15 = tarArchiveEntry11.getModTime();
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream5.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Jun 20 13:19:35 CEST 2023");
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder0 = new org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder();
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder2 = builder0.withMaxMemoryLimitInKb(0);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder4 = builder0.withUseDefaultNameForUnnamedEntries(false);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.Builder builder6 = builder0.withTryToRecoverBrokenArchives(false);
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions7 = builder0.build();
        java.lang.Class<?> wildcardClass8 = sevenZFileOptions7.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(sevenZFileOptions7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        zipArchiveEntry10.setTime((long) (byte) 1);
        int int13 = zipArchiveEntry10.getInternalAttributes();
        boolean boolean14 = zipArchiveEntry10.isUnixSymlink();
        zipArchiveEntry10.setDiskNumberStart((long) (byte) 53);
        java.lang.String str17 = zipArchiveEntry10.getComment();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp18 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp18.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean24 = tarArchiveEntry23.isSparse();
        tarArchiveEntry23.setMode(26127);
        java.util.Date date27 = tarArchiveEntry23.getModTime();
        x5455_ExtendedTimestamp18.setModifyJavaTime(date27);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong29 = x5455_ExtendedTimestamp18.getCreateTime();
        byte[] byteArray30 = x5455_ExtendedTimestamp18.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort31 = x5455_ExtendedTimestamp18.getHeaderId();
        zipArchiveEntry10.removeExtraField(zipShort31);
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Jun 20 13:19:35 CEST 2023");
        org.junit.Assert.assertNull(zipLong29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, 71, -117, -111, 100]");
        org.junit.Assert.assertNotNull(zipShort31);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean1 = sevenZArchiveEntry0.getHasLastModifiedDate();
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray2 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] {};
        sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray2);
        java.nio.file.attribute.FileTime fileTime4 = null;
        sevenZArchiveEntry0.setLastModifiedTime(fileTime4);
        sevenZArchiveEntry0.setDirectory(false);
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry10 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("070707", (long) '4');
        java.util.Date date11 = arArchiveEntry10.getLastModifiedDate();
        sevenZArchiveEntry0.setAccessDate(date11);
        java.util.Date date13 = sevenZArchiveEntry0.getAccessDate();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date14 = sevenZArchiveEntry0.getLastModifiedDate();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The entry doesn't have this timestamp");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(sevenZMethodConfigurationArray2);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Jun 20 13:19:35 CEST 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Jun 20 13:19:35 CEST 2023");
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream0, "apks");
        int int4 = tarArchiveInputStream3.getRecordSize();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream9 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream3, (int) (byte) 49, 40960, "7z", false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry10 = tarArchiveInputStream3.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 512 + "'", int4 == 512);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        org.apache.commons.compress.archivers.zip.ZipMethod zipMethod0 = org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_2;
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry2 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        byte[] byteArray4 = new byte[] { (byte) -1 };
        byte[] byteArray5 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray4);
        boolean boolean7 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray5, (int) (short) -1);
        jarArchiveEntry2.setExtra(byteArray5);
        jarArchiveEntry2.setComment("ZipLong value: 11");
        java.util.Date date11 = jarArchiveEntry2.getLastModifiedDate();
        java.util.Date date12 = jarArchiveEntry2.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException13 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(zipMethod0, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry2);
        java.nio.file.attribute.FileTime fileTime14 = jarArchiveEntry2.getLastAccessTime();
        org.junit.Assert.assertTrue("'" + zipMethod0 + "' != '" + org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_2 + "'", zipMethod0.equals(org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_2));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNull(fileTime14);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        arArchiveOutputStream2.finish();
        arArchiveOutputStream2.flush();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream2, "070701");
        // The following exception was thrown during execution in test generation
        try {
            arArchiveOutputStream2.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x0017_StrongEncryptionHeader0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS2 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.util.Date date3 = x000A_NTFS2.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger4 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        java.lang.String str5 = zipEightByteInteger4.toString();
        x000A_NTFS2.setModifyTime(zipEightByteInteger4);
        byte[] byteArray7 = x000A_NTFS2.getLocalFileDataData();
        java.nio.file.attribute.FileTime fileTime8 = x000A_NTFS2.getModifyFileTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList12 = tarArchiveEntry11.getOrderedSparseHeaders();
        boolean boolean13 = tarArchiveEntry11.isPaxGNU1XSparse();
        boolean boolean14 = tarArchiveEntry11.isGNULongNameEntry();
        java.nio.file.attribute.FileTime fileTime15 = tarArchiveEntry11.getLastModifiedTime();
        x000A_NTFS2.setModifyFileTime(fileTime15);
        byte[] byteArray17 = x000A_NTFS2.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField19 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray21 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField25 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField19, byteArray21, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger26 = null;
        zip64ExtendedInformationExtraField19.setRelativeHeaderOffset(zipEightByteInteger26);
        byte[] byteArray28 = zip64ExtendedInformationExtraField19.getLocalFileDataData();
        byte[] byteArray29 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray28);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField30 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray28);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField32 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField38 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField32, byteArray34, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger39 = null;
        zip64ExtendedInformationExtraField32.setRelativeHeaderOffset(zipEightByteInteger39);
        byte[] byteArray41 = zip64ExtendedInformationExtraField32.getLocalFileDataData();
        byte[] byteArray42 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray41);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField43 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray41);
        unicodeCommentExtraField30.setUnicodeName(byteArray41);
        unicodeCommentExtraField30.setNameCRC32((long) (short) -1);
        byte[] byteArray47 = unicodeCommentExtraField30.getLocalFileDataData();
        byte[] byteArray48 = unicodeCommentExtraField30.getLocalFileDataData();
        long long49 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray48);
        x000A_NTFS2.parseFromCentralDirectoryData(byteArray48, 33188, 2);
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseCentralDirectoryFormat(byteArray48, 155, 4096);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 155");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNull(date3);
        org.junit.Assert.assertNotNull(zipEightByteInteger4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ZipEightByteInteger value: 0" + "'", str5, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(fileTime8);
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fileTime15);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 1, 0, 24, 0, 16, 100, 79, 24, 105, -93, -39, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1021L + "'", long49 == 1021L);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        int int2 = cpioArchiveEntry1.getHeaderSize();
        long long3 = cpioArchiveEntry1.getNumberOfLinks();
        java.nio.charset.Charset charset4 = null;
        int int5 = cpioArchiveEntry1.getHeaderPadCount(charset4);
        long long6 = cpioArchiveEntry1.getTime();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 110 + "'", int2 == 110);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        org.apache.commons.compress.archivers.zip.ZipMethod zipMethod1 = org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode((int) (short) 100);
        org.junit.Assert.assertNull(zipMethod1);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore0 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor1 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore0);
        streamCompressor1.close();
        long long3 = streamCompressor1.getBytesWrittenForLastEntry();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        java.nio.charset.Charset charset6 = null;
        int int7 = cpioArchiveEntry5.getHeaderPadCount(charset6);
        long long8 = cpioArchiveEntry5.getDeviceMaj();
        boolean boolean9 = cpioArchiveEntry5.isDirectory();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS10 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.util.Date date11 = x000A_NTFS10.getCreateJavaTime();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry13 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        byte[] byteArray15 = new byte[] { (byte) -1 };
        byte[] byteArray16 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray15);
        boolean boolean18 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray16, (int) (short) -1);
        jarArchiveEntry13.setExtra(byteArray16);
        jarArchiveEntry13.setComment("ZipLong value: 11");
        java.util.Date date22 = jarArchiveEntry13.getLastModifiedDate();
        java.util.Date date23 = jarArchiveEntry13.getLastModifiedDate();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry25 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.nio.file.attribute.FileTime fileTime26 = jarArchiveEntry25.getLastAccessTime();
        jarArchiveEntry25.setMethod(424935705);
        jarArchiveEntry25.setExternalAttributes((long) (byte) 4);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode31 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort32 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField33 = extraFieldParsingMode31.createExtraField(zipShort32);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp34 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp34.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry39 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean40 = tarArchiveEntry39.isSparse();
        tarArchiveEntry39.setMode(26127);
        java.util.Date date43 = tarArchiveEntry39.getModTime();
        x5455_ExtendedTimestamp34.setModifyJavaTime(date43);
        byte[] byteArray46 = new byte[] { (byte) -1 };
        byte[] byteArray47 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray46);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField51 = extraFieldParsingMode31.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp34, byteArray47, 0, 32768, true);
        java.nio.file.attribute.FileTime fileTime52 = null;
        x5455_ExtendedTimestamp34.setAccessFileTime(fileTime52);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong54 = x5455_ExtendedTimestamp34.getCreateTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry57 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ustar\000", (byte) 54);
        java.util.Map<java.lang.String, java.lang.String> strMap58 = tarArchiveEntry57.getExtraPaxHeaders();
        java.nio.file.attribute.FileTime fileTime59 = tarArchiveEntry57.getLastModifiedTime();
        x5455_ExtendedTimestamp34.setModifyFileTime(fileTime59);
        java.util.zip.ZipEntry zipEntry61 = jarArchiveEntry25.setCreationTime(fileTime59);
        java.util.zip.ZipEntry zipEntry62 = jarArchiveEntry13.setLastModifiedTime(fileTime59);
        x000A_NTFS10.setAccessFileTime(fileTime59);
        cpioArchiveEntry5.setTime(fileTime59);
        short short65 = cpioArchiveEntry5.getFormat();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField66 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray68 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField72 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField66, byteArray68, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger73 = null;
        zip64ExtendedInformationExtraField66.setRelativeHeaderOffset(zipEightByteInteger73);
        byte[] byteArray75 = zip64ExtendedInformationExtraField66.getLocalFileDataData();
        byte[] byteArray76 = zip64ExtendedInformationExtraField66.getCentralDirectoryData();
        org.apache.commons.compress.archivers.tar.TarFile tarFile78 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray76, true);
        boolean boolean79 = cpioArchiveEntry5.equals((java.lang.Object) byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            streamCompressor1.writeCounted(byteArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(streamCompressor1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(date11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNull(fileTime26);
        org.junit.Assert.assertNotNull(extraFieldParsingMode31);
        org.junit.Assert.assertNotNull(zipShort32);
        org.junit.Assert.assertNotNull(zipExtraField33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Tue Jun 20 13:19:36 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1]");
        org.junit.Assert.assertNotNull(zipExtraField51);
        org.junit.Assert.assertNull(zipLong54);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(fileTime59);
        org.junit.Assert.assertNotNull(zipEntry61);
        org.junit.Assert.assertEquals(zipEntry61.toString(), "070707");
        org.junit.Assert.assertNotNull(zipEntry62);
        org.junit.Assert.assertEquals(zipEntry62.toString(), "070707");
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) 1 + "'", short65 == (short) 1);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField72);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("070707", (byte) 50);
        tarArchiveEntry2.clearExtraPaxHeaders();
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry0.setName("ustar ");
        sevenZArchiveEntry0.setCreationDate((long) (byte) 2);
        sevenZArchiveEntry0.setCrcValue((long) 100);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger0 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray1 = zipEightByteInteger0.getBytes();
        java.lang.String str2 = zipEightByteInteger0.toString();
        long long3 = zipEightByteInteger0.getLongValue();
        org.junit.Assert.assertNotNull(zipEightByteInteger0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ZipEightByteInteger value: 0" + "'", str2, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        java.nio.file.Path path0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile3 = new org.apache.commons.compress.archivers.zip.ZipFile(path0, "dump", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) (byte) 120, "compressionElapsed=-1687259963560ms, mergingElapsed=0ms", (long) 40960);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown header type 120");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory1 = new org.apache.commons.compress.archivers.ArchiveStreamFactory("hi!");
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.archivers.ArchiveStreamProvider> strMap2 = archiveStreamFactory1.getArchiveInputStreamProviders();
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.archivers.ArchiveStreamProvider> strMap3 = archiveStreamFactory1.getArchiveInputStreamProviders();
        java.io.InputStream inputStream5 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream5);
        long long8 = cpioArchiveInputStream6.skip((long) (byte) 100);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream9 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream6);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream6, 148, 2526, "apkm", false);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream15 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream6);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream18 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream15, 8192, "UTF8");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream19 = archiveStreamFactory1.createArchiveInputStream("0x5455 Zip Extra Field: Flags=10  Access:[Thu Jan 01 01:00:01 CET 1970] ", (java.io.InputStream) tarArchiveInputStream18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: 0x5455 Zip Extra Field: Flags=10  Access:[Thu Jan 01 01:00:01 CET 1970]  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode0 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField2 = extraFieldParsingMode0.createExtraField(zipShort1);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp3 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp3.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry8 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean9 = tarArchiveEntry8.isSparse();
        tarArchiveEntry8.setMode(26127);
        java.util.Date date12 = tarArchiveEntry8.getModTime();
        x5455_ExtendedTimestamp3.setModifyJavaTime(date12);
        byte[] byteArray15 = new byte[] { (byte) -1 };
        byte[] byteArray16 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray15);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = extraFieldParsingMode0.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp3, byteArray16, 0, 32768, true);
        java.nio.file.attribute.FileTime fileTime21 = null;
        x5455_ExtendedTimestamp3.setAccessFileTime(fileTime21);
        java.lang.Object obj23 = x5455_ExtendedTimestamp3.clone();
        java.nio.file.attribute.FileTime fileTime24 = x5455_ExtendedTimestamp3.getCreateFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort25 = x5455_ExtendedTimestamp3.getCentralDirectoryLength();
        org.junit.Assert.assertNotNull(extraFieldParsingMode0);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipExtraField2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Jun 20 13:19:36 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertNull(fileTime24);
        org.junit.Assert.assertNotNull(zipShort25);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet3 = dumpArchiveEntry2.getPermissions();
        boolean boolean4 = dumpArchiveEntry2.isDeleted();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp5 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp5.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry10 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean11 = tarArchiveEntry10.isSparse();
        tarArchiveEntry10.setMode(26127);
        java.util.Date date14 = tarArchiveEntry10.getModTime();
        x5455_ExtendedTimestamp5.setModifyJavaTime(date14);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong16 = x5455_ExtendedTimestamp5.getCreateTime();
        byte[] byteArray17 = x5455_ExtendedTimestamp5.getLocalFileDataData();
        byte byte18 = x5455_ExtendedTimestamp5.getFlags();
        java.util.Date date19 = x5455_ExtendedTimestamp5.getModifyJavaTime();
        dumpArchiveEntry2.setAccessTime(date19);
        java.lang.String str21 = dumpArchiveEntry2.getName();
        org.junit.Assert.assertNotNull(pERMISSIONSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Jun 20 13:19:36 CEST 2023");
        org.junit.Assert.assertNull(zipLong16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1, 72, -117, -111, 100]");
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 75 + "'", byte18 == (byte) 75);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Jun 20 13:19:36 CEST 2023");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "`\n" + "'", str21, "`\n");
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature0 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.SPLITTING;
        java.lang.String str1 = feature0.toString();
        java.lang.String str2 = feature0.toString();
        org.junit.Assert.assertNotNull(feature0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "splitting" + "'", str1, "splitting");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "splitting" + "'", str2, "splitting");
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isSparse();
        tarArchiveEntry2.setMode(26127);
        java.nio.file.attribute.FileTime fileTime6 = tarArchiveEntry2.getLastModifiedTime();
        boolean boolean7 = tarArchiveEntry2.isGNULongLinkEntry();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(fileTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        parallelScatterZipCreator0.writeTo(zipArchiveOutputStream6);
        zipArchiveOutputStream6.setFallbackToUTF8(true);
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode11 = org.apache.commons.compress.archivers.zip.Zip64Mode.Never;
        zipArchiveOutputStream6.setUseZip64(zip64Mode11);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream13 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream6);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream6, "UTF8");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy16 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        zipArchiveOutputStream6.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy16);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream6.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
        org.junit.Assert.assertTrue("'" + zip64Mode11 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.Never + "'", zip64Mode11.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.Never));
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy16);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0);
        long long6 = tarArchiveOutputStream5.getBytesWritten();
        tarArchiveOutputStream5.setLongFileMode(12);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream5.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        java.io.File file3 = null;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer4 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream5 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream5);
        long long8 = cpioArchiveInputStream6.skip((long) (byte) 100);
        cpioArchiveInputStream6.mark(6);
        boolean boolean11 = cpioArchiveInputStream6.markSupported();
        boolean boolean12 = cpioArchiveInputStream6.markSupported();
        closeableConsumer4.accept((java.io.Closeable) cpioArchiveInputStream6);
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("ZipEightByteInteger value: 0", seekableByteChannel2, file3, closeableConsumer4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: \"ch\" is null!");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData0 = new org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData();
        byte[] byteArray1 = unparseableExtraFieldData0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = unparseableExtraFieldData0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField4 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField4, byteArray6, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = null;
        zip64ExtendedInformationExtraField4.setRelativeHeaderOffset(zipEightByteInteger11);
        byte[] byteArray13 = zip64ExtendedInformationExtraField4.getLocalFileDataData();
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray13);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField15 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray13);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField17 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray19 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField23 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField17, byteArray19, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger24 = null;
        zip64ExtendedInformationExtraField17.setRelativeHeaderOffset(zipEightByteInteger24);
        byte[] byteArray26 = zip64ExtendedInformationExtraField17.getLocalFileDataData();
        byte[] byteArray27 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray26);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField28 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray26);
        unicodeCommentExtraField15.setUnicodeName(byteArray26);
        byte[] byteArray30 = unicodeCommentExtraField15.getUnicodeName();
        byte[] byteArray31 = unicodeCommentExtraField15.getUnicodeName();
        byte[] byteArray33 = new byte[] { (byte) -1 };
        byte[] byteArray34 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray33);
        long long35 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray33);
        boolean boolean37 = org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byteArray33, 0);
        unicodeCommentExtraField15.setUnicodeName(byteArray33);
        unparseableExtraFieldData0.parseFromLocalFileData(byteArray33, (int) (short) 0, 8);
        org.junit.Assert.assertNull(byteArray1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField23);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 255L + "'", long35 == 255L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField0 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField.ID;
        unrecognizedExtraField0.setHeaderId(zipShort1);
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker3 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = jarMarker3.getLocalFileDataLength();
        byte[] byteArray5 = jarMarker3.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            unrecognizedExtraField0.parseFromLocalFileData(byteArray5, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(jarMarker3);
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveInputStream1.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = asiExtraField0.getCentralDirectoryLength();
        asiExtraField0.setDirectory(true);
        java.lang.Object obj4 = asiExtraField0.clone();
        java.lang.String str5 = asiExtraField0.getLinkedFile();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = asiExtraField0.getLocalFileDataLength();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(zipShort6);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode0 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField2 = extraFieldParsingMode0.createExtraField(zipShort1);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp3 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp3.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry8 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean9 = tarArchiveEntry8.isSparse();
        tarArchiveEntry8.setMode(26127);
        java.util.Date date12 = tarArchiveEntry8.getModTime();
        x5455_ExtendedTimestamp3.setModifyJavaTime(date12);
        byte[] byteArray15 = new byte[] { (byte) -1 };
        byte[] byteArray16 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray15);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = extraFieldParsingMode0.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp3, byteArray16, 0, 32768, true);
        java.nio.file.Path path21 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier22 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path21);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore23 = defaultBackingStoreSupplier22.get();
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor24 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore23);
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor25 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore23);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField27 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray29 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField33 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField27, byteArray29, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger34 = null;
        zip64ExtendedInformationExtraField27.setRelativeHeaderOffset(zipEightByteInteger34);
        byte[] byteArray36 = zip64ExtendedInformationExtraField27.getLocalFileDataData();
        byte[] byteArray37 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray36);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField38 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray36);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField40 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray42 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField46 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField40, byteArray42, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger47 = null;
        zip64ExtendedInformationExtraField40.setRelativeHeaderOffset(zipEightByteInteger47);
        byte[] byteArray49 = zip64ExtendedInformationExtraField40.getLocalFileDataData();
        byte[] byteArray50 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray49);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField51 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray49);
        unicodeCommentExtraField38.setUnicodeName(byteArray49);
        byte[] byteArray53 = unicodeCommentExtraField38.getUnicodeName();
        byte[] byteArray54 = unicodeCommentExtraField38.getUnicodeName();
        byte[] byteArray56 = new byte[] { (byte) -1 };
        byte[] byteArray57 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray56);
        long long58 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray56);
        boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byteArray56, 0);
        unicodeCommentExtraField38.setUnicodeName(byteArray56);
        byte[] byteArray62 = unicodeCommentExtraField38.getLocalFileDataData();
        streamCompressor25.writeCounted(byteArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField67 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField(zipExtraField20, byteArray62, 54, (int) (byte) 50, true);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: Failed to parse corrupt ZIP extra field of type 5455");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode0);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipExtraField2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Jun 20 13:19:37 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore23);
        org.junit.Assert.assertNotNull(streamCompressor24);
        org.junit.Assert.assertNotNull(streamCompressor25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField33);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-1]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 255L + "'", long58 == 255L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[1, 0, 0, 0, 0, -1]");
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        java.nio.file.Path path1 = null;
        java.nio.file.LinkOption linkOption3 = null;
        java.nio.file.LinkOption[] linkOptionArray4 = new java.nio.file.LinkOption[] { linkOption3 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) (byte) 120, path1, "tar\000", linkOptionArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(linkOptionArray4);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        java.util.concurrent.ExecutorService executorService0 = null;
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator1 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = null;
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable4 = parallelScatterZipCreator1.createCallable(zipArchiveEntry2, inputStreamSupplier3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile x0015_CertificateIdForFile0 = new org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm1 = x0015_CertificateIdForFile0.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x0015_CertificateIdForFile0.getHeaderId();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField3 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray5 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField3, byteArray5, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger10 = null;
        zip64ExtendedInformationExtraField3.setRelativeHeaderOffset(zipEightByteInteger10);
        byte[] byteArray12 = zip64ExtendedInformationExtraField3.getLocalFileDataData();
        boolean boolean14 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray12, (int) (byte) -1);
        x0015_CertificateIdForFile0.setLocalFileDataData(byteArray12);
        byte[] byteArray16 = x0015_CertificateIdForFile0.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry tarArchiveSparseEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry(byteArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(hashAlgorithm1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField9);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean4 = tarArchiveEntry3.isSparse();
        tarArchiveEntry3.setMode(26127);
        java.util.Date date7 = tarArchiveEntry3.getModTime();
        sevenZArchiveEntry0.setLastModifiedDate(date7);
        sevenZArchiveEntry0.setHasLastModifiedDate(false);
        boolean boolean11 = sevenZArchiveEntry0.getHasCreationDate();
        java.lang.Iterable<? extends org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration> wildcardIterable12 = sevenZArchiveEntry0.getContentMethods();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.attribute.FileTime fileTime13 = sevenZArchiveEntry0.getAccessTime();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The entry doesn't have this timestamp");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Jun 20 13:19:37 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardIterable12);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        java.util.jar.JarEntry jarEntry0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry(jarEntry0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: entry");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj2 = jarArchiveEntry1.clone();
        int int3 = jarArchiveEntry1.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry1.setNameSource(nameSource4);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource6 = jarArchiveEntry1.getNameSource();
        byte[] byteArray7 = jarArchiveEntry1.getRawName();
        jarArchiveEntry1.setVersionRequired(4095);
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField12 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (byte) 75, true);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort13 = resourceAlignmentExtraField12.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField14 = jarArchiveEntry1.getExtraField(zipShort13);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource15 = jarArchiveEntry1.getNameSource();
        jarArchiveEntry1.setComment("0x5455 Zip Extra Field: Flags=1011000 ");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "070707");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + nameSource4 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource4.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertTrue("'" + nameSource6 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource6.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(zipShort13);
        org.junit.Assert.assertNull(zipExtraField14);
        org.junit.Assert.assertTrue("'" + nameSource15 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource15.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        long long4 = cpioArchiveInputStream1.getBytesRead();
        boolean boolean5 = cpioArchiveInputStream1.markSupported();
        long long7 = cpioArchiveInputStream1.skip((long) (byte) 54);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream8 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = cpioArchiveInputStream1.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        int int3 = cpioArchiveEntry1.getHeaderPadCount((long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveEntry1.setDevice(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 3, "00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown header type 3");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        java.nio.file.Path path1 = null;
        java.nio.file.LinkOption[] linkOptionArray3 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) (byte) 76, path1, "TarArchiveStructSparse{offset=9, numbytes=1}", linkOptionArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(linkOptionArray3);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.nio.file.attribute.FileTime fileTime1 = x000A_NTFS0.getAccessFileTime();
        java.lang.String str2 = x000A_NTFS0.toString();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS3 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = extraFieldParsingMode4.createExtraField(zipShort5);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp7 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp7.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean13 = tarArchiveEntry12.isSparse();
        tarArchiveEntry12.setMode(26127);
        java.util.Date date16 = tarArchiveEntry12.getModTime();
        x5455_ExtendedTimestamp7.setModifyJavaTime(date16);
        byte[] byteArray19 = new byte[] { (byte) -1 };
        byte[] byteArray20 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray19);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField24 = extraFieldParsingMode4.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp7, byteArray20, 0, 32768, true);
        java.nio.file.attribute.FileTime fileTime25 = null;
        x5455_ExtendedTimestamp7.setAccessFileTime(fileTime25);
        java.lang.Object obj27 = x5455_ExtendedTimestamp7.clone();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp28 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp28.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry33 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean34 = tarArchiveEntry33.isSparse();
        tarArchiveEntry33.setMode(26127);
        java.util.Date date37 = tarArchiveEntry33.getModTime();
        x5455_ExtendedTimestamp28.setModifyJavaTime(date37);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong39 = x5455_ExtendedTimestamp28.getCreateTime();
        byte[] byteArray40 = x5455_ExtendedTimestamp28.getLocalFileDataData();
        byte byte41 = x5455_ExtendedTimestamp28.getFlags();
        java.util.Date date42 = x5455_ExtendedTimestamp28.getModifyJavaTime();
        x5455_ExtendedTimestamp7.setModifyJavaTime(date42);
        x000A_NTFS3.setModifyJavaTime(date42);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger45 = x000A_NTFS3.getModifyTime();
        x000A_NTFS0.setModifyTime(zipEightByteInteger45);
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField49 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(2, true);
        byte[] byteArray50 = resourceAlignmentExtraField49.getLocalFileDataData();
        byte[] byteArray51 = resourceAlignmentExtraField49.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            x000A_NTFS0.parseFromLocalFileData(byteArray51, 21, 65535);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] " + "'", str2, "0x000A Zip Extra Field: Modify:[null]  Access:[null]  Create:[null] ");
        org.junit.Assert.assertNotNull(extraFieldParsingMode4);
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertNotNull(zipExtraField6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Jun 20 13:19:38 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertNotNull(zipExtraField24);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Jun 20 13:19:38 CEST 2023");
        org.junit.Assert.assertNull(zipLong39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 74, -117, -111, 100]");
        org.junit.Assert.assertTrue("'" + byte41 + "' != '" + (byte) 75 + "'", byte41 == (byte) 75);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Jun 20 13:19:38 CEST 2023");
        org.junit.Assert.assertNotNull(zipEightByteInteger45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[2, -128]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[2, -128]");
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ustar\000", (byte) 54);
        java.util.Map<java.lang.String, java.lang.String> strMap3 = tarArchiveEntry2.getExtraPaxHeaders();
        tarArchiveEntry2.setGroupId(420);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveEntry2.setDataOffset((long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The offset can not be smaller than 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        tarArchiveEntry2.setModTime((long) 9);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x7875_NewUnix0.getLocalFileDataLength();
        byte[] byteArray2 = x7875_NewUnix0.getLocalFileDataData();
        java.lang.String str3 = x7875_NewUnix0.toString();
        long long4 = x7875_NewUnix0.getUID();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = x7875_NewUnix0.getCentralDirectoryLength();
        byte[] byteArray6 = null;
        x7875_NewUnix0.parseFromCentralDirectoryData(byteArray6, (int) (byte) 51, 420);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry11 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        byte[] byteArray13 = new byte[] { (byte) -1 };
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray13);
        boolean boolean16 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray14, (int) (short) -1);
        jarArchiveEntry11.setExtra(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            x7875_NewUnix0.parseFromLocalFileData(byteArray14, 2526, 65535);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2526");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1, 2, -24, 3, 2, -24, 3]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0x7875 Zip Extra Field: UID=1000 GID=1000" + "'", str3, "0x7875 Zip Extra Field: UID=1000 GID=1000");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1000L + "'", long4 == 1000L);
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        org.apache.commons.compress.archivers.zip.ZipMethod zipMethod1 = org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + zipMethod1 + "' != '" + org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN + "'", zipMethod1.equals(org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN));
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        java.util.Date date1 = org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime((-1687259966267L));
        org.junit.Assert.assertNotNull(date1);
        org.junit.Assert.assertEquals(date1.toString(), "Sat Dec 30 02:07:54 CET 1600");
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (byte) 75, true);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = resourceAlignmentExtraField2.getHeaderId();
        short short4 = resourceAlignmentExtraField2.getAlignment();
        short short5 = resourceAlignmentExtraField2.getAlignment();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = resourceAlignmentExtraField2.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = resourceAlignmentExtraField2.getCentralDirectoryLength();
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 75 + "'", short4 == (short) 75);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 75 + "'", short5 == (short) 75);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(zipShort7);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        boolean boolean12 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray10, (int) (byte) -1);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField13 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("././@LongLink", byteArray10);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField14 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField14, byteArray16, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger21 = null;
        zip64ExtendedInformationExtraField14.setRelativeHeaderOffset(zipEightByteInteger21);
        byte[] byteArray23 = zip64ExtendedInformationExtraField14.getLocalFileDataData();
        byte[] byteArray24 = zip64ExtendedInformationExtraField14.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            unicodeCommentExtraField13.parseFromLocalFileData(byteArray24, 36864, 4095);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36864");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (byte) 1);
        java.lang.String str3 = zipLong2.toString();
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong2);
        byte[] byteArray5 = zipLong2.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipLong zipLong7 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray5, (int) (byte) 50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 50");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ZipLong value: 1" + "'", str3, "ZipLong value: 1");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 0, 0, 0]");
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean1 = sevenZArchiveEntry0.getHasLastModifiedDate();
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray2 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] {};
        sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray2);
        java.nio.file.attribute.FileTime fileTime4 = null;
        sevenZArchiveEntry0.setLastModifiedTime(fileTime4);
        sevenZArchiveEntry0.setDirectory(false);
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry10 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("070707", (long) '4');
        java.util.Date date11 = arArchiveEntry10.getLastModifiedDate();
        sevenZArchiveEntry0.setAccessDate(date11);
        java.util.Date date13 = sevenZArchiveEntry0.getAccessDate();
        long long14 = sevenZArchiveEntry0.getCrcValue();
        boolean boolean15 = sevenZArchiveEntry0.hasStream();
        sevenZArchiveEntry0.setCrc(4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry20 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList21 = tarArchiveEntry20.getOrderedSparseHeaders();
        boolean boolean22 = tarArchiveEntry20.isPaxGNU1XSparse();
        boolean boolean23 = tarArchiveEntry20.isCheckSumOK();
        long long24 = tarArchiveEntry20.getLongUserId();
        boolean boolean25 = tarArchiveEntry20.isBlockDevice();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp26 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.file.attribute.FileTime fileTime27 = x5455_ExtendedTimestamp26.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort28 = x5455_ExtendedTimestamp26.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong30 = new org.apache.commons.compress.archivers.zip.ZipLong((long) 0);
        x5455_ExtendedTimestamp26.setModifyTime(zipLong30);
        java.nio.file.attribute.FileTime fileTime32 = x5455_ExtendedTimestamp26.getModifyFileTime();
        tarArchiveEntry20.setCreationTime(fileTime32);
        sevenZArchiveEntry0.setAccessTime(fileTime32);
        boolean boolean35 = sevenZArchiveEntry0.hasStream();
        boolean boolean36 = sevenZArchiveEntry0.getHasWindowsAttributes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(sevenZMethodConfigurationArray2);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Jun 20 13:19:38 CEST 2023");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Jun 20 13:19:38 CEST 2023");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(fileTime27);
        org.junit.Assert.assertNotNull(zipShort28);
        org.junit.Assert.assertNotNull(fileTime32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean1 = sevenZArchiveEntry0.getHasLastModifiedDate();
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray2 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] {};
        sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray2);
        java.nio.file.attribute.FileTime fileTime4 = null;
        sevenZArchiveEntry0.setLastModifiedTime(fileTime4);
        sevenZArchiveEntry0.setHasWindowsAttributes(false);
        long long8 = sevenZArchiveEntry0.getCrcValue();
        sevenZArchiveEntry0.setLastModifiedDate(11L);
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry11 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean12 = sevenZArchiveEntry11.getHasLastModifiedDate();
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray13 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] {};
        sevenZArchiveEntry11.setContentMethods(sevenZMethodConfigurationArray13);
        sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray13);
        int int16 = sevenZArchiveEntry0.getCrc();
        boolean boolean17 = sevenZArchiveEntry0.getHasCreationDate();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(sevenZMethodConfigurationArray2);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(sevenZMethodConfigurationArray13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.util.jar.Attributes attributes2 = jarArchiveEntry1.getManifestAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode3 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = extraFieldParsingMode3.createExtraField(zipShort4);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp6 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp6.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean12 = tarArchiveEntry11.isSparse();
        tarArchiveEntry11.setMode(26127);
        java.util.Date date15 = tarArchiveEntry11.getModTime();
        x5455_ExtendedTimestamp6.setModifyJavaTime(date15);
        byte[] byteArray18 = new byte[] { (byte) -1 };
        byte[] byteArray19 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray18);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField23 = extraFieldParsingMode3.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp6, byteArray19, 0, 32768, true);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode24 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp25 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp25.setFlags((byte) 75);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField29 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField35 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField29, byteArray31, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger36 = null;
        zip64ExtendedInformationExtraField29.setRelativeHeaderOffset(zipEightByteInteger36);
        byte[] byteArray38 = zip64ExtendedInformationExtraField29.getLocalFileDataData();
        byte[] byteArray39 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray38);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField40 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray38);
        boolean boolean41 = x5455_ExtendedTimestamp25.equals((java.lang.Object) unicodeCommentExtraField40);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort42 = x5455_ExtendedTimestamp25.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField43 = extraFieldParsingMode24.createExtraField(zipShort42);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField44 = extraFieldParsingMode3.createExtraField(zipShort42);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray45 = jarArchiveEntry1.getExtraFields((org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode3);
        byte[] byteArray46 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(zipExtraFieldArray45);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry49 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray46, zipEncoding47, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(attributes2);
        org.junit.Assert.assertNotNull(extraFieldParsingMode3);
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNotNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Jun 20 13:19:38 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertNotNull(zipExtraField23);
        org.junit.Assert.assertNotNull(extraFieldParsingMode24);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zipShort42);
        org.junit.Assert.assertNotNull(zipExtraField43);
        org.junit.Assert.assertNotNull(zipExtraField44);
        org.junit.Assert.assertNotNull(zipExtraFieldArray45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry3.setNames("", "ZipLong value: 1");
        int int7 = tarArchiveEntry3.getGroupId();
        long long8 = tarArchiveEntry3.getRealSize();
        boolean boolean9 = tarArchiveEntry3.isPaxGNU1XSparse();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource10 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT;
        jarArchiveEntry1.setCommentSource(commentSource10);
        int int12 = jarArchiveEntry1.getUnixMode();
        java.nio.file.attribute.FileTime fileTime13 = jarArchiveEntry1.getLastAccessTime();
        jarArchiveEntry1.setRawFlag(148);
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + commentSource10 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT + "'", commentSource10.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(fileTime13);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix1 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x7875_NewUnix1.getHeaderId();
        long long3 = x7875_NewUnix1.getGID();
        byte[] byteArray4 = x7875_NewUnix1.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes((long) 4095, byteArray4, 3, 493);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 493");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1000L + "'", long3 == 1000L);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, 2, -24, 3, 2, -24, 3]");
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = jarArchiveInputStream10.getNextZipEntry();
        long long13 = jarArchiveInputStream10.skip(100L);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream17 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) jarArchiveInputStream10, "arj", false, false);
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(zipArchiveEntry11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isSparse();
        tarArchiveEntry2.setMode(26127);
        java.util.Date date6 = tarArchiveEntry2.getModTime();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = tarArchiveEntry2.getExtraPaxHeaders();
        tarArchiveEntry2.setGroupId(257);
        boolean boolean10 = tarArchiveEntry2.isStreamContiguous();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jun 20 13:19:39 CEST 2023");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile2 = new org.apache.commons.compress.archivers.zip.ZipFile("never", "");
            org.junit.Assert.fail("Expected exception of type java.nio.file.NoSuchFileException; message: never");
        } catch (java.nio.file.NoSuchFileException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        dumpArchiveEntry2.setVolume(488);
        long long5 = dumpArchiveEntry2.getOffset();
        int int6 = dumpArchiveEntry2.getMode();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS7 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong9 = new org.apache.commons.compress.archivers.zip.ZipLong((long) 0);
        int int10 = zipLong9.getIntValue();
        java.util.Date date11 = org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(zipLong9);
        x000A_NTFS7.setAccessJavaTime(date11);
        dumpArchiveEntry2.setAccessTime(date11);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Nov 30 00:00:00 CET 1979");
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray10);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField12 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray10);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField14 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField14, byteArray16, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger21 = null;
        zip64ExtendedInformationExtraField14.setRelativeHeaderOffset(zipEightByteInteger21);
        byte[] byteArray23 = zip64ExtendedInformationExtraField14.getLocalFileDataData();
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray23);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField25 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray23);
        unicodeCommentExtraField12.setUnicodeName(byteArray23);
        unicodeCommentExtraField12.setNameCRC32((long) (short) -1);
        byte[] byteArray29 = unicodeCommentExtraField12.getLocalFileDataData();
        byte[] byteArray30 = unicodeCommentExtraField12.getLocalFileDataData();
        byte[] byteArray31 = unicodeCommentExtraField12.getCentralDirectoryData();
        boolean boolean33 = org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byteArray31, (int) '#');
        org.apache.commons.compress.archivers.tar.TarFile tarFile35 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray31, "00");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField0 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = unrecognizedExtraField0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = unrecognizedExtraField0.getHeaderId();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS3 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        java.util.Date date4 = x000A_NTFS3.getCreateJavaTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger5 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        java.lang.String str6 = zipEightByteInteger5.toString();
        x000A_NTFS3.setModifyTime(zipEightByteInteger5);
        byte[] byteArray8 = x000A_NTFS3.getLocalFileDataData();
        byte[] byteArray9 = x000A_NTFS3.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            unrecognizedExtraField0.parseFromCentralDirectoryData(byteArray9, 84446, (int) (byte) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNull(zipShort2);
        org.junit.Assert.assertNull(date4);
        org.junit.Assert.assertNotNull(zipEightByteInteger5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ZipEightByteInteger value: 0" + "'", str6, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList3 = tarArchiveEntry2.getOrderedSparseHeaders();
        boolean boolean4 = tarArchiveEntry2.isPaxGNU1XSparse();
        int int5 = tarArchiveEntry2.getMode();
        java.util.Date date6 = tarArchiveEntry2.getModTime();
        tarArchiveEntry2.setLinkName("never");
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 33188 + "'", int5 == 33188);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jun 20 13:19:39 CEST 2023");
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        org.apache.commons.compress.archivers.zip.ZipMethod zipMethod0 = org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_3;
        org.junit.Assert.assertTrue("'" + zipMethod0 + "' != '" + org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_3 + "'", zipMethod0.equals(org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_3));
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile2 = new org.apache.commons.compress.archivers.zip.ZipFile(seekableByteChannel0, "0x5455 Zip Extra Field: Flags=1011000 ");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 0x5455 Zip Extra Field: Flags=1011000 ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField0, byteArray2, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger7 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray8 = zipEightByteInteger7.getBytes();
        zip64ExtendedInformationExtraField0.setCompressedSize(zipEightByteInteger7);
        byte[] byteArray10 = zip64ExtendedInformationExtraField0.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = zip64ExtendedInformationExtraField0.getSize();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = zip64ExtendedInformationExtraField0.getLocalFileDataLength();
        java.lang.String str13 = zipShort12.toString();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField6);
        org.junit.Assert.assertNotNull(zipEightByteInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(zipEightByteInteger11);
        org.junit.Assert.assertNotNull(zipShort12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ZipShort value: 0" + "'", str13, "ZipShort value: 0");
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        jarArchiveEntry1.setCrc((long) 16384);
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField12 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        boolean boolean13 = asiExtraField12.isLink();
        int int14 = asiExtraField12.getMode();
        asiExtraField12.setMode(10);
        jarArchiveEntry1.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) asiExtraField12);
        jarArchiveEntry1.setUnixMode((int) (byte) 12);
        int int20 = jarArchiveEntry1.getRawFlag();
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        zipArchiveOutputStream5.flush();
        zipArchiveOutputStream5.setUseLanguageEncodingFlag(true);
        java.lang.String str9 = zipArchiveOutputStream5.getEncoding();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField11 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField17 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField11, byteArray13, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger18 = null;
        zip64ExtendedInformationExtraField11.setRelativeHeaderOffset(zipEightByteInteger18);
        byte[] byteArray20 = zip64ExtendedInformationExtraField11.getLocalFileDataData();
        byte[] byteArray21 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray20);
        long long22 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray20);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField23 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField("UTF8", byteArray20);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort24 = unicodePathExtraField23.getHeaderId();
        java.nio.file.Path path25 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier26 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path25);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore27 = defaultBackingStoreSupplier26.get();
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor28 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore27);
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor29 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore27);
        long long30 = streamCompressor29.getBytesWrittenForLastEntry();
        org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile x0015_CertificateIdForFile31 = new org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm32 = x0015_CertificateIdForFile31.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort33 = x0015_CertificateIdForFile31.getHeaderId();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm34 = x0015_CertificateIdForFile31.getHashAlgorithm();
        int int35 = x0015_CertificateIdForFile31.getRecordCount();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField36 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray38 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField42 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField36, byteArray38, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger43 = null;
        zip64ExtendedInformationExtraField36.setRelativeHeaderOffset(zipEightByteInteger43);
        byte[] byteArray45 = zip64ExtendedInformationExtraField36.getLocalFileDataData();
        x0015_CertificateIdForFile31.setCentralDirectoryData(byteArray45);
        streamCompressor29.writeCounted(byteArray45);
        unicodePathExtraField23.setUnicodeName(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream5.write(byteArray45, (int) (byte) 83, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTF8" + "'", str9, "UTF8");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(zipShort24);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore27);
        org.junit.Assert.assertNotNull(streamCompressor28);
        org.junit.Assert.assertNotNull(streamCompressor29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(hashAlgorithm32);
        org.junit.Assert.assertNotNull(zipShort33);
        org.junit.Assert.assertNull(hashAlgorithm34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField42);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature0 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR;
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry2 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        byte[] byteArray4 = new byte[] { (byte) -1 };
        byte[] byteArray5 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray4);
        boolean boolean7 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray5, (int) (short) -1);
        jarArchiveEntry2.setExtra(byteArray5);
        jarArchiveEntry2.setComment("ZipLong value: 11");
        java.util.Date date11 = jarArchiveEntry2.getLastModifiedDate();
        java.util.Date date12 = jarArchiveEntry2.getLastModifiedDate();
        jarArchiveEntry2.setComment("070701");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException15 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature0, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry2);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray17 = jarArchiveEntry2.getExtraFields(false);
        org.junit.Assert.assertNotNull(feature0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(zipExtraFieldArray17);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        org.apache.commons.compress.archivers.sevenz.SevenZMethod sevenZMethod0 = null;
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration sevenZMethodConfiguration1 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration(sevenZMethod0);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        int int2 = cpioArchiveEntry1.getHeaderSize();
        cpioArchiveEntry1.setGID((long) 4096);
        int int5 = cpioArchiveEntry1.getHeaderSize();
        cpioArchiveEntry1.setGID((-1687259977609L));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 110 + "'", int2 == 110);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 110 + "'", int5 == 110);
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        int int2 = cpioArchiveEntry1.getHeaderSize();
        cpioArchiveEntry1.setDeviceMaj((long) (byte) 52);
        long long5 = cpioArchiveEntry1.getUID();
        boolean boolean6 = cpioArchiveEntry1.isDirectory();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 110 + "'", int2 == 110);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = jarMarker0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = jarMarker0.getHeaderId();
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField3 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        boolean boolean4 = asiExtraField3.isLink();
        int int5 = asiExtraField3.getMode();
        boolean boolean6 = asiExtraField3.isDirectory();
        byte[] byteArray7 = asiExtraField3.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            jarMarker0.parseFromLocalFileData(byteArray7, 131, 488);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: JarMarker doesn't expect any data");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jarMarker0);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[118, 104, -118, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        byte[] byteArray3 = new byte[] { (byte) -1 };
        byte[] byteArray4 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray3);
        boolean boolean6 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray4, (int) (short) -1);
        jarArchiveEntry1.setExtra(byteArray4);
        jarArchiveEntry1.setComment("ZipLong value: 11");
        java.util.Date date10 = jarArchiveEntry1.getLastModifiedDate();
        java.util.Date date11 = jarArchiveEntry1.getLastModifiedDate();
        jarArchiveEntry1.setInternalAttributes((int) '4');
        boolean boolean14 = jarArchiveEntry1.isDirectory();
        java.security.cert.Certificate[] certificateArray15 = jarArchiveEntry1.getCertificates();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(certificateArray15);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        int int3 = tarArchiveEntry2.getUserId();
        long long4 = tarArchiveEntry2.getLongGroupId();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer1 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream2);
        long long5 = cpioArchiveInputStream3.skip((long) (byte) 100);
        cpioArchiveInputStream3.mark(6);
        boolean boolean8 = cpioArchiveInputStream3.markSupported();
        boolean boolean9 = cpioArchiveInputStream3.markSupported();
        closeableConsumer1.accept((java.io.Closeable) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = jarArchiveInputStream11.getNextZipEntry();
        java.io.File file13 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream11, file13);
        byte[] byteArray20 = new byte[] { (byte) 88, (byte) 50, (byte) -1, (byte) 88, (byte) 75 };
        org.apache.commons.compress.archivers.tar.TarFile tarFile21 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray20);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveEntry> tarArchiveEntryList22 = tarFile21.getEntries();
        java.nio.file.Path path23 = null;
        expander0.expand(tarFile21, path23);
        org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile25 = null;
        java.io.File file26 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand(sevenZFile25, file26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(zipArchiveEntry12);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[88, 50, -1, 88, 75]");
        org.junit.Assert.assertNotNull(tarArchiveEntryList22);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        org.apache.commons.compress.archivers.tar.TarArchiveStructSparse tarArchiveStructSparse2 = new org.apache.commons.compress.archivers.tar.TarArchiveStructSparse((long) 9, (long) (short) 1);
        long long3 = tarArchiveStructSparse2.getNumbytes();
        java.util.concurrent.ExecutorService executorService4 = null;
        java.util.concurrent.ExecutorService executorService5 = null;
        java.nio.file.Path path6 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier7 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path6);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore8 = defaultBackingStoreSupplier7.get();
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator9 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService5, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier7);
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator10 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService4, (org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier) defaultBackingStoreSupplier7);
        boolean boolean11 = tarArchiveStructSparse2.equals((java.lang.Object) defaultBackingStoreSupplier7);
        long long12 = tarArchiveStructSparse2.getOffset();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 9L + "'", long12 == 9L);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream0, "apks");
        int int4 = tarArchiveInputStream3.getRecordSize();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream9 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream3, (int) (byte) 49, 40960, "7z", false);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = tarArchiveInputStream3.available();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 512 + "'", int4 == 512);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("", seekableByteChannel2, file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: \"ch\" is null!");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isSparse();
        tarArchiveEntry2.setMode(26127);
        java.util.Date date6 = tarArchiveEntry2.getModTime();
        boolean boolean7 = tarArchiveEntry2.isPaxHeader();
        tarArchiveEntry2.setDevMinor((int) (short) 2);
        java.nio.file.attribute.FileTime fileTime10 = tarArchiveEntry2.getStatusChangeTime();
        boolean boolean11 = tarArchiveEntry2.isBlockDevice();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jun 20 13:19:40 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(fileTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isSparse();
        tarArchiveEntry2.setMode(26127);
        java.util.Date date6 = tarArchiveEntry2.getModTime();
        boolean boolean7 = tarArchiveEntry2.isBlockDevice();
        java.lang.String str8 = tarArchiveEntry2.getGroupName();
        java.nio.file.attribute.FileTime fileTime9 = tarArchiveEntry2.getLastAccessTime();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jun 20 13:19:40 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(fileTime9);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet1 = org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.find(6);
        org.junit.Assert.assertNotNull(pERMISSIONSet1);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        int int11 = jarArchiveInputStream10.read();
        long long12 = jarArchiveInputStream10.getUncompressedCount();
        long long13 = jarArchiveInputStream10.getUncompressedCount();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream15 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream17 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream14, false);
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        jarArchiveEntry1.setVersionMadeBy(508);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry13 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveEntry13.removeUnparseableExtraFieldData();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm encryptionAlgorithm1 = x0017_StrongEncryptionHeader0.getEncryptionAlgorithm();
        byte[] byteArray2 = x0017_StrongEncryptionHeader0.getLocalFileDataData();
        byte[] byteArray4 = new byte[] { (byte) -1 };
        byte[] byteArray5 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseFileFormat(byteArray4, 2, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(encryptionAlgorithm1);
        org.junit.Assert.assertNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1]");
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes(156L);
        // The following exception was thrown during execution in test generation
        try {
            long long3 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray1, 420);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 420");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-100, 0, 0, 0]");
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory1 = new org.apache.commons.compress.archivers.ArchiveStreamFactory("hi!");
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.archivers.ArchiveStreamProvider> strMap2 = archiveStreamFactory1.getArchiveInputStreamProviders();
        java.lang.String str3 = archiveStreamFactory1.getEntryEncoding();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer5 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream6 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream7 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream6);
        long long9 = cpioArchiveInputStream7.skip((long) (byte) 100);
        cpioArchiveInputStream7.mark(6);
        boolean boolean12 = cpioArchiveInputStream7.markSupported();
        boolean boolean13 = cpioArchiveInputStream7.markSupported();
        closeableConsumer5.accept((java.io.Closeable) cpioArchiveInputStream7);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream7);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry16 = jarArchiveInputStream15.getNextZipEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry17 = null;
        boolean boolean18 = jarArchiveInputStream15.canReadEntryData(archiveEntry17);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream20 = archiveStreamFactory1.createArchiveInputStream("xapk", (java.io.InputStream) jarArchiveInputStream15, "");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: xapk not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(closeableConsumer5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(zipArchiveEntry16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream1);
        int int7 = tarArchiveOutputStream6.getRecordSize();
        int int8 = tarArchiveOutputStream6.getCount();
        tarArchiveOutputStream6.flush();
        java.nio.file.Path path10 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create((org.apache.commons.compress.archivers.ArchiveOutputStream) tarArchiveOutputStream6, path10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 512 + "'", int7 == 512);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        java.nio.charset.Charset charset2 = null;
        int int3 = cpioArchiveEntry1.getHeaderPadCount(charset2);
        long long4 = cpioArchiveEntry1.getDeviceMaj();
        boolean boolean5 = cpioArchiveEntry1.isDirectory();
        long long6 = cpioArchiveEntry1.getSize();
        long long7 = cpioArchiveEntry1.getGID();
        boolean boolean8 = cpioArchiveEntry1.isPipe();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong2 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (byte) 1);
        java.lang.String str3 = zipLong2.toString();
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong2);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger5 = zip64ExtendedInformationExtraField0.getSize();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField6 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong8 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (byte) 1);
        java.lang.String str9 = zipLong8.toString();
        zip64ExtendedInformationExtraField6.setDiskStartNumber(zipLong8);
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong8);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = zip64ExtendedInformationExtraField0.getCentralDirectoryLength();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ZipLong value: 1" + "'", str3, "ZipLong value: 1");
        org.junit.Assert.assertNull(zipEightByteInteger5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ZipLong value: 1" + "'", str9, "ZipLong value: 1");
        org.junit.Assert.assertNotNull(zipShort12);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isSparse();
        tarArchiveEntry2.setMode(26127);
        java.util.Date date6 = tarArchiveEntry2.getModTime();
        java.lang.String str7 = tarArchiveEntry2.getUserName();
        boolean boolean8 = tarArchiveEntry2.isStarSparse();
        boolean boolean9 = tarArchiveEntry2.isGNUSparse();
        java.lang.String str10 = tarArchiveEntry2.getLinkName();
        java.lang.String str11 = tarArchiveEntry2.getLinkName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jun 20 13:19:41 CEST 2023");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream1);
        tarArchiveOutputStream6.setLongFileMode(0);
        int int9 = tarArchiveOutputStream6.getRecordSize();
        tarArchiveOutputStream6.setAddPaxHeadersForNonAsciiNames(true);
        java.nio.file.Path path12 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create((org.apache.commons.compress.archivers.ArchiveOutputStream) tarArchiveOutputStream6, path12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        zipArchiveEntry10.setTime((long) (byte) 1);
        int int13 = zipArchiveEntry10.getInternalAttributes();
        boolean boolean14 = zipArchiveEntry10.isUnixSymlink();
        zipArchiveEntry10.setUnixMode(32);
        boolean boolean18 = zipArchiveEntry10.equals((java.lang.Object) "ustar ");
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData19 = zipArchiveEntry10.getUnparseableExtraFieldData();
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(unparseableExtraFieldData19);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        long long4 = cpioArchiveInputStream1.getBytesRead();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField5 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray7 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField11 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField5, byteArray7, 0, 0, false);
        int int12 = cpioArchiveInputStream1.read(byteArray7);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1, 16384);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream18 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1, (int) (byte) 100, 345, "ustar ");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ustar ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile5 = new org.apache.commons.compress.archivers.zip.ZipFile(seekableByteChannel0, "xapk", "compression method", true, true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: compression method");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream5.write((int) (byte) 120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        java.util.concurrent.ExecutorService executorService0 = null;
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator1 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator(executorService0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode5 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = extraFieldParsingMode5.createExtraField(zipShort6);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = extraFieldParsingMode2.createExtraField(zipShort6);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature9 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD;
        java.lang.String str10 = feature9.toString();
        boolean boolean11 = zipShort6.equals((java.lang.Object) feature9);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry13 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj14 = jarArchiveEntry13.clone();
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException15 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature9, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry13);
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData16 = jarArchiveEntry13.getUnparseableExtraFieldData();
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable18 = parallelScatterZipCreator1.createCallable((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry13, inputStreamSupplier17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must be set on zipArchiveEntry: 070707");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNotNull(extraFieldParsingMode5);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(zipExtraField8);
        org.junit.Assert.assertNotNull(feature9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "compression method" + "'", str10, "compression method");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "070707");
        org.junit.Assert.assertNull(unparseableExtraFieldData16);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long3 = tarArchiveEntry2.getDataOffset();
        boolean boolean4 = tarArchiveEntry2.isCharacterDevice();
        long long5 = tarArchiveEntry2.getDataOffset();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream0, "apks");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean7 = tarArchiveEntry6.isSparse();
        tarArchiveEntry6.setUserId((int) ' ');
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean13 = tarArchiveEntry6.isDescendent(tarArchiveEntry12);
        boolean boolean14 = tarArchiveInputStream3.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry12);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream3, false);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry17 = tarArchiveInputStream16.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        long long4 = cpioArchiveInputStream1.getBytesRead();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1, 100);
        int int7 = tarArchiveInputStream6.getRecordSize();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream8 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream6);
        tarArchiveInputStream6.reset();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = tarArchiveInputStream6.skip((long) (byte) 75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 512 + "'", int7 == 512);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField0, byteArray2, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger7 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray8 = zipEightByteInteger7.getBytes();
        zip64ExtendedInformationExtraField0.setCompressedSize(zipEightByteInteger7);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp10 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.file.attribute.FileTime fileTime11 = x5455_ExtendedTimestamp10.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = x5455_ExtendedTimestamp10.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp13 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.file.attribute.FileTime fileTime14 = x5455_ExtendedTimestamp13.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort15 = x5455_ExtendedTimestamp13.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong17 = new org.apache.commons.compress.archivers.zip.ZipLong((long) 0);
        x5455_ExtendedTimestamp13.setModifyTime(zipLong17);
        x5455_ExtendedTimestamp10.setAccessTime(zipLong17);
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong17);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField6);
        org.junit.Assert.assertNotNull(zipEightByteInteger7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(fileTime11);
        org.junit.Assert.assertNotNull(zipShort12);
        org.junit.Assert.assertNull(fileTime14);
        org.junit.Assert.assertNotNull(zipShort15);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getCreateTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x000A_NTFS0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField3 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (byte) 1);
        java.lang.String str6 = zipLong5.toString();
        zip64ExtendedInformationExtraField3.setDiskStartNumber(zipLong5);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray9 = zipEightByteInteger8.getBytes();
        java.lang.String str10 = zipEightByteInteger8.toString();
        zip64ExtendedInformationExtraField3.setCompressedSize(zipEightByteInteger8);
        java.lang.String str12 = zipEightByteInteger8.toString();
        x000A_NTFS0.setAccessTime(zipEightByteInteger8);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger14 = x000A_NTFS0.getAccessTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger16 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger((-1L));
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger17 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray18 = zipEightByteInteger17.getBytes();
        java.lang.String str19 = zipEightByteInteger17.toString();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField20 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger16, zipEightByteInteger17);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField21 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField27 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField21, byteArray23, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger28 = null;
        zip64ExtendedInformationExtraField21.setRelativeHeaderOffset(zipEightByteInteger28);
        byte[] byteArray30 = zip64ExtendedInformationExtraField21.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort31 = zip64ExtendedInformationExtraField21.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField32 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField38 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField32, byteArray34, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger39 = null;
        zip64ExtendedInformationExtraField32.setRelativeHeaderOffset(zipEightByteInteger39);
        byte[] byteArray41 = zip64ExtendedInformationExtraField32.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger42 = zip64ExtendedInformationExtraField32.getSize();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger43 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray44 = zipEightByteInteger43.getBytes();
        java.lang.String str45 = zipEightByteInteger43.toString();
        zip64ExtendedInformationExtraField32.setCompressedSize(zipEightByteInteger43);
        zip64ExtendedInformationExtraField21.setRelativeHeaderOffset(zipEightByteInteger43);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField48 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField54 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField48, byteArray50, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger55 = null;
        zip64ExtendedInformationExtraField48.setRelativeHeaderOffset(zipEightByteInteger55);
        byte[] byteArray57 = zip64ExtendedInformationExtraField48.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort58 = zip64ExtendedInformationExtraField48.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField59 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField65 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField59, byteArray61, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger66 = null;
        zip64ExtendedInformationExtraField59.setRelativeHeaderOffset(zipEightByteInteger66);
        byte[] byteArray68 = zip64ExtendedInformationExtraField59.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger69 = zip64ExtendedInformationExtraField59.getSize();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger70 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray71 = zipEightByteInteger70.getBytes();
        java.lang.String str72 = zipEightByteInteger70.toString();
        zip64ExtendedInformationExtraField59.setCompressedSize(zipEightByteInteger70);
        zip64ExtendedInformationExtraField48.setRelativeHeaderOffset(zipEightByteInteger70);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger76 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger((-1L));
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger77 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray78 = zipEightByteInteger77.getBytes();
        java.lang.String str79 = zipEightByteInteger77.toString();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField80 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger76, zipEightByteInteger77);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField81 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong83 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (byte) 1);
        java.lang.String str84 = zipLong83.toString();
        zip64ExtendedInformationExtraField81.setDiskStartNumber(zipLong83);
        byte[] byteArray86 = zipLong83.getBytes();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField87 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger43, zipEightByteInteger70, zipEightByteInteger77, zipLong83);
        zip64ExtendedInformationExtraField20.setCompressedSize(zipEightByteInteger70);
        x000A_NTFS0.setModifyTime(zipEightByteInteger70);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger90 = x000A_NTFS0.getAccessTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger92 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger((-1L));
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger93 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray94 = zipEightByteInteger93.getBytes();
        java.lang.String str95 = zipEightByteInteger93.toString();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField96 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger92, zipEightByteInteger93);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField97 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger90, zipEightByteInteger93);
        java.math.BigInteger bigInteger98 = zipEightByteInteger90.getValue();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ZipLong value: 1" + "'", str6, "ZipLong value: 1");
        org.junit.Assert.assertNotNull(zipEightByteInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ZipEightByteInteger value: 0" + "'", str10, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ZipEightByteInteger value: 0" + "'", str12, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(zipEightByteInteger14);
        org.junit.Assert.assertNotNull(zipEightByteInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZipEightByteInteger value: 0" + "'", str19, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(zipShort31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNull(zipEightByteInteger42);
        org.junit.Assert.assertNotNull(zipEightByteInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ZipEightByteInteger value: 0" + "'", str45, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(zipShort58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNull(zipEightByteInteger69);
        org.junit.Assert.assertNotNull(zipEightByteInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ZipEightByteInteger value: 0" + "'", str72, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(zipEightByteInteger77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ZipEightByteInteger value: 0" + "'", str79, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ZipLong value: 1" + "'", str84, "ZipLong value: 1");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipEightByteInteger90);
        org.junit.Assert.assertNotNull(zipEightByteInteger93);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ZipEightByteInteger value: 0" + "'", str95, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(bigInteger98);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory x0016_CertificateIdForCentralDirectory0 = new org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory();
        int int1 = x0016_CertificateIdForCentralDirectory0.getRecordCount();
        int int2 = x0016_CertificateIdForCentralDirectory0.getRecordCount();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = x0016_CertificateIdForCentralDirectory0.getHeaderId();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(zipShort3);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x7875_NewUnix0.getLocalFileDataLength();
        byte[] byteArray2 = x7875_NewUnix0.getLocalFileDataData();
        java.lang.String str3 = x7875_NewUnix0.toString();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry5 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj6 = jarArchiveEntry5.clone();
        int int7 = jarArchiveEntry5.getInternalAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource8 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD;
        jarArchiveEntry5.setNameSource(nameSource8);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource10 = jarArchiveEntry5.getNameSource();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode11 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort12 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = extraFieldParsingMode11.createExtraField(zipShort12);
        jarArchiveEntry5.addExtraField(zipExtraField13);
        byte[] byteArray15 = jarArchiveEntry5.getCentralDirectoryExtra();
        x7875_NewUnix0.parseFromCentralDirectoryData(byteArray15, 4095, 4096);
        x7875_NewUnix0.setUID((long) (short) 3);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1, 2, -24, 3, 2, -24, 3]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "0x7875 Zip Extra Field: UID=1000 GID=1000" + "'", str3, "0x7875 Zip Extra Field: UID=1000 GID=1000");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "070707");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + nameSource8 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource8.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertTrue("'" + nameSource10 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD + "'", nameSource10.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.UNICODE_EXTRA_FIELD));
        org.junit.Assert.assertNotNull(extraFieldParsingMode11);
        org.junit.Assert.assertNotNull(zipShort12);
        org.junit.Assert.assertNotNull(zipExtraField13);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[85, 84, 1, 0, 0]");
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        parallelScatterZipCreator0.writeTo(zipArchiveOutputStream6);
        zipArchiveOutputStream6.setFallbackToUTF8(true);
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode11 = org.apache.commons.compress.archivers.zip.Zip64Mode.Never;
        zipArchiveOutputStream6.setUseZip64(zip64Mode11);
        zipArchiveOutputStream6.setMethod(29127);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream6);
        arArchiveOutputStream15.setLongFileMode(493);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
        org.junit.Assert.assertTrue("'" + zip64Mode11 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.Never + "'", zip64Mode11.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.Never));
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode1 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField3 = extraFieldParsingMode1.createExtraField(zipShort2);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = extraFieldParsingMode4.createExtraField(zipShort5);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = extraFieldParsingMode1.createExtraField(zipShort5);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature8 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD;
        java.lang.String str9 = feature8.toString();
        boolean boolean10 = zipShort5.equals((java.lang.Object) feature8);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry12 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj13 = jarArchiveEntry12.clone();
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException14 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature8, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry12);
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable16 = parallelScatterZipCreator0.createCallable((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry12, inputStreamSupplier15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must be set on zipArchiveEntry: 070707");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipExtraField3);
        org.junit.Assert.assertNotNull(extraFieldParsingMode4);
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertNotNull(zipExtraField6);
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(feature8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "compression method" + "'", str9, "compression method");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "070707");
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp0.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean6 = tarArchiveEntry5.isSparse();
        tarArchiveEntry5.setMode(26127);
        java.util.Date date9 = tarArchiveEntry5.getModTime();
        x5455_ExtendedTimestamp0.setModifyJavaTime(date9);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = x5455_ExtendedTimestamp0.getHeaderId();
        byte[] byteArray12 = x5455_ExtendedTimestamp0.getLocalFileDataData();
        boolean boolean14 = org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byteArray12, (-1));
        int int15 = org.apache.commons.compress.archivers.zip.ZipShort.getValue(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Jun 20 13:19:42 CEST 2023");
        org.junit.Assert.assertNotNull(zipShort11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 78, -117, -111, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19969 + "'", int15 == 19969);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.file.attribute.FileTime fileTime1 = x5455_ExtendedTimestamp0.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x5455_ExtendedTimestamp0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong4 = new org.apache.commons.compress.archivers.zip.ZipLong((long) 0);
        x5455_ExtendedTimestamp0.setModifyTime(zipLong4);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = x5455_ExtendedTimestamp0.getLocalFileDataLength();
        boolean boolean7 = x5455_ExtendedTimestamp0.isBit1_accessTimePresent();
        org.junit.Assert.assertNull(fileTime1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer1 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream2);
        long long5 = cpioArchiveInputStream3.skip((long) (byte) 100);
        cpioArchiveInputStream3.mark(6);
        boolean boolean8 = cpioArchiveInputStream3.markSupported();
        boolean boolean9 = cpioArchiveInputStream3.markSupported();
        closeableConsumer1.accept((java.io.Closeable) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = jarArchiveInputStream11.getNextZipEntry();
        java.io.File file13 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream11, file13);
        byte[] byteArray20 = new byte[] { (byte) 88, (byte) 50, (byte) -1, (byte) 88, (byte) 75 };
        org.apache.commons.compress.archivers.tar.TarFile tarFile21 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray20);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveEntry> tarArchiveEntryList22 = tarFile21.getEntries();
        java.nio.file.Path path23 = null;
        expander0.expand(tarFile21, path23);
        java.io.InputStream inputStream25 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream26 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream25);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream28 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream25, "apks");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry31 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean32 = tarArchiveEntry31.isSparse();
        tarArchiveEntry31.setUserId((int) ' ');
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry37 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean38 = tarArchiveEntry31.isDescendent(tarArchiveEntry37);
        boolean boolean39 = tarArchiveInputStream28.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry37);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream41 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream28, false);
        java.io.File file42 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) tarArchiveInputStream41, file42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(zipArchiveEntry12);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[88, 50, -1, 88, 75]");
        org.junit.Assert.assertNotNull(tarArchiveEntryList22);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        org.apache.commons.compress.archivers.zip.UnrecognizedExtraField unrecognizedExtraField0 = new org.apache.commons.compress.archivers.zip.UnrecognizedExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = unrecognizedExtraField0.getHeaderId();
        byte[] byteArray3 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime((long) 4);
        // The following exception was thrown during execution in test generation
        try {
            unrecognizedExtraField0.parseFromCentralDirectoryData(byteArray3, 155, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 33, 0]");
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE tYPE0 = org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN;
        org.junit.Assert.assertTrue("'" + tYPE0 + "' != '" + org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN + "'", tYPE0.equals(org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN));
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("070707", "ustar\000");
        dumpArchiveEntry2.setOffset((long) (byte) 51);
        long long5 = dumpArchiveEntry2.getSize();
        boolean boolean6 = dumpArchiveEntry2.isFifo();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = jarArchiveInputStream10.getNextZipEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry12 = null;
        boolean boolean13 = jarArchiveInputStream10.canReadEntryData(archiveEntry12);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = jarArchiveInputStream10.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) jarArchiveInputStream15, "ar");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream19 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream17, "unknown compressed size");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: unknown compressed size");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(zipArchiveEntry11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(archiveEntry14);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray2 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField0, byteArray2, 0, 0, false);
        byte[] byteArray7 = zip64ExtendedInformationExtraField0.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray7, (int) (byte) 49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = null;
        zip64ExtendedInformationExtraField0.setDiskStartNumber(zipLong1);
        zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(false, true, true, true);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = zip64ExtendedInformationExtraField0.getSize();
        org.junit.Assert.assertNull(zipEightByteInteger8);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory1 = new org.apache.commons.compress.archivers.ArchiveStreamFactory("hi!");
        java.io.OutputStream outputStream3 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream3);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream3);
        arArchiveOutputStream5.finish();
        arArchiveOutputStream5.flush();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream5, "070701");
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream11 = archiveStreamFactory1.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream9, "UTF8");
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream12 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) archiveOutputStream11);
        arArchiveOutputStream12.setLongFileMode(493);
        // The following exception was thrown during execution in test generation
        try {
            arArchiveOutputStream12.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(archiveOutputStream11);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry3.setNames("", "ZipLong value: 1");
        int int7 = tarArchiveEntry3.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry10 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean11 = tarArchiveEntry10.isSparse();
        tarArchiveEntry10.setMode(26127);
        java.nio.file.attribute.FileTime fileTime14 = tarArchiveEntry10.getLastModifiedTime();
        tarArchiveEntry3.setModTime(fileTime14);
        tarArchiveEntry3.addPaxHeader("apkm", "compressionElapsed=-1687259893320ms, mergingElapsed=0ms");
        byte[] byteArray20 = new byte[] { (byte) -1 };
        byte[] byteArray21 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray20);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding23 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("splitting");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField25 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray27 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField31 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField25, byteArray27, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger32 = null;
        zip64ExtendedInformationExtraField25.setRelativeHeaderOffset(zipEightByteInteger32);
        byte[] byteArray34 = zip64ExtendedInformationExtraField25.getLocalFileDataData();
        byte[] byteArray35 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray34);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField36 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray34);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray38 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray34, true);
        java.lang.String str39 = zipEncoding23.decode(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveEntry3.parseTarHeader(byteArray20, zipEncoding23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(fileTime14);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1]");
        org.junit.Assert.assertNotNull(zipEncoding23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField11 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField17 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField11, byteArray13, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger18 = null;
        zip64ExtendedInformationExtraField11.setRelativeHeaderOffset(zipEightByteInteger18);
        byte[] byteArray20 = zip64ExtendedInformationExtraField11.getLocalFileDataData();
        zipArchiveEntry10.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField11);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry22 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry(zipArchiveEntry10);
        boolean boolean23 = jarArchiveEntry22.isStreamContiguous();
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream1 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.arj.ArjArchiveInputStream arjArchiveInputStream2 = new org.apache.commons.compress.archivers.arj.ArjArchiveInputStream(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (byte) 75, true);
        short short3 = resourceAlignmentExtraField2.getAlignment();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = resourceAlignmentExtraField2.getHeaderId();
        short short5 = resourceAlignmentExtraField2.getAlignment();
        org.junit.Assert.assertTrue("'" + short3 + "' != '" + (short) 75 + "'", short3 == (short) 75);
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertTrue("'" + short5 + "' != '" + (short) 75 + "'", short5 == (short) 75);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = new org.apache.commons.compress.archivers.zip.ZipShort((int) (byte) 88);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        org.apache.commons.compress.archivers.zip.ZipShort zipShort0 = org.apache.commons.compress.archivers.zip.X000A_NTFS.HEADER_ID;
        org.junit.Assert.assertNotNull(zipShort0);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = jarMarker0.getLocalFileDataLength();
        byte[] byteArray2 = jarMarker0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = jarMarker0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = jarMarker0.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = jarMarker0.getHeaderId();
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField6 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry8 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry10 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        byte[] byteArray12 = new byte[] { (byte) -1 };
        byte[] byteArray13 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray12);
        boolean boolean15 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray13, (int) (short) -1);
        jarArchiveEntry10.setExtra(byteArray13);
        jarArchiveEntry8.setCentralDirectoryExtra(byteArray13);
        unicodePathExtraField6.setUnicodeName(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            jarMarker0.parseFromCentralDirectoryData(byteArray13, 110, 12);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: JarMarker doesn't expect any data");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jarMarker0);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        zipArchiveOutputStream6.setUseLanguageEncodingFlag(false);
        java.nio.file.Path path10 = null;
        java.util.EnumSet<java.nio.file.FileVisitOption> fileVisitOptionSet11 = org.apache.commons.compress.archivers.examples.Archiver.EMPTY_FileVisitOption;
        java.nio.file.LinkOption linkOption12 = null;
        java.nio.file.LinkOption[] linkOptionArray13 = new java.nio.file.LinkOption[] { linkOption12 };
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create((org.apache.commons.compress.archivers.ArchiveOutputStream) zipArchiveOutputStream6, path10, fileVisitOptionSet11, linkOptionArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
        org.junit.Assert.assertNotNull(fileVisitOptionSet11);
        org.junit.Assert.assertNotNull(linkOptionArray13);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile x0015_CertificateIdForFile0 = new org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode1 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField3 = extraFieldParsingMode1.createExtraField(zipShort2);
        byte[] byteArray4 = zipExtraField3.getCentralDirectoryData();
        x0015_CertificateIdForFile0.setCentralDirectoryData(byteArray4);
        boolean boolean7 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray4, 6);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray4, (int) (byte) 12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 12");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipExtraField3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isSparse();
        java.lang.String str4 = tarArchiveEntry2.getName();
        java.nio.file.attribute.FileTime fileTime5 = tarArchiveEntry2.getLastAccessTime();
        tarArchiveEntry2.setUserId(60011);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(fileTime5);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry2 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        byte[] byteArray4 = new byte[] { (byte) -1 };
        byte[] byteArray5 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray4);
        boolean boolean7 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray5, (int) (short) -1);
        jarArchiveEntry2.setExtra(byteArray5);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes("compressionElapsed=-1687259892275ms, mergingElapsed=0ms", byteArray5, 420, 64, zipEncoding11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.util.jar.Attributes attributes2 = jarArchiveEntry1.getManifestAttributes();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode3 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = extraFieldParsingMode3.createExtraField(zipShort4);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp6 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp6.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean12 = tarArchiveEntry11.isSparse();
        tarArchiveEntry11.setMode(26127);
        java.util.Date date15 = tarArchiveEntry11.getModTime();
        x5455_ExtendedTimestamp6.setModifyJavaTime(date15);
        byte[] byteArray18 = new byte[] { (byte) -1 };
        byte[] byteArray19 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray18);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField23 = extraFieldParsingMode3.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp6, byteArray19, 0, 32768, true);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode24 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp25 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp25.setFlags((byte) 75);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField29 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField35 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField29, byteArray31, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger36 = null;
        zip64ExtendedInformationExtraField29.setRelativeHeaderOffset(zipEightByteInteger36);
        byte[] byteArray38 = zip64ExtendedInformationExtraField29.getLocalFileDataData();
        byte[] byteArray39 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray38);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField40 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray38);
        boolean boolean41 = x5455_ExtendedTimestamp25.equals((java.lang.Object) unicodeCommentExtraField40);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort42 = x5455_ExtendedTimestamp25.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField43 = extraFieldParsingMode24.createExtraField(zipShort42);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField44 = extraFieldParsingMode3.createExtraField(zipShort42);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray45 = jarArchiveEntry1.getExtraFields((org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode46 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort47 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField48 = extraFieldParsingMode46.createExtraField(zipShort47);
        byte[] byteArray49 = zipExtraField48.getCentralDirectoryData();
        boolean boolean51 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray49, 11);
        jarArchiveEntry1.setExtra(byteArray49);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS53 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger54 = x000A_NTFS53.getCreateTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort55 = x000A_NTFS53.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField56 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong58 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (byte) 1);
        java.lang.String str59 = zipLong58.toString();
        zip64ExtendedInformationExtraField56.setDiskStartNumber(zipLong58);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger61 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray62 = zipEightByteInteger61.getBytes();
        java.lang.String str63 = zipEightByteInteger61.toString();
        zip64ExtendedInformationExtraField56.setCompressedSize(zipEightByteInteger61);
        java.lang.String str65 = zipEightByteInteger61.toString();
        x000A_NTFS53.setAccessTime(zipEightByteInteger61);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry69 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean70 = tarArchiveEntry69.isSparse();
        tarArchiveEntry69.setMode(26127);
        java.nio.file.attribute.FileTime fileTime73 = tarArchiveEntry69.getLastModifiedTime();
        x000A_NTFS53.setAccessFileTime(fileTime73);
        java.util.zip.ZipEntry zipEntry75 = jarArchiveEntry1.setLastModifiedTime(fileTime73);
        org.junit.Assert.assertNull(attributes2);
        org.junit.Assert.assertNotNull(extraFieldParsingMode3);
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNotNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Jun 20 13:19:44 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1]");
        org.junit.Assert.assertNotNull(zipExtraField23);
        org.junit.Assert.assertNotNull(extraFieldParsingMode24);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(zipShort42);
        org.junit.Assert.assertNotNull(zipExtraField43);
        org.junit.Assert.assertNotNull(zipExtraField44);
        org.junit.Assert.assertNotNull(zipExtraFieldArray45);
        org.junit.Assert.assertNotNull(extraFieldParsingMode46);
        org.junit.Assert.assertNotNull(zipShort47);
        org.junit.Assert.assertNotNull(zipExtraField48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(zipEightByteInteger54);
        org.junit.Assert.assertNotNull(zipShort55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ZipLong value: 1" + "'", str59, "ZipLong value: 1");
        org.junit.Assert.assertNotNull(zipEightByteInteger61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ZipEightByteInteger value: 0" + "'", str63, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ZipEightByteInteger value: 0" + "'", str65, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(fileTime73);
        org.junit.Assert.assertNotNull(zipEntry75);
        org.junit.Assert.assertEquals(zipEntry75.toString(), "070707");
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarFile tarFile2 = new org.apache.commons.compress.archivers.tar.TarFile(file0, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp0.setFlags((byte) 75);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField4 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField4, byteArray6, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = null;
        zip64ExtendedInformationExtraField4.setRelativeHeaderOffset(zipEightByteInteger11);
        byte[] byteArray13 = zip64ExtendedInformationExtraField4.getLocalFileDataData();
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray13);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField15 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray13);
        boolean boolean16 = x5455_ExtendedTimestamp0.equals((java.lang.Object) unicodeCommentExtraField15);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort17 = x5455_ExtendedTimestamp0.getHeaderId();
        java.nio.file.attribute.FileTime fileTime18 = x5455_ExtendedTimestamp0.getAccessFileTime();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zipShort17);
        org.junit.Assert.assertNull(fileTime18);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        byte byte1 = org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte((int) (byte) 55);
        org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 55 + "'", byte1 == (byte) 55);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode0 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.BEST_EFFORT;
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField1 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = asiExtraField1.getCentralDirectoryLength();
        byte[] byteArray3 = asiExtraField1.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = asiExtraField1.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = extraFieldParsingMode0.createExtraField(zipShort4);
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField6 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = asiExtraField6.getCentralDirectoryLength();
        byte[] byteArray8 = asiExtraField6.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort9 = asiExtraField6.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = extraFieldParsingMode0.createExtraField(zipShort9);
        org.junit.Assert.assertNotNull(extraFieldParsingMode0);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[118, 104, -118, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNotNull(zipExtraField5);
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[118, 104, -118, -29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipShort9);
        org.junit.Assert.assertNotNull(zipExtraField10);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry3.setNames("", "ZipLong value: 1");
        int int7 = tarArchiveEntry3.getGroupId();
        tarArchiveEntry3.setNames("apks", "arj");
        boolean boolean11 = tarArchiveEntry3.isLink();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField12 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray14 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField18 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField12, byteArray14, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger19 = null;
        zip64ExtendedInformationExtraField12.setRelativeHeaderOffset(zipEightByteInteger19);
        byte[] byteArray21 = zip64ExtendedInformationExtraField12.getLocalFileDataData();
        boolean boolean23 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray21, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveEntry3.parseTarHeader(byteArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isSparse();
        tarArchiveEntry2.setMode(26127);
        java.util.Date date6 = tarArchiveEntry2.getModTime();
        java.lang.String str7 = tarArchiveEntry2.getUserName();
        boolean boolean8 = tarArchiveEntry2.isSparse();
        boolean boolean9 = tarArchiveEntry2.isSparse();
        boolean boolean10 = tarArchiveEntry2.isStreamContiguous();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jun 20 13:19:44 CEST 2023");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray11 = jarArchiveEntry1.getExtraFields();
        int int12 = jarArchiveEntry1.getRawFlag();
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertNotNull(zipExtraFieldArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("././@LongLink", (byte) 83);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getCreateTime();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong3 = new org.apache.commons.compress.archivers.zip.ZipLong((long) 0);
        int int4 = zipLong3.getIntValue();
        java.util.Date date5 = org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(zipLong3);
        x000A_NTFS0.setAccessJavaTime(date5);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        java.nio.charset.Charset charset9 = null;
        int int10 = cpioArchiveEntry8.getHeaderPadCount(charset9);
        boolean boolean11 = cpioArchiveEntry8.isBlockDevice();
        boolean boolean12 = cpioArchiveEntry8.isDirectory();
        cpioArchiveEntry8.setRemoteDeviceMin((long) 488);
        java.util.Date date15 = cpioArchiveEntry8.getLastModifiedDate();
        x000A_NTFS0.setCreateJavaTime(date15);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort17 = x000A_NTFS0.getCentralDirectoryLength();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Nov 30 00:00:00 CET 1979");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(zipShort17);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel0, "0x000A Zip Extra Field: Modify:[null]  Access:[1979-11-29T23:00:00Z]  Create:[1970-01-01T00:00:00Z] ");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("arj", (long) 488);
        long long3 = cpioArchiveEntry2.getChksum();
        cpioArchiveEntry2.setUID(8589934591L);
        // The following exception was thrown during execution in test generation
        try {
            long long6 = cpioArchiveEntry2.getRemoteDevice();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        int int11 = jarArchiveInputStream10.read();
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry12 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        sevenZArchiveEntry12.setName("ustar ");
        sevenZArchiveEntry12.setCrc(131);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry19 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean20 = tarArchiveEntry19.isSparse();
        tarArchiveEntry19.setUserName("ZipLong value: 1");
        boolean boolean23 = tarArchiveEntry19.isStreamContiguous();
        boolean boolean24 = tarArchiveEntry19.isStreamContiguous();
        tarArchiveEntry19.setDataOffset((long) (short) 100);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry30 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry30.setNames("", "ZipLong value: 1");
        int int34 = tarArchiveEntry30.getGroupId();
        tarArchiveEntry30.setNames("apks", "arj");
        boolean boolean38 = tarArchiveEntry19.isDescendent(tarArchiveEntry30);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry41 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean42 = tarArchiveEntry41.isSparse();
        tarArchiveEntry41.setMode(26127);
        java.nio.file.attribute.FileTime fileTime45 = tarArchiveEntry41.getLastModifiedTime();
        tarArchiveEntry19.setCreationTime(fileTime45);
        sevenZArchiveEntry12.setLastModifiedTime(fileTime45);
        boolean boolean48 = jarArchiveInputStream10.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) sevenZArchiveEntry12);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.arj.ArjArchiveInputStream arjArchiveInputStream50 = new org.apache.commons.compress.archivers.arj.ArjArchiveInputStream((java.io.InputStream) jarArchiveInputStream10, "ZipLong value: 1");
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: null");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(fileTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        cpioArchiveEntry1.setDeviceMin(133317334738600000L);
        java.util.Date date4 = cpioArchiveEntry1.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date4);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 01:00:00 CET 1970");
        org.junit.Assert.assertNotNull(zipLong5);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp0.setFlags((byte) 75);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField4 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField4, byteArray6, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = null;
        zip64ExtendedInformationExtraField4.setRelativeHeaderOffset(zipEightByteInteger11);
        byte[] byteArray13 = zip64ExtendedInformationExtraField4.getLocalFileDataData();
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray13);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField15 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray13);
        boolean boolean16 = x5455_ExtendedTimestamp0.equals((java.lang.Object) unicodeCommentExtraField15);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort17 = x5455_ExtendedTimestamp0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort18 = x5455_ExtendedTimestamp0.getHeaderId();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong19 = x5455_ExtendedTimestamp0.getAccessTime();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp20 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.file.attribute.FileTime fileTime21 = x5455_ExtendedTimestamp20.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort22 = x5455_ExtendedTimestamp20.getLocalFileDataLength();
        java.nio.file.attribute.FileTime fileTime23 = x5455_ExtendedTimestamp20.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong(0);
        int int26 = zipLong25.getIntValue();
        x5455_ExtendedTimestamp20.setAccessTime(zipLong25);
        byte[] byteArray28 = zipLong25.getBytes();
        x5455_ExtendedTimestamp0.parseFromLocalFileData(byteArray28, 2, (int) (byte) 75);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding33 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("splitting");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField35 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField41 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField35, byteArray37, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger42 = null;
        zip64ExtendedInformationExtraField35.setRelativeHeaderOffset(zipEightByteInteger42);
        byte[] byteArray44 = zip64ExtendedInformationExtraField35.getLocalFileDataData();
        byte[] byteArray45 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray44);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField46 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray44);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray48 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray44, true);
        java.lang.String str49 = zipEncoding33.decode(byteArray44);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry51 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray28, zipEncoding33, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zipShort17);
        org.junit.Assert.assertNotNull(zipShort18);
        org.junit.Assert.assertNull(zipLong19);
        org.junit.Assert.assertNull(fileTime21);
        org.junit.Assert.assertNotNull(zipShort22);
        org.junit.Assert.assertNull(fileTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipEncoding33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        zipArchiveOutputStream5.setUseLanguageEncodingFlag(false);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream5, "070701");
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream5.finish();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current CPIO entry");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        char[] charArray8 = new char[] { '4', '4', '#', '4', '#', ' ' };
        org.apache.commons.compress.archivers.sevenz.SevenZFileOptions sevenZFileOptions9 = org.apache.commons.compress.archivers.sevenz.SevenZFileOptions.DEFAULT;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile10 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel0, "0x7875 Zip Extra Field: UID=1000 GID=97", charArray8, sevenZFileOptions9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "44#4# ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "44#4# ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[4, 4, #, 4, #,  ]");
        org.junit.Assert.assertNotNull(sevenZFileOptions9);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        java.io.File file1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 100, file1, "");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry11 = jarArchiveInputStream10.getNextZipEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry12 = null;
        boolean boolean13 = jarArchiveInputStream10.canReadEntryData(archiveEntry12);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = jarArchiveInputStream10.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.arj.ArjArchiveInputStream arjArchiveInputStream16 = new org.apache.commons.compress.archivers.arj.ArjArchiveInputStream((java.io.InputStream) jarArchiveInputStream15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: null");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(zipArchiveEntry11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(archiveEntry14);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        boolean boolean1 = asiExtraField0.isLink();
        int int2 = asiExtraField0.getMode();
        asiExtraField0.setMode(10);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = asiExtraField0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = asiExtraField0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer7 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream8 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream8);
        long long11 = cpioArchiveInputStream9.skip((long) (byte) 100);
        cpioArchiveInputStream9.mark(6);
        boolean boolean14 = cpioArchiveInputStream9.markSupported();
        boolean boolean15 = cpioArchiveInputStream9.markSupported();
        closeableConsumer7.accept((java.io.Closeable) cpioArchiveInputStream9);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream9);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry18 = jarArchiveInputStream17.getNextZipEntry();
        long long20 = jarArchiveInputStream17.skip((long) 148);
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix21 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        byte[] byteArray22 = x7875_NewUnix21.getCentralDirectoryData();
        int int23 = jarArchiveInputStream17.read(byteArray22);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode25 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.BEST_EFFORT;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray26 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray22, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode25);
        // The following exception was thrown during execution in test generation
        try {
            asiExtraField0.parseFromLocalFileData(byteArray22, 110, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 110");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(closeableConsumer7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(zipArchiveEntry18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(extraFieldParsingMode25);
        org.junit.Assert.assertNotNull(zipExtraFieldArray26);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray10);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField12 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray10);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField14 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField14, byteArray16, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger21 = null;
        zip64ExtendedInformationExtraField14.setRelativeHeaderOffset(zipEightByteInteger21);
        byte[] byteArray23 = zip64ExtendedInformationExtraField14.getLocalFileDataData();
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray23);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField25 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray23);
        unicodeCommentExtraField12.setUnicodeName(byteArray23);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort27 = unicodeCommentExtraField12.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp28 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.file.attribute.FileTime fileTime29 = x5455_ExtendedTimestamp28.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort30 = x5455_ExtendedTimestamp28.getLocalFileDataLength();
        java.nio.file.attribute.FileTime fileTime31 = x5455_ExtendedTimestamp28.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong33 = new org.apache.commons.compress.archivers.zip.ZipLong(0);
        int int34 = zipLong33.getIntValue();
        x5455_ExtendedTimestamp28.setAccessTime(zipLong33);
        byte[] byteArray36 = zipLong33.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            unicodeCommentExtraField12.parseFromCentralDirectoryData(byteArray36, 19969, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19969");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(zipShort27);
        org.junit.Assert.assertNull(fileTime29);
        org.junit.Assert.assertNotNull(zipShort30);
        org.junit.Assert.assertNull(fileTime31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0]");
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode0 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField2 = extraFieldParsingMode0.createExtraField(zipShort1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode3 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = extraFieldParsingMode3.createExtraField(zipShort4);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = extraFieldParsingMode0.createExtraField(zipShort4);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature7 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD;
        java.lang.String str8 = feature7.toString();
        boolean boolean9 = zipShort4.equals((java.lang.Object) feature7);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry11 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj12 = jarArchiveEntry11.clone();
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException13 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature7, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry11);
        org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData unparseableExtraFieldData14 = jarArchiveEntry11.getUnparseableExtraFieldData();
        java.security.cert.Certificate[] certificateArray15 = jarArchiveEntry11.getCertificates();
        org.junit.Assert.assertNotNull(extraFieldParsingMode0);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipExtraField2);
        org.junit.Assert.assertNotNull(extraFieldParsingMode3);
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNotNull(zipExtraField5);
        org.junit.Assert.assertNotNull(zipExtraField6);
        org.junit.Assert.assertNotNull(feature7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "compression method" + "'", str8, "compression method");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "070707");
        org.junit.Assert.assertNull(unparseableExtraFieldData14);
        org.junit.Assert.assertNull(certificateArray15);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(" \000");
        int int2 = zipArchiveEntry1.getRawFlag();
        zipArchiveEntry1.setDiskNumberStart(1687259942L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("070707", "ustar\000");
        dumpArchiveEntry2.setOffset((long) (byte) 51);
        long long5 = dumpArchiveEntry2.getSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode6 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = extraFieldParsingMode6.createExtraField(zipShort7);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode9 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort10 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField11 = extraFieldParsingMode9.createExtraField(zipShort10);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField12 = extraFieldParsingMode6.createExtraField(zipShort10);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature13 = org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD;
        java.lang.String str14 = feature13.toString();
        boolean boolean15 = zipShort10.equals((java.lang.Object) feature13);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry17 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj18 = jarArchiveEntry17.clone();
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException19 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature13, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry17);
        java.util.Date date20 = jarArchiveEntry17.getLastModifiedDate();
        dumpArchiveEntry2.setAccessTime(date20);
        int int22 = dumpArchiveEntry2.getHeaderHoles();
        dumpArchiveEntry2.setGeneration((int) (byte) 75);
        long long25 = dumpArchiveEntry2.getOffset();
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet26 = dumpArchiveEntry2.getPermissions();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(extraFieldParsingMode6);
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertNotNull(zipExtraField8);
        org.junit.Assert.assertNotNull(extraFieldParsingMode9);
        org.junit.Assert.assertNotNull(zipShort10);
        org.junit.Assert.assertNotNull(zipExtraField11);
        org.junit.Assert.assertNotNull(zipExtraField12);
        org.junit.Assert.assertNotNull(feature13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "compression method" + "'", str14, "compression method");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "070707");
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 51L + "'", long25 == 51L);
        org.junit.Assert.assertNotNull(pERMISSIONSet26);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile4 = new org.apache.commons.compress.archivers.zip.ZipFile(seekableByteChannel0, "encryption", "7z", false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("070707", "ustar\000");
        dumpArchiveEntry2.setOffset((long) (byte) 51);
        java.lang.String str5 = dumpArchiveEntry2.toString();
        int int6 = dumpArchiveEntry2.getGroupId();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "070707" + "'", str5, "070707");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode0 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        byte[] byteArray2 = new byte[] { (byte) -1 };
        byte[] byteArray3 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray2);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = extraFieldParsingMode0.onUnparseableExtraField(byteArray3, (int) (short) -1, 64, true, 16384);
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField11 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (byte) 75, true);
        short short12 = resourceAlignmentExtraField11.getAlignment();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort13 = resourceAlignmentExtraField11.getHeaderId();
        boolean boolean14 = resourceAlignmentExtraField11.allowMethodChange();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField16 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField22 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField16, byteArray18, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger23 = null;
        zip64ExtendedInformationExtraField16.setRelativeHeaderOffset(zipEightByteInteger23);
        byte[] byteArray25 = zip64ExtendedInformationExtraField16.getLocalFileDataData();
        byte[] byteArray26 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray25);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField27 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray25);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField29 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray31 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField35 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField29, byteArray31, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger36 = null;
        zip64ExtendedInformationExtraField29.setRelativeHeaderOffset(zipEightByteInteger36);
        byte[] byteArray38 = zip64ExtendedInformationExtraField29.getLocalFileDataData();
        byte[] byteArray39 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray38);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField40 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray38);
        unicodeCommentExtraField27.setUnicodeName(byteArray38);
        unicodeCommentExtraField27.setNameCRC32((long) (short) -1);
        byte[] byteArray44 = unicodeCommentExtraField27.getLocalFileDataData();
        byte[] byteArray45 = unicodeCommentExtraField27.getLocalFileDataData();
        long long46 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField50 = extraFieldParsingMode0.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) resourceAlignmentExtraField11, byteArray45, 16384, 128, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1]");
        org.junit.Assert.assertNull(zipExtraField8);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 75 + "'", short12 == (short) 75);
        org.junit.Assert.assertNotNull(zipShort13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[1, -1, -1, -1, -1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1021L + "'", long46 == 1021L);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        java.io.OutputStream outputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream2 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0, "ustar\000");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ustar?");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer0 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream1);
        long long4 = cpioArchiveInputStream2.skip((long) (byte) 100);
        cpioArchiveInputStream2.mark(6);
        boolean boolean7 = cpioArchiveInputStream2.markSupported();
        boolean boolean8 = cpioArchiveInputStream2.markSupported();
        closeableConsumer0.accept((java.io.Closeable) cpioArchiveInputStream2);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream2);
        int int11 = jarArchiveInputStream10.read();
        long long12 = jarArchiveInputStream10.getUncompressedCount();
        long long14 = jarArchiveInputStream10.skip((long) 1000);
        long long16 = jarArchiveInputStream10.skip(0L);
        jarArchiveInputStream10.mark(511);
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry20 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        int int21 = cpioArchiveEntry20.getHeaderSize();
        long long22 = cpioArchiveEntry20.getNumberOfLinks();
        java.nio.charset.Charset charset23 = null;
        int int24 = cpioArchiveEntry20.getHeaderPadCount(charset23);
        boolean boolean25 = jarArchiveInputStream10.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) cpioArchiveEntry20);
        long long27 = jarArchiveInputStream10.skip((long) 40960);
        org.junit.Assert.assertNotNull(closeableConsumer0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 110 + "'", int21 == 110);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        arArchiveOutputStream2.finish();
        arArchiveOutputStream2.flush();
        // The following exception was thrown during execution in test generation
        try {
            arArchiveOutputStream2.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        boolean boolean4 = cpioArchiveEntry3.isNetwork();
        boolean boolean5 = cpioArchiveEntry3.isRegularFile();
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveEntry3.setChksum((long) 32782);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getCreateTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x000A_NTFS0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField3 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (byte) 1);
        java.lang.String str6 = zipLong5.toString();
        zip64ExtendedInformationExtraField3.setDiskStartNumber(zipLong5);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray9 = zipEightByteInteger8.getBytes();
        java.lang.String str10 = zipEightByteInteger8.toString();
        zip64ExtendedInformationExtraField3.setCompressedSize(zipEightByteInteger8);
        java.lang.String str12 = zipEightByteInteger8.toString();
        x000A_NTFS0.setAccessTime(zipEightByteInteger8);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger14 = x000A_NTFS0.getAccessTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger16 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger((-1L));
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger17 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray18 = zipEightByteInteger17.getBytes();
        java.lang.String str19 = zipEightByteInteger17.toString();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField20 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger16, zipEightByteInteger17);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField21 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray23 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField27 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField21, byteArray23, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger28 = null;
        zip64ExtendedInformationExtraField21.setRelativeHeaderOffset(zipEightByteInteger28);
        byte[] byteArray30 = zip64ExtendedInformationExtraField21.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort31 = zip64ExtendedInformationExtraField21.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField32 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField38 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField32, byteArray34, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger39 = null;
        zip64ExtendedInformationExtraField32.setRelativeHeaderOffset(zipEightByteInteger39);
        byte[] byteArray41 = zip64ExtendedInformationExtraField32.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger42 = zip64ExtendedInformationExtraField32.getSize();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger43 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray44 = zipEightByteInteger43.getBytes();
        java.lang.String str45 = zipEightByteInteger43.toString();
        zip64ExtendedInformationExtraField32.setCompressedSize(zipEightByteInteger43);
        zip64ExtendedInformationExtraField21.setRelativeHeaderOffset(zipEightByteInteger43);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField48 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray50 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField54 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField48, byteArray50, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger55 = null;
        zip64ExtendedInformationExtraField48.setRelativeHeaderOffset(zipEightByteInteger55);
        byte[] byteArray57 = zip64ExtendedInformationExtraField48.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort58 = zip64ExtendedInformationExtraField48.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField59 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray61 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField65 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField59, byteArray61, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger66 = null;
        zip64ExtendedInformationExtraField59.setRelativeHeaderOffset(zipEightByteInteger66);
        byte[] byteArray68 = zip64ExtendedInformationExtraField59.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger69 = zip64ExtendedInformationExtraField59.getSize();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger70 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray71 = zipEightByteInteger70.getBytes();
        java.lang.String str72 = zipEightByteInteger70.toString();
        zip64ExtendedInformationExtraField59.setCompressedSize(zipEightByteInteger70);
        zip64ExtendedInformationExtraField48.setRelativeHeaderOffset(zipEightByteInteger70);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger76 = new org.apache.commons.compress.archivers.zip.ZipEightByteInteger((-1L));
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger77 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray78 = zipEightByteInteger77.getBytes();
        java.lang.String str79 = zipEightByteInteger77.toString();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField80 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger76, zipEightByteInteger77);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField81 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong83 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (byte) 1);
        java.lang.String str84 = zipLong83.toString();
        zip64ExtendedInformationExtraField81.setDiskStartNumber(zipLong83);
        byte[] byteArray86 = zipLong83.getBytes();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField87 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField(zipEightByteInteger43, zipEightByteInteger70, zipEightByteInteger77, zipLong83);
        zip64ExtendedInformationExtraField20.setCompressedSize(zipEightByteInteger70);
        x000A_NTFS0.setModifyTime(zipEightByteInteger70);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger90 = x000A_NTFS0.getAccessTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger91 = x000A_NTFS0.getAccessTime();
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ZipLong value: 1" + "'", str6, "ZipLong value: 1");
        org.junit.Assert.assertNotNull(zipEightByteInteger8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ZipEightByteInteger value: 0" + "'", str10, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ZipEightByteInteger value: 0" + "'", str12, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(zipEightByteInteger14);
        org.junit.Assert.assertNotNull(zipEightByteInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZipEightByteInteger value: 0" + "'", str19, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField27);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(zipShort31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNull(zipEightByteInteger42);
        org.junit.Assert.assertNotNull(zipEightByteInteger43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ZipEightByteInteger value: 0" + "'", str45, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField54);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertNotNull(zipShort58);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertNull(zipEightByteInteger69);
        org.junit.Assert.assertNotNull(zipEightByteInteger70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ZipEightByteInteger value: 0" + "'", str72, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertNotNull(zipEightByteInteger77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ZipEightByteInteger value: 0" + "'", str79, "ZipEightByteInteger value: 0");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ZipLong value: 1" + "'", str84, "ZipLong value: 1");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[1, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipEightByteInteger90);
        org.junit.Assert.assertNotNull(zipEightByteInteger91);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet3 = dumpArchiveEntry2.getPermissions();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry5 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode6 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = extraFieldParsingMode6.createExtraField(zipShort7);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = jarArchiveEntry5.getExtraField(zipShort7);
        jarArchiveEntry5.setMethod((int) '4');
        jarArchiveEntry5.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry14 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry5);
        jarArchiveEntry5.setVersionMadeBy(508);
        boolean boolean17 = dumpArchiveEntry2.equals((java.lang.Object) 508);
        boolean boolean18 = dumpArchiveEntry2.isSocket();
        java.lang.String str19 = dumpArchiveEntry2.getName();
        int int20 = dumpArchiveEntry2.getVolume();
        java.util.Date date21 = dumpArchiveEntry2.getLastModifiedDate();
        org.junit.Assert.assertNotNull(pERMISSIONSet3);
        org.junit.Assert.assertNotNull(extraFieldParsingMode6);
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertNotNull(zipExtraField8);
        org.junit.Assert.assertNull(zipExtraField9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "`\n" + "'", str19, "`\n");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0);
        int int6 = tarArchiveOutputStream5.getRecordSize();
        int int7 = tarArchiveOutputStream5.getCount();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream8 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream8, 128);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Block size must be a multiple of 512 bytes. Attempt to use set size of 128");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 512 + "'", int6 == 512);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer1 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream2);
        long long5 = cpioArchiveInputStream3.skip((long) (byte) 100);
        cpioArchiveInputStream3.mark(6);
        boolean boolean8 = cpioArchiveInputStream3.markSupported();
        boolean boolean9 = cpioArchiveInputStream3.markSupported();
        closeableConsumer1.accept((java.io.Closeable) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = jarArchiveInputStream11.getNextZipEntry();
        java.io.File file13 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream11, file13);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry16 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj17 = jarArchiveEntry16.clone();
        java.lang.Object obj18 = jarArchiveEntry16.clone();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry21 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long22 = tarArchiveEntry21.getDataOffset();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry26 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry30 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry30.setNames("", "ZipLong value: 1");
        int int34 = tarArchiveEntry30.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry37 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean38 = tarArchiveEntry37.isSparse();
        tarArchiveEntry37.setMode(26127);
        java.nio.file.attribute.FileTime fileTime41 = tarArchiveEntry37.getLastModifiedTime();
        tarArchiveEntry30.setModTime(fileTime41);
        cpioArchiveEntry26.setTime(fileTime41);
        tarArchiveEntry21.setStatusChangeTime(fileTime41);
        java.util.zip.ZipEntry zipEntry45 = jarArchiveEntry16.setCreationTime(fileTime41);
        java.lang.String str46 = jarArchiveEntry16.getComment();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField47 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray49 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField53 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField47, byteArray49, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger54 = null;
        zip64ExtendedInformationExtraField47.setRelativeHeaderOffset(zipEightByteInteger54);
        byte[] byteArray56 = zip64ExtendedInformationExtraField47.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField58 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray59 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray56, true, unparseableExtraField58);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray60 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray56);
        byte[] byteArray61 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(zipExtraFieldArray60);
        jarArchiveEntry16.setExtraFields(zipExtraFieldArray60);
        byte[] byteArray63 = jarArchiveEntry16.getExtra();
        org.apache.commons.compress.archivers.tar.TarFile tarFile64 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray63);
        java.io.File file65 = null;
        expander0.expand(tarFile64, file65);
        java.io.InputStream inputStream67 = null;
        java.io.File file68 = null;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand(inputStream67, file68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Stream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(zipArchiveEntry12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "070707");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "070707");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(fileTime41);
        org.junit.Assert.assertNotNull(zipEntry45);
        org.junit.Assert.assertEquals(zipEntry45.toString(), "070707");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField53);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray59);
        org.junit.Assert.assertNotNull(zipExtraFieldArray60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isSparse();
        tarArchiveEntry2.setUserName("ZipLong value: 1");
        boolean boolean6 = tarArchiveEntry2.isStreamContiguous();
        boolean boolean7 = tarArchiveEntry2.isStreamContiguous();
        tarArchiveEntry2.setDataOffset((long) (short) 100);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry13.setNames("", "ZipLong value: 1");
        int int17 = tarArchiveEntry13.getGroupId();
        tarArchiveEntry13.setNames("apks", "arj");
        boolean boolean21 = tarArchiveEntry2.isDescendent(tarArchiveEntry13);
        tarArchiveEntry2.setGroupName("arj");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature3 = null;
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException4 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature3);
        org.apache.commons.compress.MemoryLimitException memoryLimitException5 = new org.apache.commons.compress.MemoryLimitException((long) 100, 10, (java.lang.Exception) unsupportedZipFeatureException4);
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature6 = unsupportedZipFeatureException4.getFeature();
        org.apache.commons.compress.archivers.dump.DumpArchiveException dumpArchiveException7 = new org.apache.commons.compress.archivers.dump.DumpArchiveException("", (java.lang.Throwable) unsupportedZipFeatureException4);
        java.lang.Throwable[] throwableArray8 = unsupportedZipFeatureException4.getSuppressed();
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature9 = unsupportedZipFeatureException4.getFeature();
        org.junit.Assert.assertNull(feature6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNull(feature9);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        byte[] byteArray11 = zip64ExtendedInformationExtraField1.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField12 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray11);
        long long13 = unicodeCommentExtraField12.getNameCRC32();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField14 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField15 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField21 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField15, byteArray17, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger22 = null;
        zip64ExtendedInformationExtraField15.setRelativeHeaderOffset(zipEightByteInteger22);
        byte[] byteArray24 = zip64ExtendedInformationExtraField15.getLocalFileDataData();
        byte[] byteArray25 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray24);
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField27 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray28 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray25, false, unparseableExtraField27);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode30 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort31 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField32 = extraFieldParsingMode30.createExtraField(zipShort31);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode33 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort34 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField35 = extraFieldParsingMode33.createExtraField(zipShort34);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField36 = extraFieldParsingMode30.createExtraField(zipShort34);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray37 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray25, false, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode30);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField42 = unparseableExtraField14.onUnparseableExtraField(byteArray25, (int) (byte) 83, (int) (byte) 48, false, 420);
        // The following exception was thrown during execution in test generation
        try {
            unicodeCommentExtraField12.parseFromCentralDirectoryData(byteArray25, 26113, 488);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26113");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(unparseableExtraField14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray28);
        org.junit.Assert.assertNotNull(extraFieldParsingMode30);
        org.junit.Assert.assertNotNull(zipShort31);
        org.junit.Assert.assertNotNull(zipExtraField32);
        org.junit.Assert.assertNotNull(extraFieldParsingMode33);
        org.junit.Assert.assertNotNull(zipShort34);
        org.junit.Assert.assertNotNull(zipExtraField35);
        org.junit.Assert.assertNotNull(zipExtraField36);
        org.junit.Assert.assertNotNull(zipExtraFieldArray37);
        org.junit.Assert.assertNull(zipExtraField42);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE tYPE1 = org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find((int) (byte) 83);
        org.junit.Assert.assertTrue("'" + tYPE1 + "' != '" + org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN + "'", tYPE1.equals(org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN));
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getCreateTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x000A_NTFS0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry5 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("070707", (long) '4');
        int int6 = arArchiveEntry5.getGroupId();
        java.lang.String str7 = arArchiveEntry5.getName();
        java.util.Date date8 = arArchiveEntry5.getLastModifiedDate();
        x000A_NTFS0.setAccessJavaTime(date8);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp10 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp10.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry15 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean16 = tarArchiveEntry15.isSparse();
        tarArchiveEntry15.setMode(26127);
        java.util.Date date19 = tarArchiveEntry15.getModTime();
        x5455_ExtendedTimestamp10.setModifyJavaTime(date19);
        byte[] byteArray21 = x5455_ExtendedTimestamp10.getLocalFileDataData();
        boolean boolean22 = x5455_ExtendedTimestamp10.isBit1_accessTimePresent();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry24 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode25 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort26 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField27 = extraFieldParsingMode25.createExtraField(zipShort26);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField28 = jarArchiveEntry24.getExtraField(zipShort26);
        jarArchiveEntry24.setMethod((int) '4');
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp31 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp31.setFlags((byte) 75);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField35 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray37 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField41 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField35, byteArray37, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger42 = null;
        zip64ExtendedInformationExtraField35.setRelativeHeaderOffset(zipEightByteInteger42);
        byte[] byteArray44 = zip64ExtendedInformationExtraField35.getLocalFileDataData();
        byte[] byteArray45 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray44);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField46 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray44);
        boolean boolean47 = x5455_ExtendedTimestamp31.equals((java.lang.Object) unicodeCommentExtraField46);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort48 = x5455_ExtendedTimestamp31.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry51 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long52 = tarArchiveEntry51.getDataOffset();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry56 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry60 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry60.setNames("", "ZipLong value: 1");
        int int64 = tarArchiveEntry60.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry67 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean68 = tarArchiveEntry67.isSparse();
        tarArchiveEntry67.setMode(26127);
        java.nio.file.attribute.FileTime fileTime71 = tarArchiveEntry67.getLastModifiedTime();
        tarArchiveEntry60.setModTime(fileTime71);
        cpioArchiveEntry56.setTime(fileTime71);
        tarArchiveEntry51.setStatusChangeTime(fileTime71);
        x5455_ExtendedTimestamp31.setModifyFileTime(fileTime71);
        java.util.zip.ZipEntry zipEntry76 = jarArchiveEntry24.setLastAccessTime(fileTime71);
        x5455_ExtendedTimestamp10.setAccessFileTime(fileTime71);
        x000A_NTFS0.setAccessFileTime(fileTime71);
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "070707" + "'", str7, "070707");
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Jun 20 13:19:46 CEST 2023");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Jun 20 13:19:46 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, 82, -117, -111, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(extraFieldParsingMode25);
        org.junit.Assert.assertNotNull(zipShort26);
        org.junit.Assert.assertNotNull(zipExtraField27);
        org.junit.Assert.assertNull(zipExtraField28);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zipShort48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(fileTime71);
        org.junit.Assert.assertNotNull(zipEntry76);
        org.junit.Assert.assertEquals(zipEntry76.toString(), "070707");
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar", false);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        org.apache.commons.compress.archivers.examples.Expander expander0 = new org.apache.commons.compress.archivers.examples.Expander();
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer1 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream2);
        long long5 = cpioArchiveInputStream3.skip((long) (byte) 100);
        cpioArchiveInputStream3.mark(6);
        boolean boolean8 = cpioArchiveInputStream3.markSupported();
        boolean boolean9 = cpioArchiveInputStream3.markSupported();
        closeableConsumer1.accept((java.io.Closeable) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = jarArchiveInputStream11.getNextZipEntry();
        java.io.File file13 = null;
        expander0.expand((org.apache.commons.compress.archivers.ArchiveInputStream) jarArchiveInputStream11, file13);
        java.nio.channels.SeekableByteChannel seekableByteChannel16 = null;
        java.io.File file17 = null;
        org.apache.commons.compress.archivers.examples.CloseableConsumer closeableConsumer18 = org.apache.commons.compress.archivers.examples.CloseableConsumer.NULL_CONSUMER;
        // The following exception was thrown during execution in test generation
        try {
            expander0.expand("TarArchiveStructSparse{offset=9, numbytes=1}", seekableByteChannel16, file17, closeableConsumer18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: \"ch\" is null!");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(closeableConsumer1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(zipArchiveEntry12);
        org.junit.Assert.assertNotNull(closeableConsumer18);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField(11, false);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        org.apache.commons.compress.archivers.zip.Zip64RequiredException zip64RequiredException1 = new org.apache.commons.compress.archivers.zip.Zip64RequiredException("ZipShort value: 20");
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = jarMarker0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = jarMarker0.getLocalFileDataLength();
        byte[] byteArray3 = jarMarker0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField4 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField4, byteArray6, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = null;
        zip64ExtendedInformationExtraField4.setRelativeHeaderOffset(zipEightByteInteger11);
        byte[] byteArray13 = zip64ExtendedInformationExtraField4.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField15 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray16 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray13, true, unparseableExtraField15);
        byte[] byteArray17 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(zipExtraFieldArray16);
        // The following exception was thrown during execution in test generation
        try {
            jarMarker0.parseFromLocalFileData(byteArray17, (int) (byte) 100, (int) (byte) 88);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: JarMarker doesn't expect any data");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jarMarker0);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore0 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor1 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore0);
        streamCompressor1.close();
        long long3 = streamCompressor1.getTotalBytesWritten();
        long long4 = streamCompressor1.getCrc32();
        byte[] byteArray7 = new byte[] { (byte) -1 };
        byte[] byteArray8 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray7);
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField9 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField("ZipLong value: 1", byteArray8);
        byte[] byteArray10 = unicodePathExtraField9.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            streamCompressor1.writeCounted(byteArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(streamCompressor1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 0, 0, 0, -1, 90, 105, 112, 76, 111, 110, 103, 32, 118, 97, 108, 117, 101, 58, 32, 49]");
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature3 = null;
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException4 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry5 = unsupportedZipFeatureException4.getEntry();
        org.apache.commons.compress.MemoryLimitException memoryLimitException6 = new org.apache.commons.compress.MemoryLimitException((long) '4', 11, (java.lang.Exception) unsupportedZipFeatureException4);
        int int7 = memoryLimitException6.getMemoryLimitInKb();
        int int8 = memoryLimitException6.getMemoryLimitInKb();
        org.apache.commons.compress.archivers.dump.DumpArchiveException dumpArchiveException9 = new org.apache.commons.compress.archivers.dump.DumpArchiveException("TarArchiveStructSparse{offset=9, numbytes=1}", (java.lang.Throwable) memoryLimitException6);
        java.lang.String str10 = memoryLimitException6.toString();
        org.junit.Assert.assertNull(zipArchiveEntry5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.apache.commons.compress.MemoryLimitException: 52 kb of memory would be needed; limit was 11 kb. If the file is not corrupt, consider increasing the memory limit." + "'", str10, "org.apache.commons.compress.MemoryLimitException: 52 kb of memory would be needed; limit was 11 kb. If the file is not corrupt, consider increasing the memory limit.");
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        zipArchiveOutputStream5.flush();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode7 = org.apache.commons.compress.archivers.zip.Zip64Mode.Never;
        zipArchiveOutputStream5.setUseZip64(zip64Mode7);
        java.nio.file.Path path9 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier10 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path9);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore11 = defaultBackingStoreSupplier10.get();
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor12 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore11);
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor13 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore11);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField15 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray17 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField21 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField15, byteArray17, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger22 = null;
        zip64ExtendedInformationExtraField15.setRelativeHeaderOffset(zipEightByteInteger22);
        byte[] byteArray24 = zip64ExtendedInformationExtraField15.getLocalFileDataData();
        byte[] byteArray25 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray24);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField26 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray24);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField28 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray30 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField34 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField28, byteArray30, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger35 = null;
        zip64ExtendedInformationExtraField28.setRelativeHeaderOffset(zipEightByteInteger35);
        byte[] byteArray37 = zip64ExtendedInformationExtraField28.getLocalFileDataData();
        byte[] byteArray38 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray37);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField39 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray37);
        unicodeCommentExtraField26.setUnicodeName(byteArray37);
        byte[] byteArray41 = unicodeCommentExtraField26.getUnicodeName();
        byte[] byteArray42 = unicodeCommentExtraField26.getUnicodeName();
        byte[] byteArray44 = new byte[] { (byte) -1 };
        byte[] byteArray45 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray44);
        long long46 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray44);
        boolean boolean48 = org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byteArray44, 0);
        unicodeCommentExtraField26.setUnicodeName(byteArray44);
        byte[] byteArray50 = unicodeCommentExtraField26.getLocalFileDataData();
        streamCompressor13.writeCounted(byteArray50);
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix52 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        java.lang.Object obj53 = x7875_NewUnix52.clone();
        byte[] byteArray54 = x7875_NewUnix52.getCentralDirectoryData();
        streamCompressor13.writeCounted(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream5.writePreamble(byteArray54, 8, 19969);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + zip64Mode7 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.Never + "'", zip64Mode7.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.Never));
        org.junit.Assert.assertNotNull(scatterGatherBackingStore11);
        org.junit.Assert.assertNotNull(streamCompressor12);
        org.junit.Assert.assertNotNull(streamCompressor13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField21);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 255L + "'", long46 == 255L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[1, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "0x7875 Zip Extra Field: UID=1000 GID=1000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "0x7875 Zip Extra Field: UID=1000 GID=1000");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "0x7875 Zip Extra Field: UID=1000 GID=1000");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField12 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray13 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray10, true, unparseableExtraField12);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray14 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray10);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField15 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("", byteArray10);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray10, zipEncoding16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray13);
        org.junit.Assert.assertNotNull(zipExtraFieldArray14);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(255L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0, 0, 33, 0]");
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        boolean boolean1 = asiExtraField0.isLink();
        int int2 = asiExtraField0.getMode();
        asiExtraField0.setMode(10);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = asiExtraField0.getLocalFileDataLength();
        asiExtraField0.setUserId((int) '#');
        byte[] byteArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            asiExtraField0.parseFromCentralDirectoryData(byteArray8, (int) (byte) 4, 488);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(zipShort5);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader x0017_StrongEncryptionHeader0 = new org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm encryptionAlgorithm1 = x0017_StrongEncryptionHeader0.getEncryptionAlgorithm();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm encryptionAlgorithm2 = x0017_StrongEncryptionHeader0.getEncryptionAlgorithm();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField4 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField4, byteArray6, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = null;
        zip64ExtendedInformationExtraField4.setRelativeHeaderOffset(zipEightByteInteger11);
        byte[] byteArray13 = zip64ExtendedInformationExtraField4.getLocalFileDataData();
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray13);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField15 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            x0017_StrongEncryptionHeader0.parseFromCentralDirectoryData(byteArray13, (int) (short) 10, (int) (byte) 53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(encryptionAlgorithm1);
        org.junit.Assert.assertNull(encryptionAlgorithm2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit11 = jarArchiveEntry1.getGeneralPurposeBit();
        boolean boolean12 = generalPurposeBit11.usesDataDescriptor();
        generalPurposeBit11.useEncryption(true);
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.archivers.ArchiveStreamProvider> strMap15 = org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
        boolean boolean16 = generalPurposeBit11.equals((java.lang.Object) strMap15);
        generalPurposeBit11.useUTF8ForNames(true);
        boolean boolean19 = generalPurposeBit11.usesEncryption();
        generalPurposeBit11.useUTF8ForNames(false);
        generalPurposeBit11.useDataDescriptor(true);
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertNotNull(generalPurposeBit11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream4);
        java.lang.String str6 = zipArchiveOutputStream5.getEncoding();
        zipArchiveOutputStream5.setUseLanguageEncodingFlag(false);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream10 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream5, "070701");
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream10, "070702");
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveOutputStream12.setEncoding("\001\004");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ??");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTF8" + "'", str6, "UTF8");
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        parallelScatterZipCreator0.writeTo(zipArchiveOutputStream6);
        zipArchiveOutputStream6.setFallbackToUTF8(true);
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode11 = org.apache.commons.compress.archivers.zip.Zip64Mode.Never;
        zipArchiveOutputStream6.setUseZip64(zip64Mode11);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream13 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream6);
        byte[] byteArray15 = new byte[] { (byte) -1 };
        byte[] byteArray16 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray15);
        long long17 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray15);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byteArray15, 0);
        boolean boolean21 = org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byteArray15, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream13.write(byteArray15, 31, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
        org.junit.Assert.assertTrue("'" + zip64Mode11 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.Never + "'", zip64Mode11.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.Never));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 255L + "'", long17 == 255L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        arArchiveOutputStream2.finish();
        // The following exception was thrown during execution in test generation
        try {
            arArchiveOutputStream2.finish();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: This archive has already been finished");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream1 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream(inputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream1, 11);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream1, "00", true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.arj.ArjArchiveInputStream arjArchiveInputStream7 = new org.apache.commons.compress.archivers.arj.ArjArchiveInputStream((java.io.InputStream) zipArchiveInputStream6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: null");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp0.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean6 = tarArchiveEntry5.isSparse();
        tarArchiveEntry5.setMode(26127);
        java.util.Date date9 = tarArchiveEntry5.getModTime();
        x5455_ExtendedTimestamp0.setModifyJavaTime(date9);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort11 = x5455_ExtendedTimestamp0.getHeaderId();
        java.nio.file.attribute.FileTime fileTime12 = x5455_ExtendedTimestamp0.getCreateFileTime();
        boolean boolean13 = x5455_ExtendedTimestamp0.isBit1_accessTimePresent();
        byte[] byteArray14 = x5455_ExtendedTimestamp0.getCentralDirectoryData();
        java.lang.Object obj15 = x5455_ExtendedTimestamp0.clone();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Jun 20 13:19:47 CEST 2023");
        org.junit.Assert.assertNotNull(zipShort11);
        org.junit.Assert.assertNull(fileTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, 83, -117, -111, 100]");
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "0x5455 Zip Extra Field: Flags=1001011  Modify:[Tue Jun 20 13:19:47 CEST 2023] ");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "0x5455 Zip Extra Field: Flags=1001011  Modify:[Tue Jun 20 13:19:47 CEST 2023] ");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "0x5455 Zip Extra Field: Flags=1001011  Modify:[Tue Jun 20 13:19:47 CEST 2023] ");
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong3 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (byte) 1);
        java.lang.String str4 = zipLong3.toString();
        zip64ExtendedInformationExtraField1.setDiskStartNumber(zipLong3);
        byte[] byteArray6 = zipLong3.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString((long) (short) 12, byteArray6, (int) (byte) 100, 2526);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2625");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ZipLong value: 1" + "'", str4, "ZipLong value: 1");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 0, 0, 0]");
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource commentSource10 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT;
        jarArchiveEntry1.setCommentSource(commentSource10);
        int int12 = jarArchiveEntry1.getUnixMode();
        java.nio.file.attribute.FileTime fileTime13 = jarArchiveEntry1.getLastAccessTime();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry15 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode16 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort17 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField18 = extraFieldParsingMode16.createExtraField(zipShort17);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField19 = jarArchiveEntry15.getExtraField(zipShort17);
        jarArchiveEntry15.setMethod((int) '4');
        jarArchiveEntry15.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry24 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry15);
        zipArchiveEntry24.setTime((long) (byte) 1);
        int int27 = zipArchiveEntry24.getInternalAttributes();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry29 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode30 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort31 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField32 = extraFieldParsingMode30.createExtraField(zipShort31);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField33 = jarArchiveEntry29.getExtraField(zipShort31);
        jarArchiveEntry29.setMethod((int) '4');
        jarArchiveEntry29.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry38 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry29);
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit39 = jarArchiveEntry29.getGeneralPurposeBit();
        zipArchiveEntry24.setGeneralPurposeBit(generalPurposeBit39);
        boolean boolean41 = generalPurposeBit39.usesStrongEncryption();
        boolean boolean42 = generalPurposeBit39.usesUTF8ForNames();
        jarArchiveEntry1.setGeneralPurposeBit(generalPurposeBit39);
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + commentSource10 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT + "'", commentSource10.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.CommentSource.COMMENT));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(fileTime13);
        org.junit.Assert.assertNotNull(extraFieldParsingMode16);
        org.junit.Assert.assertNotNull(zipShort17);
        org.junit.Assert.assertNotNull(zipExtraField18);
        org.junit.Assert.assertNull(zipExtraField19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(extraFieldParsingMode30);
        org.junit.Assert.assertNotNull(zipShort31);
        org.junit.Assert.assertNotNull(zipExtraField32);
        org.junit.Assert.assertNull(zipExtraField33);
        org.junit.Assert.assertNotNull(generalPurposeBit39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList3 = tarArchiveEntry2.getOrderedSparseHeaders();
        boolean boolean4 = tarArchiveEntry2.isPaxGNU1XSparse();
        tarArchiveEntry2.setNames("arj", "arj");
        tarArchiveEntry2.clearExtraPaxHeaders();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean12 = tarArchiveEntry11.isSparse();
        tarArchiveEntry11.setMode(26127);
        java.util.Date date15 = tarArchiveEntry11.getModTime();
        java.lang.String str16 = tarArchiveEntry11.getUserName();
        boolean boolean17 = tarArchiveEntry11.isSparse();
        boolean boolean18 = tarArchiveEntry2.equals(tarArchiveEntry11);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList19 = tarArchiveEntry11.getSparseHeaders();
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker20 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort21 = jarMarker20.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort22 = jarMarker20.getLocalFileDataLength();
        byte[] byteArray23 = jarMarker20.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding25 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("splitting");
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveEntry11.writeEntryHeader(byteArray23, zipEncoding25, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Jun 20 13:19:48 CEST 2023");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(tarArchiveStructSparseList19);
        org.junit.Assert.assertNotNull(jarMarker20);
        org.junit.Assert.assertNotNull(zipShort21);
        org.junit.Assert.assertNotNull(zipShort22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(zipEncoding25);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp0.setFlags((byte) 75);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField4 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField4, byteArray6, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = null;
        zip64ExtendedInformationExtraField4.setRelativeHeaderOffset(zipEightByteInteger11);
        byte[] byteArray13 = zip64ExtendedInformationExtraField4.getLocalFileDataData();
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray13);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField15 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray13);
        boolean boolean16 = x5455_ExtendedTimestamp0.equals((java.lang.Object) unicodeCommentExtraField15);
        byte[] byteArray18 = org.apache.commons.compress.archivers.zip.ZipShort.getBytes((int) (byte) 4);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray19 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray18);
        x5455_ExtendedTimestamp0.parseFromLocalFileData(byteArray18, 0, (int) (byte) 1);
        boolean boolean23 = x5455_ExtendedTimestamp0.isBit1_accessTimePresent();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[4, 0]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile2 = new org.apache.commons.compress.archivers.zip.ZipFile("zip", "");
            org.junit.Assert.fail("Expected exception of type java.nio.file.NoSuchFileException; message: zip");
        } catch (java.nio.file.NoSuchFileException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        parallelScatterZipCreator0.writeTo(zipArchiveOutputStream6);
        zipArchiveOutputStream6.setFallbackToUTF8(true);
        zipArchiveOutputStream6.setMethod(16384);
        zipArchiveOutputStream6.flush();
        zipArchiveOutputStream6.setLevel((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream6, 96, (int) (short) 75, "0x000A Zip Extra Field: Modify:[null]  Access:[1979-11-29T23:00:00Z]  Create:[1970-01-01T00:00:00Z] ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Block size must be a multiple of 512 bytes. Attempt to use set size of 96");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.nio.file.attribute.FileTime fileTime2 = jarArchiveEntry1.getLastAccessTime();
        jarArchiveEntry1.setMethod(424935705);
        jarArchiveEntry1.setVersionRequired((int) (byte) 52);
        jarArchiveEntry1.setExternalAttributes((long) 128);
        org.junit.Assert.assertNull(fileTime2);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.file.attribute.FileTime fileTime1 = x5455_ExtendedTimestamp0.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x5455_ExtendedTimestamp0.getLocalFileDataLength();
        java.nio.file.attribute.FileTime fileTime3 = x5455_ExtendedTimestamp0.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = new org.apache.commons.compress.archivers.zip.ZipLong(0);
        int int6 = zipLong5.getIntValue();
        x5455_ExtendedTimestamp0.setAccessTime(zipLong5);
        byte[] byteArray8 = zipLong5.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger10 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byteArray8, (int) (byte) -3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(fileTime1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNull(fileTime3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0]");
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException unsupportedCompressionAlgorithmException1 = new org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException("apks");
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.io.File file2 = null;
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("0x000A Zip Extra Field: Modify:[null]  Access:[1979-11-29T23:00:00Z]  Create:[1970-01-01T00:00:00Z] ", file2, file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        org.apache.commons.compress.archivers.zip.ZipMethod zipMethod1 = org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(31);
        org.junit.Assert.assertNull(zipMethod1);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore0 = null;
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor1 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore0);
        streamCompressor1.close();
        long long3 = streamCompressor1.getCrc32();
        org.junit.Assert.assertNotNull(streamCompressor1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry3.setNames("", "ZipLong value: 1");
        int int7 = tarArchiveEntry3.getGroupId();
        tarArchiveEntry3.setGroupName("apk");
        boolean boolean10 = tarArchiveEntry3.isStreamContiguous();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        parallelScatterZipCreator0.writeTo(zipArchiveOutputStream6);
        zipArchiveOutputStream6.setFallbackToUTF8(true);
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode11 = org.apache.commons.compress.archivers.zip.Zip64Mode.Never;
        zipArchiveOutputStream6.setUseZip64(zip64Mode11);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream13 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream6);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream13.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Trying to close non-existent entry");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
        org.junit.Assert.assertTrue("'" + zip64Mode11 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.Never + "'", zip64Mode11.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.Never));
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        int int3 = dumpArchiveEntry2.getHeaderHoles();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry3.setNames("", "ZipLong value: 1");
        int int7 = tarArchiveEntry3.getGroupId();
        tarArchiveEntry3.setNames("apks", "arj");
        byte[] byteArray12 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes((long) 508);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding14 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("splitting");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField16 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray18 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField22 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField16, byteArray18, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger23 = null;
        zip64ExtendedInformationExtraField16.setRelativeHeaderOffset(zipEightByteInteger23);
        byte[] byteArray25 = zip64ExtendedInformationExtraField16.getLocalFileDataData();
        byte[] byteArray26 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray25);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField27 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray25);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray29 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray25, true);
        java.lang.String str30 = zipEncoding14.decode(byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveEntry3.writeEntryHeader(byteArray12, zipEncoding14, false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(zipEncoding14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField22);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile x0015_CertificateIdForFile0 = new org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode1 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField3 = extraFieldParsingMode1.createExtraField(zipShort2);
        byte[] byteArray4 = zipExtraField3.getCentralDirectoryData();
        x0015_CertificateIdForFile0.setCentralDirectoryData(byteArray4);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = x0015_CertificateIdForFile0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = x0015_CertificateIdForFile0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm8 = x0015_CertificateIdForFile0.getHashAlgorithm();
        org.junit.Assert.assertNotNull(extraFieldParsingMode1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipExtraField3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0]");
        org.junit.Assert.assertNotNull(zipShort6);
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertNull(hashAlgorithm8);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        java.nio.file.Path path0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile4 = new org.apache.commons.compress.archivers.zip.ZipFile(path0, "org.apache.commons.compress.MemoryLimitException: 52 kb of memory would be needed; limit was 11 kb. If the file is not corrupt, consider increasing the memory limit.", true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean4 = tarArchiveEntry3.isSparse();
        tarArchiveEntry3.setMode(26127);
        java.util.Date date7 = tarArchiveEntry3.getModTime();
        sevenZArchiveEntry0.setLastModifiedDate(date7);
        long long9 = sevenZArchiveEntry0.getCrcValue();
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry10 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean11 = sevenZArchiveEntry10.getHasLastModifiedDate();
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray12 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] {};
        sevenZArchiveEntry10.setContentMethods(sevenZMethodConfigurationArray12);
        sevenZArchiveEntry0.setContentMethods(sevenZMethodConfigurationArray12);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Jun 20 13:19:49 CEST 2023");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(sevenZMethodConfigurationArray12);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList3 = tarArchiveEntry2.getOrderedSparseHeaders();
        boolean boolean4 = tarArchiveEntry2.isPaxGNU1XSparse();
        tarArchiveEntry2.setNames("arj", "arj");
        tarArchiveEntry2.clearExtraPaxHeaders();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean12 = tarArchiveEntry11.isSparse();
        tarArchiveEntry11.setMode(26127);
        java.util.Date date15 = tarArchiveEntry11.getModTime();
        java.lang.String str16 = tarArchiveEntry11.getUserName();
        boolean boolean17 = tarArchiveEntry11.isSparse();
        boolean boolean18 = tarArchiveEntry2.equals(tarArchiveEntry11);
        boolean boolean19 = tarArchiveEntry2.isGNULongNameEntry();
        java.util.List<org.apache.commons.compress.archivers.tar.TarArchiveStructSparse> tarArchiveStructSparseList20 = tarArchiveEntry2.getOrderedSparseHeaders();
        boolean boolean21 = tarArchiveEntry2.isGlobalPaxHeader();
        boolean boolean22 = tarArchiveEntry2.isDirectory();
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Jun 20 13:19:49 CEST 2023");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(tarArchiveStructSparseList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean3 = tarArchiveEntry2.isSparse();
        tarArchiveEntry2.setUserName("ZipLong value: 1");
        boolean boolean6 = tarArchiveEntry2.isStreamContiguous();
        boolean boolean7 = tarArchiveEntry2.isStreamContiguous();
        tarArchiveEntry2.setDataOffset((long) (short) 100);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry13.setNames("", "ZipLong value: 1");
        int int17 = tarArchiveEntry13.getGroupId();
        tarArchiveEntry13.setNames("apks", "arj");
        boolean boolean21 = tarArchiveEntry2.isDescendent(tarArchiveEntry13);
        long long22 = tarArchiveEntry13.getLongGroupId();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.nio.channels.SeekableByteChannel seekableByteChannel2 = null;
        java.nio.file.Path path3 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("apks", seekableByteChannel2, path3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: apks");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        jarArchiveEntry1.setVersionMadeBy(508);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry13 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource14 = jarArchiveEntry13.getNameSource();
        java.security.cert.Certificate[] certificateArray15 = jarArchiveEntry13.getCertificates();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource16 = jarArchiveEntry13.getNameSource();
        // The following exception was thrown during execution in test generation
        try {
            jarArchiveEntry13.removeUnparseableExtraFieldData();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + nameSource14 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.NAME + "'", nameSource14.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.NAME));
        org.junit.Assert.assertNull(certificateArray15);
        org.junit.Assert.assertTrue("'" + nameSource16 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.NAME + "'", nameSource16.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.NAME));
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream0);
        long long3 = cpioArchiveInputStream1.skip((long) (byte) 100);
        cpioArchiveInputStream1.mark(6);
        boolean boolean6 = cpioArchiveInputStream1.markSupported();
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) cpioArchiveInputStream1, "00");
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveInputStream1.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0);
        long long6 = tarArchiveOutputStream5.getBytesWritten();
        tarArchiveOutputStream5.flush();
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream5.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        byte[] byteArray2 = new byte[] { (byte) -1 };
        byte[] byteArray3 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField6 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField("apks", byteArray3, 8192, 29127);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1]");
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        java.nio.file.Path path0 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier1 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path0);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore2 = defaultBackingStoreSupplier1.get();
        java.nio.file.Path path3 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier4 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path3);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore5 = defaultBackingStoreSupplier4.get();
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor6 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore5);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream scatterZipOutputStream7 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream(scatterGatherBackingStore2, streamCompressor6);
        org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter zipEntryWriter8 = new org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter(scatterZipOutputStream7);
        scatterZipOutputStream7.close();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ZipEntryWriter zipEntryWriter10 = scatterZipOutputStream7.zipEntryWriter();
            org.junit.Assert.fail("Expected exception of type java.nio.file.NoSuchFileException; message: C:\\Users\\Daniele\\AppData\\Local\\Temp\\parallelscatter5431084565340687332n1");
        } catch (java.nio.file.NoSuchFileException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore2);
        org.junit.Assert.assertNotNull(scatterGatherBackingStore5);
        org.junit.Assert.assertNotNull(streamCompressor6);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (byte) 75, true);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = resourceAlignmentExtraField2.getHeaderId();
        short short4 = resourceAlignmentExtraField2.getAlignment();
        byte[] byteArray5 = resourceAlignmentExtraField2.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort6 = new org.apache.commons.compress.archivers.zip.ZipShort(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.math.BigInteger bigInteger8 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byteArray5, (int) (byte) -3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertTrue("'" + short4 + "' != '" + (short) 75 + "'", short4 == (short) 75);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[75, -128]");
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp0.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean6 = tarArchiveEntry5.isSparse();
        tarArchiveEntry5.setMode(26127);
        java.util.Date date9 = tarArchiveEntry5.getModTime();
        x5455_ExtendedTimestamp0.setModifyJavaTime(date9);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong11 = x5455_ExtendedTimestamp0.getCreateTime();
        byte[] byteArray12 = x5455_ExtendedTimestamp0.getLocalFileDataData();
        java.nio.file.attribute.FileTime fileTime13 = x5455_ExtendedTimestamp0.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort14 = x5455_ExtendedTimestamp0.getCentralDirectoryLength();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Jun 20 13:19:49 CEST 2023");
        org.junit.Assert.assertNull(zipLong11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1, 85, -117, -111, 100]");
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertNotNull(zipShort14);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream4 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0);
        long long6 = tarArchiveOutputStream5.getBytesWritten();
        tarArchiveOutputStream5.setAddPaxHeadersForNonAsciiNames(false);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField10 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray12 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField16 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField10, byteArray12, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger17 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO;
        byte[] byteArray18 = zipEightByteInteger17.getBytes();
        zip64ExtendedInformationExtraField10.setCompressedSize(zipEightByteInteger17);
        byte[] byteArray20 = zip64ExtendedInformationExtraField10.getCentralDirectoryData();
        org.apache.commons.compress.archivers.zip.UnicodePathExtraField unicodePathExtraField21 = new org.apache.commons.compress.archivers.zip.UnicodePathExtraField("", byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            tarArchiveOutputStream5.write(byteArray20, (int) (byte) 4, 84446);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No current tar entry");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField16);
        org.junit.Assert.assertNotNull(zipEightByteInteger17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry("apks");
        java.nio.charset.Charset charset2 = null;
        int int3 = cpioArchiveEntry1.getHeaderPadCount(charset2);
        long long4 = cpioArchiveEntry1.getDeviceMaj();
        cpioArchiveEntry1.setNumberOfLinks((long) 511);
        cpioArchiveEntry1.setTime(52L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        org.apache.commons.compress.archivers.zip.X7875_NewUnix x7875_NewUnix0 = new org.apache.commons.compress.archivers.zip.X7875_NewUnix();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = x7875_NewUnix0.getLocalFileDataLength();
        byte[] byteArray2 = x7875_NewUnix0.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.tar.TarFile tarFile4 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray2, "0x7875 Zip Extra Field: UID=1000 GID=97");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: 0x7875 Zip Extra Field: UID=1000 GID=97");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1, 2, -24, 3, 2, -24, 3]");
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry0 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        int int1 = arjArchiveEntry0.getUnixMode();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry3 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode4 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField6 = extraFieldParsingMode4.createExtraField(zipShort5);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = jarArchiveEntry3.getExtraField(zipShort5);
        jarArchiveEntry3.setMethod((int) '4');
        jarArchiveEntry3.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry12 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry3);
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit13 = jarArchiveEntry3.getGeneralPurposeBit();
        boolean boolean14 = generalPurposeBit13.usesDataDescriptor();
        generalPurposeBit13.useEncryption(true);
        java.util.SortedMap<java.lang.String, org.apache.commons.compress.archivers.ArchiveStreamProvider> strMap17 = org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders();
        boolean boolean18 = generalPurposeBit13.equals((java.lang.Object) strMap17);
        boolean boolean19 = arjArchiveEntry0.equals((java.lang.Object) generalPurposeBit13);
        org.apache.commons.compress.archivers.zip.ZipMethod zipMethod20 = org.apache.commons.compress.archivers.zip.ZipMethod.JPEG;
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry22 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode23 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort24 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField25 = extraFieldParsingMode23.createExtraField(zipShort24);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField26 = jarArchiveEntry22.getExtraField(zipShort24);
        jarArchiveEntry22.setMethod((int) '4');
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException29 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(zipMethod20, (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry22);
        boolean boolean30 = generalPurposeBit13.equals((java.lang.Object) zipMethod20);
        generalPurposeBit13.useDataDescriptor(false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(extraFieldParsingMode4);
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertNotNull(zipExtraField6);
        org.junit.Assert.assertNull(zipExtraField7);
        org.junit.Assert.assertNotNull(generalPurposeBit13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + zipMethod20 + "' != '" + org.apache.commons.compress.archivers.zip.ZipMethod.JPEG + "'", zipMethod20.equals(org.apache.commons.compress.archivers.zip.ZipMethod.JPEG));
        org.junit.Assert.assertNotNull(extraFieldParsingMode23);
        org.junit.Assert.assertNotNull(zipShort24);
        org.junit.Assert.assertNotNull(zipExtraField25);
        org.junit.Assert.assertNull(zipExtraField26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS0 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger1 = x000A_NTFS0.getCreateTime();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger2 = x000A_NTFS0.getCreateTime();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean6 = tarArchiveEntry5.isSparse();
        tarArchiveEntry5.setUserName("ZipLong value: 1");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long12 = tarArchiveEntry11.getDataOffset();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry20 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry20.setNames("", "ZipLong value: 1");
        int int24 = tarArchiveEntry20.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry27 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean28 = tarArchiveEntry27.isSparse();
        tarArchiveEntry27.setMode(26127);
        java.nio.file.attribute.FileTime fileTime31 = tarArchiveEntry27.getLastModifiedTime();
        tarArchiveEntry20.setModTime(fileTime31);
        cpioArchiveEntry16.setTime(fileTime31);
        tarArchiveEntry11.setStatusChangeTime(fileTime31);
        tarArchiveEntry5.setLastModifiedTime(fileTime31);
        x000A_NTFS0.setCreateFileTime(fileTime31);
        org.junit.Assert.assertNotNull(zipEightByteInteger1);
        org.junit.Assert.assertNotNull(zipEightByteInteger2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fileTime31);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        parallelScatterZipCreator0.writeTo(zipArchiveOutputStream6);
        zipArchiveOutputStream6.setFallbackToUTF8(true);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry12 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode13 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort14 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField15 = extraFieldParsingMode13.createExtraField(zipShort14);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField16 = jarArchiveEntry12.getExtraField(zipShort14);
        jarArchiveEntry12.setMethod((int) '4');
        jarArchiveEntry12.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry21 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry12);
        jarArchiveEntry12.setVersionMadeBy(508);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry24 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry12);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource25 = jarArchiveEntry24.getNameSource();
        // The following exception was thrown during execution in test generation
        try {
            zipArchiveOutputStream6.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) jarArchiveEntry24);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current CPIO entry");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
        org.junit.Assert.assertNotNull(extraFieldParsingMode13);
        org.junit.Assert.assertNotNull(zipShort14);
        org.junit.Assert.assertNotNull(zipExtraField15);
        org.junit.Assert.assertNull(zipExtraField16);
        org.junit.Assert.assertTrue("'" + nameSource25 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.NAME + "'", nameSource25.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.NAME));
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField11 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray13 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField17 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField11, byteArray13, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger18 = null;
        zip64ExtendedInformationExtraField11.setRelativeHeaderOffset(zipEightByteInteger18);
        byte[] byteArray20 = zip64ExtendedInformationExtraField11.getLocalFileDataData();
        zipArchiveEntry10.addExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField11);
        // The following exception was thrown during execution in test generation
        try {
            zip64ExtendedInformationExtraField11.reparseCentralDirectoryData(true, false, false, true);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: Central directory zip64 extended information extra field's length doesn't match central directory data.  Expected length 12 but is 0");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray10);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField12 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray10);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField14 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray16 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField14, byteArray16, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger21 = null;
        zip64ExtendedInformationExtraField14.setRelativeHeaderOffset(zipEightByteInteger21);
        byte[] byteArray23 = zip64ExtendedInformationExtraField14.getLocalFileDataData();
        byte[] byteArray24 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray23);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField25 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray23);
        unicodeCommentExtraField12.setUnicodeName(byteArray23);
        byte[] byteArray27 = unicodeCommentExtraField12.getUnicodeName();
        byte[] byteArray28 = unicodeCommentExtraField12.getUnicodeName();
        byte[] byteArray30 = new byte[] { (byte) -1 };
        byte[] byteArray31 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray30);
        long long32 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray30);
        boolean boolean34 = org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byteArray30, 0);
        unicodeCommentExtraField12.setUnicodeName(byteArray30);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray30, 508);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 508");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1]");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 255L + "'", long32 == 255L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp0.setFlags((byte) 75);
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField4 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray6 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField10 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField4, byteArray6, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger11 = null;
        zip64ExtendedInformationExtraField4.setRelativeHeaderOffset(zipEightByteInteger11);
        byte[] byteArray13 = zip64ExtendedInformationExtraField4.getLocalFileDataData();
        byte[] byteArray14 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray13);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField15 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray13);
        boolean boolean16 = x5455_ExtendedTimestamp0.equals((java.lang.Object) unicodeCommentExtraField15);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort17 = x5455_ExtendedTimestamp0.getCentralDirectoryLength();
        java.nio.file.attribute.FileTime fileTime18 = x5455_ExtendedTimestamp0.getModifyFileTime();
        java.util.Date date19 = x5455_ExtendedTimestamp0.getModifyJavaTime();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong20 = x5455_ExtendedTimestamp0.getCreateTime();
        java.nio.file.attribute.FileTime fileTime21 = x5455_ExtendedTimestamp0.getModifyFileTime();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField10);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(zipShort17);
        org.junit.Assert.assertNull(fileTime18);
        org.junit.Assert.assertNull(date19);
        org.junit.Assert.assertNull(zipLong20);
        org.junit.Assert.assertNull(fileTime21);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        org.apache.commons.compress.archivers.zip.GeneralPurposeBit generalPurposeBit1 = new org.apache.commons.compress.archivers.zip.GeneralPurposeBit();
        byte[] byteArray2 = generalPurposeBit1.encode();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipLong.putLong((-1L), byteArray2, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0]");
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource nameSource6 = jarArchiveEntry1.getNameSource();
        jarArchiveEntry1.setRawFlag(0);
        int int9 = jarArchiveEntry1.getVersionRequired();
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + nameSource6 + "' != '" + org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.NAME + "'", nameSource6.equals(org.apache.commons.compress.archivers.zip.ZipArchiveEntry.NameSource.NAME));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry0 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean4 = tarArchiveEntry3.isSparse();
        tarArchiveEntry3.setMode(26127);
        java.util.Date date7 = tarArchiveEntry3.getModTime();
        sevenZArchiveEntry0.setLastModifiedDate(date7);
        sevenZArchiveEntry0.setHasLastModifiedDate(false);
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry13 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet14 = dumpArchiveEntry13.getPermissions();
        boolean boolean15 = dumpArchiveEntry13.isDeleted();
        boolean boolean16 = dumpArchiveEntry13.isDirectory();
        java.util.Date date17 = dumpArchiveEntry13.getCreationTime();
        sevenZArchiveEntry0.setLastModifiedDate(date17);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.attribute.FileTime fileTime19 = sevenZArchiveEntry0.getCreationTime();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: The entry doesn't have this timestamp");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Jun 20 13:19:50 CEST 2023");
        org.junit.Assert.assertNotNull(pERMISSIONSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 01 01:00:00 CET 1970");
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        byte[] byteArray1 = null;
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding5 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("splitting");
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField7 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray9 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField13 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField7, byteArray9, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger14 = null;
        zip64ExtendedInformationExtraField7.setRelativeHeaderOffset(zipEightByteInteger14);
        byte[] byteArray16 = zip64ExtendedInformationExtraField7.getLocalFileDataData();
        byte[] byteArray17 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray16);
        org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField unicodeCommentExtraField18 = new org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField("tar\000", byteArray16);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray20 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray16, true);
        java.lang.String str21 = zipEncoding5.decode(byteArray16);
        java.nio.ByteBuffer byteBuffer23 = zipEncoding5.encode("ZipEightByteInteger value: 0");
        // The following exception was thrown during execution in test generation
        try {
            int int24 = org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes("tar\000", byteArray1, 504, (int) (byte) 2, zipEncoding5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zipEncoding5);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField13);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBuffer23);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("cpio");
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        java.lang.Object obj1 = asiExtraField0.clone();
        asiExtraField0.setDirectory(true);
        org.junit.Assert.assertNotNull(obj1);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.util.Set<java.lang.String> strSet1 = archiveStreamFactory0.getInputStreamArchiveNames();
        java.lang.String str2 = archiveStreamFactory0.getEntryEncoding();
        java.util.Set<java.lang.String> strSet3 = archiveStreamFactory0.getOutputStreamArchiveNames();
        java.io.InputStream inputStream5 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream6 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream5);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream5);
        boolean boolean8 = tarArchiveInputStream7.markSupported();
        int int9 = tarArchiveInputStream7.getRecordSize();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream10 = archiveStreamFactory0.createArchiveInputStream("0x5455 Zip Extra Field: Flags=1011000 ", (java.io.InputStream) tarArchiveInputStream7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: 0x5455 Zip Extra Field: Flags=1011000  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 512 + "'", int9 == 512);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        org.apache.commons.compress.archivers.arj.ArjArchiveEntry arjArchiveEntry0 = new org.apache.commons.compress.archivers.arj.ArjArchiveEntry();
        java.lang.String str1 = arjArchiveEntry0.getName();
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry4 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("070707", "ustar\000");
        boolean boolean5 = arjArchiveEntry0.equals((java.lang.Object) "ustar\000");
        java.util.Date date6 = arjArchiveEntry0.getLastModifiedDate();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong7 = org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(date6);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Nov 30 00:00:00 CET 1979");
        org.junit.Assert.assertNotNull(zipLong7);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        dumpArchiveEntry2.setVolume(488);
        java.lang.String str5 = dumpArchiveEntry2.getSimpleName();
        boolean boolean6 = dumpArchiveEntry2.isChrDev();
        int int7 = dumpArchiveEntry2.getHeaderHoles();
        dumpArchiveEntry2.setUserId(148);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "070707" + "'", str5, "070707");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet3 = dumpArchiveEntry2.getPermissions();
        boolean boolean4 = dumpArchiveEntry2.isChrDev();
        dumpArchiveEntry2.setGroupId(131);
        boolean boolean7 = dumpArchiveEntry2.isFile();
        boolean boolean8 = dumpArchiveEntry2.isBlkDev();
        boolean boolean9 = dumpArchiveEntry2.isFifo();
        org.junit.Assert.assertNotNull(pERMISSIONSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray3 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField7 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField1, byteArray3, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger8 = null;
        zip64ExtendedInformationExtraField1.setRelativeHeaderOffset(zipEightByteInteger8);
        byte[] byteArray10 = zip64ExtendedInformationExtraField1.getLocalFileDataData();
        byte[] byteArray11 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray10);
        org.apache.commons.compress.archivers.tar.TarFile tarFile13 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray11, "arj");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode15 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        byte[] byteArray17 = new byte[] { (byte) -1 };
        byte[] byteArray18 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray17);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField23 = extraFieldParsingMode15.onUnparseableExtraField(byteArray18, (int) (short) -1, 64, true, 16384);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray24 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray11, true, (org.apache.commons.compress.archivers.zip.ExtraFieldParsingBehavior) extraFieldParsingMode15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile25 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel0, byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField7);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(extraFieldParsingMode15);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertNull(zipExtraField23);
        org.junit.Assert.assertNotNull(zipExtraFieldArray24);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp11 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp11.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean17 = tarArchiveEntry16.isSparse();
        tarArchiveEntry16.setMode(26127);
        java.util.Date date20 = tarArchiveEntry16.getModTime();
        x5455_ExtendedTimestamp11.setModifyJavaTime(date20);
        zipArchiveEntry10.addAsFirstExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp11);
        zipArchiveEntry10.setTime((long) 488);
        java.lang.Object obj25 = zipArchiveEntry10.clone();
        int int26 = zipArchiveEntry10.getVersionMadeBy();
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Jun 20 13:19:51 CEST 2023");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "070707");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField5 = jarArchiveEntry1.getExtraField(zipShort3);
        jarArchiveEntry1.setMethod((int) '4');
        jarArchiveEntry1.setDiskNumberStart((long) 40960);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry10 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry((java.util.zip.ZipEntry) jarArchiveEntry1);
        byte[] byteArray11 = zipArchiveEntry10.getLocalFileDataExtra();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertNull(zipExtraField5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = asiExtraField0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = asiExtraField0.getHeaderId();
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipShort2);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator parallelScatterZipCreator0 = new org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        parallelScatterZipCreator0.writeTo(zipArchiveOutputStream6);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry10 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("ZipShort value: 20");
        org.apache.commons.compress.parallel.InputStreamSupplier inputStreamSupplier11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.concurrent.Callable<org.apache.commons.compress.archivers.zip.ScatterZipOutputStream> scatterZipOutputStreamCallable12 = parallelScatterZipCreator0.createCallable((org.apache.commons.compress.archivers.zip.ZipArchiveEntry) jarArchiveEntry10, inputStreamSupplier11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Method must be set on zipArchiveEntry: ZipShort value: 20");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        org.apache.commons.compress.archivers.zip.Zip64RequiredException zip64RequiredException1 = new org.apache.commons.compress.archivers.zip.Zip64RequiredException("org.apache.commons.compress.MemoryLimitException: 52 kb of memory would be needed; limit was 11 kb. If the file is not corrupt, consider increasing the memory limit.");
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile5 = new org.apache.commons.compress.archivers.zip.ZipFile(seekableByteChannel0, "070702", "070701", false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature feature0 = null;
        org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException unsupportedZipFeatureException1 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException(feature0);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry2 = unsupportedZipFeatureException1.getEntry();
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry3 = unsupportedZipFeatureException1.getEntry();
        java.lang.String str4 = unsupportedZipFeatureException1.toString();
        org.junit.Assert.assertNull(zipArchiveEntry2);
        org.junit.Assert.assertNull(zipArchiveEntry3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException: Unsupported feature null used in archive." + "'", str4, "org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException: Unsupported feature null used in archive.");
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        org.apache.commons.compress.archivers.zip.ZipLong zipLong1 = new org.apache.commons.compress.archivers.zip.ZipLong(11);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode2 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField4 = extraFieldParsingMode2.createExtraField(zipShort3);
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp5 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        x5455_ExtendedTimestamp5.setFlags((byte) 75);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry10 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean11 = tarArchiveEntry10.isSparse();
        tarArchiveEntry10.setMode(26127);
        java.util.Date date14 = tarArchiveEntry10.getModTime();
        x5455_ExtendedTimestamp5.setModifyJavaTime(date14);
        byte[] byteArray17 = new byte[] { (byte) -1 };
        byte[] byteArray18 = org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byteArray17);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField22 = extraFieldParsingMode2.fill((org.apache.commons.compress.archivers.zip.ZipExtraField) x5455_ExtendedTimestamp5, byteArray18, 0, 32768, true);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong24 = new org.apache.commons.compress.archivers.zip.ZipLong((long) 0);
        java.util.Date date25 = org.apache.commons.compress.archivers.zip.ZipUtil.fromDosTime(zipLong24);
        byte[] byteArray31 = new byte[] { (byte) 88, (byte) 50, (byte) -1, (byte) 88, (byte) 75 };
        org.apache.commons.compress.archivers.tar.TarFile tarFile32 = new org.apache.commons.compress.archivers.tar.TarFile(byteArray31);
        zipLong24.putLong(byteArray31, (int) (byte) 1);
        x5455_ExtendedTimestamp5.setCreateTime(zipLong24);
        boolean boolean36 = zipLong1.equals((java.lang.Object) x5455_ExtendedTimestamp5);
        org.junit.Assert.assertNotNull(extraFieldParsingMode2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipExtraField4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Jun 20 13:19:51 CEST 2023");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1]");
        org.junit.Assert.assertNotNull(zipExtraField22);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Nov 30 00:00:00 CET 1979");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[88, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        org.apache.commons.compress.archivers.zip.AsiExtraField asiExtraField0 = new org.apache.commons.compress.archivers.zip.AsiExtraField();
        boolean boolean1 = asiExtraField0.isLink();
        int int2 = asiExtraField0.getMode();
        asiExtraField0.setMode(10);
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS5 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry sevenZArchiveEntry6 = new org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry();
        boolean boolean7 = sevenZArchiveEntry6.getHasLastModifiedDate();
        org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] sevenZMethodConfigurationArray8 = new org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration[] {};
        sevenZArchiveEntry6.setContentMethods(sevenZMethodConfigurationArray8);
        java.nio.file.attribute.FileTime fileTime10 = null;
        sevenZArchiveEntry6.setLastModifiedTime(fileTime10);
        sevenZArchiveEntry6.setHasWindowsAttributes(false);
        long long14 = sevenZArchiveEntry6.getCrcValue();
        sevenZArchiveEntry6.setLastModifiedDate(11L);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry18 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode19 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort20 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField21 = extraFieldParsingMode19.createExtraField(zipShort20);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField22 = jarArchiveEntry18.getExtraField(zipShort20);
        java.lang.Object obj23 = jarArchiveEntry18.clone();
        java.util.Date date24 = jarArchiveEntry18.getLastModifiedDate();
        sevenZArchiveEntry6.setCreationDate(date24);
        x000A_NTFS5.setAccessJavaTime(date24);
        byte[] byteArray27 = x000A_NTFS5.getLocalFileDataData();
        // The following exception was thrown during execution in test generation
        try {
            asiExtraField0.parseFromCentralDirectoryData(byteArray27, 96, 0);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: The length is too short, only 0 bytes, expected at least 14");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(sevenZMethodConfigurationArray8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(extraFieldParsingMode19);
        org.junit.Assert.assertNotNull(zipShort20);
        org.junit.Assert.assertNotNull(zipExtraField21);
        org.junit.Assert.assertNull(zipExtraField22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "070707");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Thu Jan 01 00:59:59 CET 1970");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, -16, 88, 62, -43, -34, -79, -99, 1, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        dumpArchiveEntry2.setVolume(488);
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet5 = dumpArchiveEntry2.getPermissions();
        dumpArchiveEntry2.setGroupId(65535);
        int int8 = dumpArchiveEntry2.getHeaderHoles();
        org.junit.Assert.assertNotNull(pERMISSIONSet5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        org.apache.commons.compress.archivers.zip.JarMarker jarMarker0 = org.apache.commons.compress.archivers.zip.JarMarker.getInstance();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort1 = jarMarker0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = jarMarker0.getLocalFileDataLength();
        byte[] byteArray3 = jarMarker0.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = jarMarker0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.X000A_NTFS x000A_NTFS5 = new org.apache.commons.compress.archivers.zip.X000A_NTFS();
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger6 = x000A_NTFS5.getCreateTime();
        byte[] byteArray7 = x000A_NTFS5.getLocalFileDataData();
        byte[] byteArray8 = x000A_NTFS5.getCentralDirectoryData();
        // The following exception was thrown during execution in test generation
        try {
            jarMarker0.parseFromCentralDirectoryData(byteArray8, 345, 1000);
            org.junit.Assert.fail("Expected exception of type java.util.zip.ZipException; message: JarMarker doesn't expect any data");
        } catch (java.util.zip.ZipException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jarMarker0);
        org.junit.Assert.assertNotNull(zipShort1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNotNull(zipEightByteInteger6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry1 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        java.lang.Object obj2 = jarArchiveEntry1.clone();
        java.lang.Object obj3 = jarArchiveEntry1.clone();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry6 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long7 = tarArchiveEntry6.getDataOffset();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry15 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry15.setNames("", "ZipLong value: 1");
        int int19 = tarArchiveEntry15.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean23 = tarArchiveEntry22.isSparse();
        tarArchiveEntry22.setMode(26127);
        java.nio.file.attribute.FileTime fileTime26 = tarArchiveEntry22.getLastModifiedTime();
        tarArchiveEntry15.setModTime(fileTime26);
        cpioArchiveEntry11.setTime(fileTime26);
        tarArchiveEntry6.setStatusChangeTime(fileTime26);
        java.util.zip.ZipEntry zipEntry30 = jarArchiveEntry1.setCreationTime(fileTime26);
        java.lang.String str31 = jarArchiveEntry1.getComment();
        org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField32 = new org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField();
        byte[] byteArray34 = new byte[] { (byte) 1 };
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField38 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.fillExtraField((org.apache.commons.compress.archivers.zip.ZipExtraField) zip64ExtendedInformationExtraField32, byteArray34, 0, 0, false);
        org.apache.commons.compress.archivers.zip.ZipEightByteInteger zipEightByteInteger39 = null;
        zip64ExtendedInformationExtraField32.setRelativeHeaderOffset(zipEightByteInteger39);
        byte[] byteArray41 = zip64ExtendedInformationExtraField32.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField unparseableExtraField43 = null;
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray44 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray41, true, unparseableExtraField43);
        org.apache.commons.compress.archivers.zip.ZipExtraField[] zipExtraFieldArray45 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byteArray41);
        byte[] byteArray46 = org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(zipExtraFieldArray45);
        jarArchiveEntry1.setExtraFields(zipExtraFieldArray45);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry50 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        long long51 = tarArchiveEntry50.getDataOffset();
        org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry55 = new org.apache.commons.compress.archivers.cpio.CpioArchiveEntry((short) 8, "ZipLong value: 11", (long) 10240);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry59 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0, false);
        tarArchiveEntry59.setNames("", "ZipLong value: 1");
        int int63 = tarArchiveEntry59.getGroupId();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry66 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean67 = tarArchiveEntry66.isSparse();
        tarArchiveEntry66.setMode(26127);
        java.nio.file.attribute.FileTime fileTime70 = tarArchiveEntry66.getLastModifiedTime();
        tarArchiveEntry59.setModTime(fileTime70);
        cpioArchiveEntry55.setTime(fileTime70);
        tarArchiveEntry50.setStatusChangeTime(fileTime70);
        jarArchiveEntry1.setTime(fileTime70);
        java.security.cert.Certificate[] certificateArray75 = jarArchiveEntry1.getCertificates();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "070707");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "070707");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fileTime26);
        org.junit.Assert.assertNotNull(zipEntry30);
        org.junit.Assert.assertEquals(zipEntry30.toString(), "070707");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[1]");
        org.junit.Assert.assertNotNull(zipExtraField38);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(zipExtraFieldArray44);
        org.junit.Assert.assertNotNull(zipExtraFieldArray45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(fileTime70);
        org.junit.Assert.assertNull(certificateArray75);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        // The following exception was thrown during execution in test generation
        try {
            cpioArchiveOutputStream1.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField resourceAlignmentExtraField2 = new org.apache.commons.compress.archivers.zip.ResourceAlignmentExtraField((int) (byte) 75, true);
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = resourceAlignmentExtraField2.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry5 = new org.apache.commons.compress.archivers.jar.JarArchiveEntry("070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode extraFieldParsingMode6 = org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ExtraFieldParsingMode.ONLY_PARSEABLE_LENIENT;
        org.apache.commons.compress.archivers.zip.ZipShort zipShort7 = org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID;
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField8 = extraFieldParsingMode6.createExtraField(zipShort7);
        org.apache.commons.compress.archivers.zip.ZipExtraField zipExtraField9 = jarArchiveEntry5.getExtraField(zipShort7);
        java.lang.Object obj10 = jarArchiveEntry5.clone();
        boolean boolean11 = zipShort3.equals((java.lang.Object) jarArchiveEntry5);
        boolean boolean12 = jarArchiveEntry5.isStreamContiguous();
        jarArchiveEntry5.setSize(0L);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(extraFieldParsingMode6);
        org.junit.Assert.assertNotNull(zipShort7);
        org.junit.Assert.assertNotNull(zipExtraField8);
        org.junit.Assert.assertNull(zipExtraField9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "070707");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "070707");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "070707");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile x0015_CertificateIdForFile0 = new org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm1 = x0015_CertificateIdForFile0.getHashAlgorithm();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x0015_CertificateIdForFile0.getCentralDirectoryLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort3 = x0015_CertificateIdForFile0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort4 = x0015_CertificateIdForFile0.getHeaderId();
        org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile x0015_CertificateIdForFile5 = new org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile();
        org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm hashAlgorithm6 = x0015_CertificateIdForFile5.getHashAlgorithm();
        byte[] byteArray7 = x0015_CertificateIdForFile5.getLocalFileDataData();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort8 = x0015_CertificateIdForFile5.getLocalFileDataLength();
        byte[] byteArray9 = zipShort8.getBytes();
        // The following exception was thrown during execution in test generation
        try {
            x0015_CertificateIdForFile0.parseFromLocalFileData(byteArray9, 54, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(hashAlgorithm1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNotNull(zipShort3);
        org.junit.Assert.assertNotNull(zipShort4);
        org.junit.Assert.assertNull(hashAlgorithm6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(zipShort8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0]");
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream3 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream2);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream4 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream2);
        arArchiveOutputStream4.finish();
        arArchiveOutputStream4.flush();
        arArchiveOutputStream4.setLongFileMode(4095);
        long long9 = arArchiveOutputStream4.getBytesWritten();
        int int10 = arArchiveOutputStream4.getCount();
        java.io.File file11 = null;
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create("compressionElapsed=-1687259929102ms, mergingElapsed=0ms", (java.io.OutputStream) arArchiveOutputStream4, file11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: compressionElapsed=-1687259929102ms, mergingElapsed=0ms not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        char[] charArray5 = new char[] { '#', '4', '#' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile6 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel0, "compressionElapsed=-1687259966267ms, mergingElapsed=0ms", charArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#4#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#4#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, 4, #]");
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        org.apache.commons.compress.archivers.examples.Archiver archiver0 = new org.apache.commons.compress.archivers.examples.Archiver();
        java.io.OutputStream outputStream1 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream2 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream3 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream5 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream1, "070707");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream6 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream5);
        java.lang.String str7 = zipArchiveOutputStream6.getEncoding();
        zipArchiveOutputStream6.setUseLanguageEncodingFlag(false);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream6, "070701");
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode12 = org.apache.commons.compress.archivers.zip.Zip64Mode.Never;
        zipArchiveOutputStream6.setUseZip64(zip64Mode12);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream6);
        long long15 = zipArchiveOutputStream6.getBytesWritten();
        java.nio.file.Path path16 = null;
        java.nio.file.FileVisitOption[] fileVisitOptionArray17 = new java.nio.file.FileVisitOption[] {};
        java.util.EnumSet<java.nio.file.FileVisitOption> fileVisitOptionSet19 = java.util.EnumSet.noneOf(java.nio.file.FileVisitOption.class);
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.file.FileVisitOption>) fileVisitOptionSet19, fileVisitOptionArray17);
        java.nio.file.LinkOption[] linkOptionArray21 = new java.nio.file.LinkOption[] {};
        // The following exception was thrown during execution in test generation
        try {
            archiver0.create((org.apache.commons.compress.archivers.ArchiveOutputStream) zipArchiveOutputStream6, path16, fileVisitOptionSet19, linkOptionArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTF8" + "'", str7, "UTF8");
        org.junit.Assert.assertTrue("'" + zip64Mode12 + "' != '" + org.apache.commons.compress.archivers.zip.Zip64Mode.Never + "'", zip64Mode12.equals(org.apache.commons.compress.archivers.zip.Zip64Mode.Never));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(fileVisitOptionArray17);
        org.junit.Assert.assertNotNull(fileVisitOptionSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(linkOptionArray21);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry dumpArchiveEntry2 = new org.apache.commons.compress.archivers.dump.DumpArchiveEntry("`\n", "070707");
        java.util.Set<org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION> pERMISSIONSet3 = dumpArchiveEntry2.getPermissions();
        int int4 = dumpArchiveEntry2.getHeaderHoles();
        long long5 = dumpArchiveEntry2.getOffset();
        int int6 = dumpArchiveEntry2.getMode();
        dumpArchiveEntry2.setMode(488);
        org.junit.Assert.assertNotNull(pERMISSIONSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        byte[] byteArray1 = org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes((long) 31);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[31, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream1 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream2 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry5 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ustar\000", (byte) 54);
        boolean boolean6 = arArchiveOutputStream2.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream2, "compressionElapsed=-1687259929102ms, mergingElapsed=0ms");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: compressionElapsed=-1687259929102ms, mergingElapsed=0ms");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        char[] charArray2 = new char[] { '#' };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile3 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel0, charArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry1 = new org.apache.commons.compress.archivers.zip.ZipArchiveEntry(" \000");
        long long2 = zipArchiveEntry1.getCompressedSize();
        zipArchiveEntry1.setCrc((long) 16);
        int int5 = zipArchiveEntry1.getRawFlag();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        java.nio.file.Path path0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.ZipFile zipFile2 = new org.apache.commons.compress.archivers.zip.ZipFile(path0, "ar");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        java.nio.channels.SeekableByteChannel seekableByteChannel0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.sevenz.SevenZFile sevenZFile2 = new org.apache.commons.compress.archivers.sevenz.SevenZFile(seekableByteChannel0, "compressionElapsed=-1687259963560ms, mergingElapsed=0ms");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        java.nio.file.Path path1 = null;
        org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier defaultBackingStoreSupplier2 = new org.apache.commons.compress.archivers.zip.DefaultBackingStoreSupplier(path1);
        org.apache.commons.compress.parallel.ScatterGatherBackingStore scatterGatherBackingStore3 = defaultBackingStoreSupplier2.get();
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor4 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore3);
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor5 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore3);
        org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor6 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(scatterGatherBackingStore3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.zip.StreamCompressor streamCompressor7 = org.apache.commons.compress.archivers.zip.StreamCompressor.create(8192, scatterGatherBackingStore3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(scatterGatherBackingStore3);
        org.junit.Assert.assertNotNull(streamCompressor4);
        org.junit.Assert.assertNotNull(streamCompressor5);
        org.junit.Assert.assertNotNull(streamCompressor6);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.file.attribute.FileTime fileTime1 = x5455_ExtendedTimestamp0.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort2 = x5455_ExtendedTimestamp0.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp x5455_ExtendedTimestamp3 = new org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp();
        java.nio.file.attribute.FileTime fileTime4 = x5455_ExtendedTimestamp3.getModifyFileTime();
        org.apache.commons.compress.archivers.zip.ZipShort zipShort5 = x5455_ExtendedTimestamp3.getLocalFileDataLength();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong7 = new org.apache.commons.compress.archivers.zip.ZipLong((long) 0);
        x5455_ExtendedTimestamp3.setModifyTime(zipLong7);
        x5455_ExtendedTimestamp0.setAccessTime(zipLong7);
        x5455_ExtendedTimestamp0.setFlags((byte) 88);
        java.lang.String str12 = x5455_ExtendedTimestamp0.toString();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry15 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", true);
        boolean boolean16 = tarArchiveEntry15.isSparse();
        tarArchiveEntry15.setMode(26127);
        java.util.Date date19 = tarArchiveEntry15.getModTime();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = tarArchiveEntry15.getExtraPaxHeaders();
        tarArchiveEntry15.setGroupId(257);
        java.util.Date date23 = tarArchiveEntry15.getLastModifiedDate();
        x5455_ExtendedTimestamp0.setModifyJavaTime(date23);
        org.junit.Assert.assertNull(fileTime1);
        org.junit.Assert.assertNotNull(zipShort2);
        org.junit.Assert.assertNull(fileTime4);
        org.junit.Assert.assertNotNull(zipShort5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0x5455 Zip Extra Field: Flags=1011000 " + "'", str12, "0x5455 Zip Extra Field: Flags=1011000 ");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Jun 20 13:19:52 CEST 2023");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Jun 20 13:19:52 CEST 2023");
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.compress.archivers.ar.ArArchiveEntry arArchiveEntry2 = new org.apache.commons.compress.archivers.ar.ArArchiveEntry("0x5455 Zip Extra Field: Flags=1  Modify:[Sat Feb 19 06:19:12 CET 1972] ", (-1687259938604L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length must not be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE tYPE1 = org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(33188);
        org.junit.Assert.assertTrue("'" + tYPE1 + "' != '" + org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN + "'", tYPE1.equals(org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN));
    }
}
